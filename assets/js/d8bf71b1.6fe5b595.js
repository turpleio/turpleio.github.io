"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[1039],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8300:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),l=["components"],o={title:"CAST keyword",sidebar_label:"CAST",description:"CAST SQL keyword reference documentation."},s={unversionedId:"reference/sql/cast",id:"reference/sql/cast",isDocsHomePage:!1,title:"CAST keyword",description:"CAST SQL keyword reference documentation.",source:"@site/docs/reference/sql/cast.md",sourceDirName:"reference/sql",slug:"/reference/sql/cast",permalink:"/docs/reference/sql/cast",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/sql/cast.md",version:"current",sidebar_label:"CAST",frontMatter:{title:"CAST keyword",sidebar_label:"CAST",description:"CAST SQL keyword reference documentation."},sidebar:"docs",previous:{title:"CASE keyword",permalink:"/docs/reference/sql/case"},next:{title:"COPY keyword",permalink:"/docs/reference/sql/copy"}},c=[{value:"Syntax",id:"syntax",children:[]},{value:"Explicit conversion",id:"explicit-conversion",children:[]},{value:"Examples",id:"examples",children:[{value:"Precision loss examples",id:"precision-loss-examples",children:[]}]},{value:"Implicit conversion",id:"implicit-conversion",children:[]}],p={toc:c};function m(e){var t=e.components,o=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Type conversion. Can be either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#explicit-conversion"},"Explicit")," via ",(0,i.kt)("inlineCode",{parentName:"li"},"cast()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#implicit-conversion"},"Implicit"),", in which case it will be automatically\nperformed when required by the context.")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Flow chart showing the syntax of the CAST keyword",src:n(6686).Z})),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expression")," can be a constant, a column, or an expression that evaluates to a\nvalue."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," refers to the desired ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/sql/datatypes"},"data type"),".")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cast")," can be used a part of arithmetic expression as normal"),(0,i.kt)("h2",{id:"explicit-conversion"},"Explicit conversion"),(0,i.kt)("p",null,"Types can be converted from one to another using the ",(0,i.kt)("inlineCode",{parentName:"p"},"cast()")," function."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Queries"',title:'"Queries"'},"SELECT\ncast(3L + 2L AS INT),\ncast(1578506142000000 AS TIMESTAMP),\ncast('10.2' AS DOUBLE),\ncast('\u884c' AS INT);\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"cast"),(0,i.kt)("th",{parentName:"tr",align:null},"cast1"),(0,i.kt)("th",{parentName:"tr",align:null},"cast2"),(0,i.kt)("th",{parentName:"tr",align:null},"cast3"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"2020-01-08T17:55:42.000000Z"),(0,i.kt)("td",{parentName:"tr",align:null},"10.2"),(0,i.kt)("td",{parentName:"tr",align:null},"34892")))),(0,i.kt)("p",null,"Explicit casting of an expression to a smaller\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/sql/datatypes"},"data type")," may result in loss of data when the\noutput data type is smaller than the expression."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Casting a decimal number type (",(0,i.kt)("inlineCode",{parentName:"li"},"float")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"double"),") to an integer number type\n(",(0,i.kt)("inlineCode",{parentName:"li"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"short"),") will result in decimals drop."),(0,i.kt)("li",{parentName:"ul"},"If the integer part being cast is larger than the resulting data type, it will\nbe resized by truncating bits."),(0,i.kt)("li",{parentName:"ul"},"Conversions from ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," to a number type will return the corresponding\n",(0,i.kt)("inlineCode",{parentName:"li"},"unicode")," number and vice versa.")),(0,i.kt)("h3",{id:"precision-loss-examples"},"Precision loss examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Queries"',title:'"Queries"'},"SELECT\ncast(3.5 + 2 AS INT),\ncast(7234623 AS SHORT),\ncast(2334444.323 AS SHORT);\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"cast"),(0,i.kt)("th",{parentName:"tr",align:null},"cast1"),(0,i.kt)("th",{parentName:"tr",align:null},"cast2"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"25663"),(0,i.kt)("td",{parentName:"tr",align:null},"-24852")))),(0,i.kt)("p",null,"When casting numbers into a smaller data type, QuestDB will truncate the higher\nbits of this number."),(0,i.kt)("h2",{id:"implicit-conversion"},"Implicit conversion"),(0,i.kt)("p",null,"Type casting may be necessary in certain context such as"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Operations involving various different types"),(0,i.kt)("li",{parentName:"ul"},"Inserting values where the originating type is different from the destination\ncolumn type.")),(0,i.kt)("p",null,"QuestDB will attempt to convert to the data type required by the context. This\nis called ",(0,i.kt)("inlineCode",{parentName:"p"},"implicit cast")," and does not require using the ",(0,i.kt)("inlineCode",{parentName:"p"},"cast()")," function."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"QuestDB will only perform implicit cast when they would not result in data being\ntruncated or precision being lost."))),(0,i.kt)("p",null,"The below chart illustrates the explicit and implicit cast available in QuestDB."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Table showing the different possibilities the cast function supports, those are defined by an input and output types",src:n(9579).Z})),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Implicit casting prevents data loss. When an operation involves multiple types,\nthe resulting type will be the smallest possible type so that no data is lost."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Queries"',title:'"Queries"'},"SELECT\n1234L + 567,\n1234L + 0.567,\nto_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss') + 323,\nto_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss') + 0.323;\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"column"),(0,i.kt)("th",{parentName:"tr",align:null},"column1"),(0,i.kt)("th",{parentName:"tr",align:null},"column2"),(0,i.kt)("th",{parentName:"tr",align:null},"column3"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1801"),(0,i.kt)("td",{parentName:"tr",align:null},"1234.567"),(0,i.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000323Z"),(0,i.kt)("td",{parentName:"tr",align:null},"1571270400000000")))))}m.isMDXComponent=!0},9579:function(e,t,n){t.Z=n.p+"assets/images/castmap-a387eddb6879d751c8e7b014c3aff51b.jpg"}}]);