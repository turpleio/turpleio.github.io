"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[178],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return g}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),d=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=d(t.components);return n.createElement(o.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),k=d(a),g=r,N=k["".concat(o,".").concat(g)]||k[g]||p[g]||l;return a?n.createElement(N,i(i({ref:e},m),{},{components:a})):n.createElement(N,i({ref:e},m))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},9969:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return s},metadata:function(){return o},toc:function(){return d},default:function(){return p}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=["components"],s={title:"Create my first dataset",description:"This document shows how to work with QuestDB as a time series database by generating dummy time series data, insert the data into a table, then querying and cleaning up the example data set."},o={unversionedId:"get-started/first-database",id:"get-started/first-database",isDocsHomePage:!1,title:"Create my first dataset",description:"This document shows how to work with QuestDB as a time series database by generating dummy time series data, insert the data into a table, then querying and cleaning up the example data set.",source:"@site/docs/get-started/first-database.md",sourceDirName:"get-started",slug:"/get-started/first-database",permalink:"/docs/get-started/first-database",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/get-started/first-database.md",version:"current",frontMatter:{title:"Create my first dataset",description:"This document shows how to work with QuestDB as a time series database by generating dummy time series data, insert the data into a table, then querying and cleaning up the example data set."},sidebar:"docs",previous:{title:"Get started with QuestDB via Homebrew (macOS)",permalink:"/docs/get-started/homebrew"},next:{title:"Learn more",permalink:"/docs/get-started/learn-more"}},d=[{value:"Creating a table",id:"creating-a-table",children:[]},{value:"Inserting data",id:"inserting-data",children:[]},{value:"Running queries",id:"running-queries",children:[]},{value:"Deleting tables",id:"deleting-tables",children:[]}],m={toc:d};function p(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The goal of this guide is to explore QuestDB's features and to interact with\ntime series data and assumes you have an instance running. You can find guides\nto setup QuestDB on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/"},"introduction page"),". In this tutorial, you will\nlearn how to:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#creating-a-table"},"Create tables")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#inserting-data"},"Populate tables with sample data")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#running-queries"},"Run simple and advanced queries")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#deleting-tables"},"Delete tables"))),(0,l.kt)("p",null,"As an example, we will look at hypothetical temperature readings from a variety\nof sensors."),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"All commands are run through the ",(0,l.kt)("a",{parentName:"p",href:"/docs/develop/web-console"},"Web Console"),"\naccessible at http://localhost:9000."),(0,l.kt)("p",{parentName:"div"},"You can also run the same SQL via the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/api/postgres"},"Postgres endpoint")," or the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/api/rest"},"REST API"),"."))),(0,l.kt)("h2",{id:"creating-a-table"},"Creating a table"),(0,l.kt)("p",null,"The first step is to create tables. One table will contain the metadata of our\nsensors, and the other will contain the actual readings (payload data) from\nthese sensors."),(0,l.kt)("p",null,"Let's start by creating the ",(0,l.kt)("inlineCode",{parentName:"p"},"sensors")," table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE sensors (ID LONG, make STRING, city STRING);\n")),(0,l.kt)("p",null,"For more information about this statement, please refer to the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/create-table"},"CREATE TABLE")," reference documentation."),(0,l.kt)("h2",{id:"inserting-data"},"Inserting data"),(0,l.kt)("p",null,"Let's populate our ",(0,l.kt)("inlineCode",{parentName:"p"},"sensors")," table with procedurally-generated data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Insert as SELECT"',title:'"Insert',as:!0,'SELECT"':!0},"INSERT INTO sensors\n    SELECT\n        x ID, --increasing integer\n        rnd_str('Eberle', 'Honeywell', 'Omron', 'United Automation', 'RS Pro') make,\n        rnd_str('New York', 'Miami', 'Boston', 'Chicago', 'San Francisco') city\n    FROM long_sequence(10000) x\n;\n")),(0,l.kt)("p",null,"For more information about insert statements, refer to the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/insert"},"INSERT")," reference documentation. To learn more\nabout the functions used here, see the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/function/random-value-generator"},"random generator")," and\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/function/row-generator"},"row generator")," pages."),(0,l.kt)("p",null,"Our ",(0,l.kt)("inlineCode",{parentName:"p"},"sensors")," table now contains 10,000 randomly-generated sensor values of\ndifferent makes and in various cities. Use this command to view the table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"'sensors';\n")),(0,l.kt)("p",null,"It should look like the table below:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ID"),(0,l.kt)("th",{parentName:"tr",align:"left"},"make"),(0,l.kt)("th",{parentName:"tr",align:"left"},"city"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Honeywell"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Chicago")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2"),(0,l.kt)("td",{parentName:"tr",align:"left"},"United Automation"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"3"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Honeywell"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Chicago")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"4"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"...")))),(0,l.kt)("p",null,"Let's now create some sensor readings. In this case, we will create the table\nand generate the data at the same time:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Create table as"',title:'"Create',table:!0,'as"':!0},"CREATE TABLE readings\nAS(\n    SELECT\n        x ID,\n        timestamp_sequence(to_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss'), rnd_long(1,10,0) * 100000L) ts,\n        rnd_double(0)*8 + 15 temp,\n        rnd_long(0, 10000, 0) sensorId\n    FROM long_sequence(10000000) x)\nTIMESTAMP(ts)\nPARTITION BY MONTH;\n")),(0,l.kt)("p",null,"The query above demonstrates how to use the following features:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TIMESTAMP(ts)")," elects the ",(0,l.kt)("inlineCode",{parentName:"li"},"ts")," column as a\n",(0,l.kt)("a",{parentName:"li",href:"/docs/concept/designated-timestamp"},"designated timestamp"),". This enables\npartitioning tables by time."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PARTITION BY MONTH")," creates a monthly partitioning strategy where the stored\ndata is effectively sharded by month.")),(0,l.kt)("p",null,"The generated data will look like the following:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ID"),(0,l.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,l.kt)("th",{parentName:"tr",align:"left"},"temp"),(0,l.kt)("th",{parentName:"tr",align:"left"},"sensorId"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.000000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"19.37373911"),(0,l.kt)("td",{parentName:"tr",align:"left"},"9160")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.600000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"21.91184617"),(0,l.kt)("td",{parentName:"tr",align:"left"},"9671")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"3"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:01.400000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"16.58367834"),(0,l.kt)("td",{parentName:"tr",align:"left"},"8731")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"4"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:01.500000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"16.69308815"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3447")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:01.600000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"19.67991569"),(0,l.kt)("td",{parentName:"tr",align:"left"},"7985")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"...")))),(0,l.kt)("h2",{id:"running-queries"},"Running queries"),(0,l.kt)("p",null,"Let's select all records from the ",(0,l.kt)("inlineCode",{parentName:"p"},"readings")," table (note that ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT * FROM")," is\noptional in QuestDB):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"readings;\n")),(0,l.kt)("p",null,"Let's also select the ",(0,l.kt)("inlineCode",{parentName:"p"},"count")," of records from ",(0,l.kt)("inlineCode",{parentName:"p"},"readings"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT count() FROM readings;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"count"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"10,000,000")))),(0,l.kt)("p",null,"and the average reading:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT avg(temp) FROM readings;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"average"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"18.999217780895")))),(0,l.kt)("p",null,"We can now use the ",(0,l.kt)("inlineCode",{parentName:"p"},"sensors")," table alongside the ",(0,l.kt)("inlineCode",{parentName:"p"},"readings")," table to get more\ninteresting results using a ",(0,l.kt)("inlineCode",{parentName:"p"},"JOIN"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT *\nFROM readings\nJOIN(\n    SELECT ID sensId, make, city\n    FROM sensors)\nON readings.sensorId = sensId;\n")),(0,l.kt)("p",null,"The results should look like the table below:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ID"),(0,l.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,l.kt)("th",{parentName:"tr",align:"left"},"temp"),(0,l.kt)("th",{parentName:"tr",align:"left"},"sensorId"),(0,l.kt)("th",{parentName:"tr",align:"left"},"sensId"),(0,l.kt)("th",{parentName:"tr",align:"left"},"make"),(0,l.kt)("th",{parentName:"tr",align:"left"},"city"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"1"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.000000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"16.472200460982"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3211"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3211"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"New York")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.100000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"16.598432033599"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2319"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2319"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Honeywell"),(0,l.kt)("td",{parentName:"tr",align:"left"},"San Francisco")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"3"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.100000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"20.293681747009"),(0,l.kt)("td",{parentName:"tr",align:"left"},"8723"),(0,l.kt)("td",{parentName:"tr",align:"left"},"8723"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Honeywell"),(0,l.kt)("td",{parentName:"tr",align:"left"},"New York")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"4"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.100000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"20.939263119843"),(0,l.kt)("td",{parentName:"tr",align:"left"},"885"),(0,l.kt)("td",{parentName:"tr",align:"left"},"885"),(0,l.kt)("td",{parentName:"tr",align:"left"},"RS Pro"),(0,l.kt)("td",{parentName:"tr",align:"left"},"San Francisco")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"5"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:00.200000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"19.336660059029"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3200"),(0,l.kt)("td",{parentName:"tr",align:"left"},"3200"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Honeywell"),(0,l.kt)("td",{parentName:"tr",align:"left"},"San Francisco")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"6"),(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-17T00:00:01.100000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"20.946643576954"),(0,l.kt)("td",{parentName:"tr",align:"left"},"4053"),(0,l.kt)("td",{parentName:"tr",align:"left"},"4053"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Honeywell"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Aggregation keyed by city"',title:'"Aggregation',keyed:!0,by:!0,'city"':!0},"SELECT city, max(temp)\nFROM readings\nJOIN(\n    SELECT ID sensId, city\n    FROM sensors) a\nON readings.sensorId = a.sensId;\n")),(0,l.kt)("p",null,"The results should look like the table below:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"city"),(0,l.kt)("th",{parentName:"tr",align:"left"},"max"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"New York"),(0,l.kt)("td",{parentName:"tr",align:"left"},"22.999998786398")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"San Francisco"),(0,l.kt)("td",{parentName:"tr",align:"left"},"22.999998138348")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami"),(0,l.kt)("td",{parentName:"tr",align:"left"},"22.99999994818")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Chicago"),(0,l.kt)("td",{parentName:"tr",align:"left"},"22.999991705861")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Boston"),(0,l.kt)("td",{parentName:"tr",align:"left"},"22.999999233377")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Aggregation by hourly time buckets"',title:'"Aggregation',by:!0,hourly:!0,time:!0,'buckets"':!0},"SELECT ts, city, make, avg(temp)\nFROM readings timestamp(ts)\nJOIN\n    (SELECT ID sensId, city, make\n    FROM sensors\n    WHERE city='Miami' AND make='Omron') a\nON readings.sensorId = a.sensId\nWHERE ts IN '2019-10-21;1d' -- this is an interval between 21-10 and 1 day later\n")),(0,l.kt)("p",null,"The results should look like the table below:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,l.kt)("th",{parentName:"tr",align:"left"},"city"),(0,l.kt)("th",{parentName:"tr",align:"left"},"make"),(0,l.kt)("th",{parentName:"tr",align:"left"},"average"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-21T00:00:44.600000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"20.004285872098")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-21T00:00:52.400000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"16.68436714013")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-21T00:01:05.400000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"15.243684089291")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-21T00:01:06.100000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"17.193984104315")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2019-10-21T00:01:07.100000Z"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Miami"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Omron"),(0,l.kt)("td",{parentName:"tr",align:"left"},"20.778686822666")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"..."),(0,l.kt)("td",{parentName:"tr",align:"left"},"...")))),(0,l.kt)("p",null,"For more information about these statements, please refer to the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/select"},"SELECT")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/join"},"JOIN")," pages."),(0,l.kt)("h2",{id:"deleting-tables"},"Deleting tables"),(0,l.kt)("p",null,"We can now clean up the demo data by using ",(0,l.kt)("inlineCode",{parentName:"p"},"DROP TABLE")," SQL. Be careful using\nthis statement as QuestDB cannot recover data that is deleted in this way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"DROP TABLE readings;\nDROP TABLE sensors;\n")))}p.isMDXComponent=!0}}]);