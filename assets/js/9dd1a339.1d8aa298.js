"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[4703],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,k=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9072:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(3117),o=n(102),i=(n(7294),n(3905)),r=["components"],l={title:"JDBC connector",description:"JDBC driver support in QuestDB allows for ingesting messages from a Kafka topic via Kafka Connect."},s={unversionedId:"third-party-tools/kafka/jdbc",id:"third-party-tools/kafka/jdbc",isDocsHomePage:!1,title:"JDBC connector",description:"JDBC driver support in QuestDB allows for ingesting messages from a Kafka topic via Kafka Connect.",source:"@site/docs/third-party-tools/kafka/jdbc.md",sourceDirName:"third-party-tools/kafka",slug:"/third-party-tools/kafka/jdbc",permalink:"/docs/third-party-tools/kafka/jdbc",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/third-party-tools/kafka/jdbc.md",version:"current",frontMatter:{title:"JDBC connector",description:"JDBC driver support in QuestDB allows for ingesting messages from a Kafka topic via Kafka Connect."},sidebar:"docs",previous:{title:"QuestDB Kafka connector",permalink:"/docs/third-party-tools/kafka/questdb-kafka"},next:{title:"Telegraf",permalink:"/docs/third-party-tools/telegraf"}},p=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Configure Kafka",id:"configure-kafka",children:[]},{value:"Start Kafka",id:"start-kafka",children:[]},{value:"Publish messages",id:"publish-messages",children:[]},{value:"Verify the integration",id:"verify-the-integration",children:[]},{value:"JSON format",id:"json-format",children:[]}],c={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Support for the JDBC driver means that data can easily be exported from a Kafka\ntopic and ingested directly to QuestDB by means of Kafka Connect."),(0,i.kt)("p",null,"This article assumes that users have successfully set up an installation of\nKafka and are ready to start exporting messages to QuestDB."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"You will need the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kafka"),(0,i.kt)("li",{parentName:"ul"},"A running QuestDB instance")),(0,i.kt)("h2",{id:"configure-kafka"},"Configure Kafka"),(0,i.kt)("p",null,"The following binaries must be available to Kafka:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kafka Connect JDBC binary"),(0,i.kt)("li",{parentName:"ul"},"PostgreSQL JDBC driver")),(0,i.kt)("p",null,"To download these files, visit the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.confluent.io/hub/confluentinc/kafka-connect-jdbc"},"Kafka Connect JDBC"),"\npage which provides CLI installation and a direct download of the required\n",(0,i.kt)("inlineCode",{parentName:"p"},".jar")," files. Select the ZIP file for download, unzip the contents of the\narchive and copy the required ",(0,i.kt)("inlineCode",{parentName:"p"},".jar")," files to the Kafka ",(0,i.kt)("inlineCode",{parentName:"p"},"libs")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"unzip confluentinc-kafka-connect-jdbc-10.0.1.zip\ncd confluentinc-kafka-connect-jdbc-10.0.1\ncp kafka-connect-jdbc-10.0.1.jar /path/to/kafka_2.13-2.6.0/libs\ncp postgresql-42.2.10.jar /path/to/kafka_2.13-2.6.0/libs\n")),(0,i.kt)("p",null,"A configuration file ",(0,i.kt)("inlineCode",{parentName:"p"},"/path/to/kafka/config/connect-jdbc.properties")," must be\ncreated for Kafka Connect in standalone mode. The Postgres connection URL must\nmatch the destination QuestDB instance and a topic can be specified under the\n",(0,i.kt)("inlineCode",{parentName:"p"},"topics={mytopic}")," key. This example guide uses a topic ",(0,i.kt)("inlineCode",{parentName:"p"},"example-topic")," and the\nPostgres server is running on the default port ",(0,i.kt)("inlineCode",{parentName:"p"},"8812"),"."),(0,i.kt)("p",null,"Create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"config/connect-jdbc.properties")," with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"name=local-jdbc-sink\nconnector.class=io.confluent.connect.jdbc.JdbcSinkConnector\nconnection.url=jdbc:postgresql://127.0.0.1:8812/qdb?useSSL=false\nconnection.user=admin\nconnection.password=quest\n\ntopics=example-topic\ninsert.mode=insert\ndialect.name=PostgreSqlDatabaseDialect\npk.mode=none\nauto.create=true\n")),(0,i.kt)("h2",{id:"start-kafka"},"Start Kafka"),(0,i.kt)("p",null,"The commands listed in this section must be run from the Kafka home directory\nand in the order shown below."),(0,i.kt)("p",null,"Start the Kafka Zookeeper used to coordinate the server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"bin/zookeeper-server-start.sh  config/zookeeper.properties\n")),(0,i.kt)("p",null,"Start a Kafka server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"bin/kafka-server-start.sh  config/server.properties\n")),(0,i.kt)("p",null,"Start Kafka Connect:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"bin/connect-standalone.sh config/connect-standalone.properties config/connect-jdbc.properties\n")),(0,i.kt)("h2",{id:"publish-messages"},"Publish messages"),(0,i.kt)("p",null,"Messages can be published via the console producer script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"bin/kafka-console-producer.sh --topic example-topic --bootstrap-server localhost:9092\n")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},">")," greater-than symbol indicates that a messages can be published to the\nexample topic from the interactive session. Paste the following minified JSON as\na single line to publish messages and create the table ",(0,i.kt)("inlineCode",{parentName:"p"},"example-topic")," in the\nQuestDB instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{"schema":{"type":"struct","fields":[{"type":"boolean","optional":false,"field":"flag"},{"type":"int8","optional":false,"field":"id8"},{"type":"int16","optional":false,"field":"id16"},{"type":"int32","optional":false,"field":"id32"},{"type":"int64","optional":false,"field":"id64"},{"type":"float","optional":false,"field":"idFloat"},{"type":"double","optional":false,"field":"idDouble"},{"type":"string","optional":true,"field":"msg"}],"optional":false,"name":"msgschema"},"payload":{"flag":false,"id8":222,"id16":222,"id32":222,"id64":222,"idFloat":222,"idDouble":333,"msg":"hi"}}\n')),(0,i.kt)("h2",{id:"verify-the-integration"},"Verify the integration"),(0,i.kt)("p",null,"To verify that the data has been ingested into the ",(0,i.kt)("inlineCode",{parentName:"p"},"example-topic")," table, the\nfollowing request to QuestDB's ",(0,i.kt)("inlineCode",{parentName:"p"},"/exp")," REST endpoint can be made to export the\ntable contents via CURL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"curl -G \\\n  --data-urlencode \"query=select * from 'example-topic'\" \\\n  http://localhost:9000/exp\n")),(0,i.kt)("p",null,"The expected response based on the example JSON message published above will be\nthe following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},'"flag","id8","id16","id32","id64","idFloat","idDouble","msg"\nfalse,-34,-34,222,222,222.0000,333.0,"hi"\n')),(0,i.kt)("h2",{id:"json-format"},"JSON format"),(0,i.kt)("p",null,"The JSON object sent in the example above has the following structure containing\n",(0,i.kt)("inlineCode",{parentName:"p"},"schema")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," objects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "schema": {\n    "type": "struct",\n    "fields": [\n      {\n        "type": "boolean",\n        "optional": false,\n        "field": "flag"\n      },\n      {\n        "type": "int8",\n        "optional": false,\n        "field": "id8"\n      },\n      {\n        "type": "int16",\n        "optional": false,\n        "field": "id16"\n      },\n      {\n        "type": "int32",\n        "optional": false,\n        "field": "id32"\n      },\n      {\n        "type": "int64",\n        "optional": false,\n        "field": "id64"\n      },\n      {\n        "type": "float",\n        "optional": false,\n        "field": "idFloat"\n      },\n      {\n        "type": "double",\n        "optional": false,\n        "field": "idDouble"\n      },\n      {\n        "type": "string",\n        "optional": true,\n        "field": "msg"\n      }\n    ],\n    "optional": false,\n    "name": "msgschema"\n  },\n  "payload": {\n    "flag": false,\n    "id8": 222,\n    "id16": 222,\n    "id32": 222,\n    "id64": 222,\n    "idFloat": 222,\n    "idDouble": 333,\n    "msg": "hi"\n  }\n}\n')))}d.isMDXComponent=!0}}]);