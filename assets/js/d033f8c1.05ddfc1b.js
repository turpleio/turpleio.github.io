"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[921],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=u(r),m=a,g=f["".concat(l,".").concat(m)]||f[m]||p[m]||o;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},253:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return f}});var n=r(83117),a=r(80102),o=(r(67294),r(3905)),i=r(46092),s=["components"],l={title:"How we built inter-thread messaging from scratch",author:"Vlad Ilyushchenko",author_title:"QuestDB Team",author_url:"https://github.com/bluestreak01",author_image_url:"https://avatars.githubusercontent.com/bluestreak01",description:"Detailed explanation of QuestDB's thread messaging system. A benchmark also shows the capabilities of this system.",keywords:["performance","opensource","inter-thread messaging","questdb","database","architecture"],tags:["engineering","multithreading","architecture"],image:"/img/blog/2020-03-15/header.png"},u={permalink:"/blog/2021/11/03/interthread",source:"@site/blog/2021-11-03-interthread.md",title:"How we built inter-thread messaging from scratch",description:"Detailed explanation of QuestDB's thread messaging system. A benchmark also shows the capabilities of this system.",date:"2021-11-03T00:00:00.000Z",formattedDate:"November 3, 2021",tags:[{label:"engineering",permalink:"/blog/tags/engineering"},{label:"multithreading",permalink:"/blog/tags/multithreading"},{label:"architecture",permalink:"/blog/tags/architecture"}],readingTime:6.155,truncated:!0,prevItem:{title:"Why I joined QuestDB as a core database engineer",permalink:"/blog/2021/11/09/miguel-arregui-working-at-questdb"},nextItem:{title:"Real-time stock price dashboard using QuestDB, Python and Plotly",permalink:"/blog/2021/11/01/plotly-finnhub-realtime-dashboard"}},c=[],p={toc:c};function f(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{alt:"Flock of birds flying in a harmonised way",height:360,src:"/img/blog/2020-03-15/header.png",width:650,mdxType:"Banner"}),(0,o.kt)("p",null,"Inter-thread messaging is a fundamental part of any asynchronous system. It is\nthe component responsible for the transportation of data between threads.\nMessaging forms the infrastructure, scaffolding multi-threaded applications, and\njust like real-world transport infrastructure, we want it to be inexpensive,\nfast, reliable, and clean. For QuestDB, we wrote our own messaging system, and\nthis post is about how it works and how fast it is."))}f.isMDXComponent=!0},86010:function(e,t,r){function n(e){var t,r,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(r=n(e[t]))&&(a&&(a+=" "),a+=r);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,r=0,a="";r<arguments.length;)(e=arguments[r++])&&(t=n(e))&&(a&&(a+=" "),a+=t);return a}r.d(t,{Z:function(){return a}})}}]);