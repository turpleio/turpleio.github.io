"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[1961],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),N=s(n),u=l,k=N["".concat(d,".").concat(u)]||N[u]||m[u]||r;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=N;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},7504:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return d},toc:function(){return s},default:function(){return m}});var a=n(3117),l=n(102),r=(n(7294),n(3905)),i=["components"],o={title:"JOIN keyword",sidebar_label:"JOIN",description:"JOIN SQL keyword reference documentation."},d={unversionedId:"reference/sql/join",id:"reference/sql/join",isDocsHomePage:!1,title:"JOIN keyword",description:"JOIN SQL keyword reference documentation.",source:"@site/docs/reference/sql/join.md",sourceDirName:"reference/sql",slug:"/reference/sql/join",permalink:"/docs/reference/sql/join",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/sql/join.md",version:"current",sidebar_label:"JOIN",frontMatter:{title:"JOIN keyword",sidebar_label:"JOIN",description:"JOIN SQL keyword reference documentation."},sidebar:"docs",previous:{title:"INSERT keyword",permalink:"/docs/reference/sql/insert"},next:{title:"LATEST ON keyword",permalink:"/docs/reference/sql/latest-on"}},s=[{value:"Syntax",id:"syntax",children:[]},{value:"Execution order",id:"execution-order",children:[]},{value:"Implicit joins",id:"implicit-joins",children:[]},{value:"(INNER) JOIN",id:"inner-join",children:[]},{value:"LEFT (OUTER) JOIN",id:"left-outer-join",children:[]},{value:"CROSS JOIN",id:"cross-join",children:[]},{value:"ASOF JOIN",id:"asof-join",children:[]},{value:"LT JOIN",id:"lt-join",children:[]},{value:"SPLICE JOIN",id:"splice-join",children:[]}],p={toc:s};function m(e){var t=e.components,o=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"QuestDB supports the following types of joins: ",(0,r.kt)("inlineCode",{parentName:"p"},"INNER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"LEFT (OUTER)"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CROSS"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SPLICE"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"FULL")," joins are not yet implemented and are on our\nroadmap. All supported join types can be combined in a single SQL statement;\nQuestDB SQL's optimizer determines the best execution order and algorithms."),(0,r.kt)("p",null,"There are no known limitations on size of tables or sub-queries used in joins\nand there are no limitations on number of joins either."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Flow chart showing the syntax of the JOIN keyword",src:n(7314).Z})),(0,r.kt)("p",null,"Columns from joined tables are combined in single row. Columns with the same\nname originating from different tables will be automatically aliased to create a\nunique column namespace of the resulting set."),(0,r.kt)("p",null,"Though it is usually preferable to explicitly specify join conditions, QuestDB\nwill analyze ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clauses for implicit join conditions and will derive\ntransient join conditions where necessary."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"When tables are joined on column that has the same name in both tables you can\nuse the ",(0,r.kt)("inlineCode",{parentName:"p"},"ON (column)")," shorthand."))),(0,r.kt)("h2",{id:"execution-order"},"Execution order"),(0,r.kt)("p",null,"Join operations are performed in order of their appearance in a SQL query. The\nfollowing query performs a join on a table with one million rows based on a\ncolumn from a smaller table with one hundred rows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM 1_million_rows\nINNER JOIN 1_hundred_rows\nON 1_million_rows.customer_id = 1_hundred_rows.referral_id;\n")),(0,r.kt)("p",null,"The performance of this query can be improved by rewriting the query as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM 1_hundred_rows\nINNER JOIN 1_million_rows\nON 1_million_rows.referral_id = 1_hundred_rows.customer_id;\n")),(0,r.kt)("h2",{id:"implicit-joins"},"Implicit joins"),(0,r.kt)("p",null,"It is possible to join two tables using the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT *\nFROM a, b\nWHERE a.id = b.id;\n")),(0,r.kt)("p",null,"The type of join as well as the column will be inferred from the ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," clause,\nand may be either an ",(0,r.kt)("inlineCode",{parentName:"p"},"INNER")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"CROSS")," join. For the example above, the\nequivalent explicit statement would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT *\nFROM a\nJOIN b ON (id);\n")),(0,r.kt)("h2",{id:"inner-join"},"(INNER) JOIN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(INNER) JOIN")," is used to return rows from 2 tables where the records on the\ncompared column have matching values in both tables. ",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN")," is interpreted as\n",(0,r.kt)("inlineCode",{parentName:"p"},"INNER JOIN")," by default, making the ",(0,r.kt)("inlineCode",{parentName:"p"},"INNER")," keyword implicit."),(0,r.kt)("p",null,"The following query will return the ",(0,r.kt)("inlineCode",{parentName:"p"},"movieId")," and the average rating from table\n",(0,r.kt)("inlineCode",{parentName:"p"},"ratings"),". It will also add a column for the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," from table ",(0,r.kt)("inlineCode",{parentName:"p"},"movies"),". The\ncorresponding title will be identified based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"movieId")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ratings"),"\ntable matching an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"movies")," table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="INNER JOIN ON"',title:'"INNER',JOIN:!0,'ON"':!0},"SELECT movieId a, title, avg(rating)\nFROM ratings\nINNER JOIN (SELECT movieId id, title FROM movies)\nON ratings.movieId = id;\n\n-- Omitting 'INNER' makes the query equivalent:\nSELECT movieId a, title, avg(rating)\nFROM ratings\nJOIN (SELECT movieId id, title FROM movies)\nON ratings.movieId = id;\n")),(0,r.kt)("h2",{id:"left-outer-join"},"LEFT (OUTER) JOIN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN")," or simply ",(0,r.kt)("inlineCode",{parentName:"p"},"LEFT JOIN")," will return ",(0,r.kt)("strong",{parentName:"p"},"all")," records from the\nleft table, and if matched, the records of the right table. When there is no\nmatch for the right table, it will return ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," values in right table fields."),(0,r.kt)("p",null,"The general syntax is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="LEFT JOIN ON"',title:'"LEFT',JOIN:!0,'ON"':!0},"SELECT tab1.colA, tab2.colB\nFROM table1 tab1\nLEFT OUTER JOIN table2 tab2\nON tab1.colA = tab2.colB;\n\n-- Omitting 'OUTER' makes the query equivalent:\nSELECT tab1.colA, tab2.colB\nFROM table1 tab1\nLEFT JOIN table2 tab2\nON tab1.colA = tab2.colB;\n")),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"OUTER JOIN")," query can also be used to select all rows in the left table that\ndo not exist in the right table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT tab1.colA, tab2.colB\nFROM table1 tab1\nLEFT OUTER JOIN table2 tab2\nON tab1.colA = tab2.colB\nWHERE tab2.colB = NULL;\n")),(0,r.kt)("h2",{id:"cross-join"},"CROSS JOIN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CROSS JOIN")," will return the Cartesian product of the two tables being joined\nand can be used to create a table with all possible combinations of columns. The\nfollowing query will return all possible combinations of ",(0,r.kt)("inlineCode",{parentName:"p"},"starters")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"deserts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT *\nFROM starters\nCROSS JOIN deserts;\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"CROSS JOIN")," does not have an ",(0,r.kt)("inlineCode",{parentName:"p"},"ON")," clause."))),(0,r.kt)("h2",{id:"asof-join"},"ASOF JOIN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ASOF")," joins are used on time series data to join two tables based on timestamp\nwhere timestamps do not exactly match. For a given record at a given timestamp,\nit will return the corresponding record in the other table at the closest\ntimestamp ",(0,r.kt)("strong",{parentName:"p"},"prior to")," the timestamp in the first table."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To be able to leverage ",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF JOIN"),", both joined table must have a designated\n",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," column. To designate a column as ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp"),", please refer to the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/sql/create-table"},"CREATE TABLE")," section."))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ASOF")," join is performed on tables or result sets that are ordered by time. When\ntable is created as ordered by time order of records is enforced and timestamp\ncolumn name is in table metadata. ",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF")," join will use timestamp column from\nmetadata."),(0,r.kt)("p",null,"Given the following tables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ts"),(0,r.kt)("th",{parentName:"tr",align:null},"ask"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.200000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.400000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ts"),(0,r.kt)("th",{parentName:"tr",align:null},"bid"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.100000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.500000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"103")))),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF JOIN")," query can look like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT bids.ts timebid, bid, ask\nFROM bids\nASOF JOIN asks;\n")),(0,r.kt)("p",null,"The above query returns these results:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"timebid"),(0,r.kt)("th",{parentName:"tr",align:null},"bid"),(0,r.kt)("th",{parentName:"tr",align:null},"ask"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.100000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.500000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"103"),(0,r.kt)("td",{parentName:"tr",align:null},"102")))),(0,r.kt)("p",null,"Note that there is no ",(0,r.kt)("inlineCode",{parentName:"p"},"ASKS")," at timestamp ",(0,r.kt)("inlineCode",{parentName:"p"},"2019-10-17T00:00:00.100000Z"),". The\n",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF JOIN")," will look for the value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"BIDS")," table that has the closest\ntimestamp prior to or equal to the target timestamp."),(0,r.kt)("p",null,"In case tables do not have designated timestamp column, but data is in\nchronological order, timestamp columns can be specified at runtime:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT bids.ts timebid, bid, ask\nFROM (bids timestamp(ts))\nASOF JOIN (asks timestamp (ts));\n")),(0,r.kt)("p",null,"The query above assumes that there is only one instrument in ",(0,r.kt)("inlineCode",{parentName:"p"},"BIDS")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ASKS"),"\ntables and therefore does not use the optional ",(0,r.kt)("inlineCode",{parentName:"p"},"ON")," clause. If both tables store\ndata for multiple instruments ",(0,r.kt)("inlineCode",{parentName:"p"},"ON")," clause will allow you to find bids for asks\nwith matching instrument value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT *\nFROM asks\nASOF JOIN bids ON (instrument);\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"ASOF")," join does not check timestamp order, if data is not in chronological\norder, the join result is non-deterministic."))),(0,r.kt)("h2",{id:"lt-join"},"LT JOIN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LT")," join is very similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF"),", except that it searches for the last row\nfrom the right table strictly before the row from the left table. There will be\none or no rows joined from the right table per each row from the left table."),(0,r.kt)("p",null,"Consider the following tables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ts"),(0,r.kt)("th",{parentName:"tr",align:null},"ask"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.400000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ts"),(0,r.kt)("th",{parentName:"tr",align:null},"bid"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.500000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"103")))),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"LT JOIN")," can be built using the following query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT bids.ts timebid, asks.ts timeask, bid, ask\nFROM bids\nLT JOIN asks;\n")),(0,r.kt)("p",null,"The query above returns the following results:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"timebid"),(0,r.kt)("th",{parentName:"tr",align:null},"timeask"),(0,r.kt)("th",{parentName:"tr",align:null},"bid"),(0,r.kt)("th",{parentName:"tr",align:null},"ask"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL"),(0,r.kt)("td",{parentName:"tr",align:null},"101"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.500000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.400000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"103"),(0,r.kt)("td",{parentName:"tr",align:null},"102")))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"LT")," join is often useful to join a table to itself in order to get preceding\nvalues for every row."))),(0,r.kt)("h2",{id:"splice-join"},"SPLICE JOIN"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SPLICE JOIN")," is a full ",(0,r.kt)("inlineCode",{parentName:"p"},"ASOF JOIN"),". It will return all the records from both\ntables. For each record from left table splice join will find prevailing record\nfrom right table and for each record from right table - prevailing record from\nleft table."),(0,r.kt)("p",null,"Considering the following tables."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ts"),(0,r.kt)("th",{parentName:"tr",align:null},"ask"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.000000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.200000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.400000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102")))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"ts"),(0,r.kt)("th",{parentName:"tr",align:null},"bid"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.100000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.500000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"103")))),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"SPLICE JOIN")," can be built as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT bids.ts timebid, bid, ask\nFROM bids\nSPLICE JOIN asks;\n")),(0,r.kt)("p",null,"This query returns the following results:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"timebid"),(0,r.kt)("th",{parentName:"tr",align:null},"bid"),(0,r.kt)("th",{parentName:"tr",align:null},"ask"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.100000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101"),(0,r.kt)("td",{parentName:"tr",align:null},"100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.100000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"101"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102"),(0,r.kt)("td",{parentName:"tr",align:null},"101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.300000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"102"),(0,r.kt)("td",{parentName:"tr",align:null},"102")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2019-10-17T00:00:00.500000Z"),(0,r.kt)("td",{parentName:"tr",align:null},"103"),(0,r.kt)("td",{parentName:"tr",align:null},"102")))),(0,r.kt)("p",null,"Note that the above query does not use the optional ",(0,r.kt)("inlineCode",{parentName:"p"},"ON")," clause. In case you\nneed additional filtering on the two tables, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ON")," clause can be used as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT ts timebid, instrument bidInstrument, bid, ask\nFROM bids\nSPLICE JOIN\n    (\n    SELECT ts timesask, instrument askInstrument, ask ask\n    FROM asks\n    )\n    ON bidInstrument=askInstrument;\n")))}m.isMDXComponent=!0}}]);