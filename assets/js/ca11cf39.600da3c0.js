"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[220],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(a),h=o,g=p["".concat(l,".").concat(h)]||p[h]||c[h]||r;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},77232:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return u},metadata:function(){return d},toc:function(){return c},default:function(){return h}});var n=a(83117),o=a(80102),r=(a(67294),a(3905)),i=a(46092),s=a(72525),l=["components"],u={title:"Stream heart rate data into QuestDB via Google IoT Core",author:"Yitaek Hwang",author_title:"Guest",author_url:"https://github.com/Yitaek",author_image_url:"https://avatars.githubusercontent.com/Yitaek",description:"An end-to-end demo of a simple IoT system to stream and visualize heart rate data in Grafana via Google Cloud Platform",keywords:["timeseries","google","streaming","iot","grafana"],tags:["tutorial","streaming","iot","grafana","raspberrypi"],image:"/img/blog/shared/og-iot.png"},d={permalink:"/blog/2021/02/05/streaming-heart-rate-data-with-iot-core-and-questdb",source:"@site/blog/2021-02-05-streaming-heart-rate-data-with-iot-core-and-questdb.mdx",title:"Stream heart rate data into QuestDB via Google IoT Core",description:"An end-to-end demo of a simple IoT system to stream and visualize heart rate data in Grafana via Google Cloud Platform",date:"2021-02-05T00:00:00.000Z",formattedDate:"February 5, 2021",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"streaming",permalink:"/blog/tags/streaming"},{label:"iot",permalink:"/blog/tags/iot"},{label:"grafana",permalink:"/blog/tags/grafana"},{label:"raspberrypi",permalink:"/blog/tags/raspberrypi"}],readingTime:9.14,truncated:!1,prevItem:{title:"QuestDB 5.0.6 Release Highlights, January 2021",permalink:"/blog/2021/02/05/questdb-release-5-0-6-postgres-wire"},nextItem:{title:"A low-code bitcoin ticker built with QuestDB and n8n.io",permalink:"/blog/2021/01/18/low-code-bitcoin-ticker-workflow-with-time-series-database"}},c=[{value:"Background",id:"background",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Google Cloud Setup",id:"google-cloud-setup",children:[{value:"IoT Core",id:"iot-core",children:[]},{value:"Compute Engine",id:"compute-engine",children:[]},{value:"Pub/Sub",id:"pubsub",children:[]}]},{value:"IoT Device Setup",id:"iot-device-setup",children:[]},{value:"QuestDB Setup",id:"questdb-setup",children:[]},{value:"Pub/Sub to QuestDB",id:"pubsub-to-questdb",children:[]},{value:"Sending Data",id:"sending-data",children:[]},{value:"Visualizing Data with Grafana",id:"visualizing-data-with-grafana",children:[]},{value:"Summary",id:"summary",children:[]}],p={toc:c};function h(e){var t=e.components,a=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{alt:"Raspberry Pi devices on a workbench used in an IoT project",height:433,src:"/img/blog/2021-02-05-2/banner.jpg",width:650,mdxType:"Banner"},"Photo by ",(0,r.kt)("a",{href:"https://unsplash.com/@_louisreed"},"Louis Reed")," via"," ",(0,r.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,r.kt)("p",null,"This submission comes from one of our community contributors\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Yitaek"},"Yitaek Hwang")," who has put together a nice guide for\nstreaming fitness data into QuestDB with Google Cloud Platform."),(0,r.kt)("p",null,"Thanks for your contribution, Yitaek!"),(0,r.kt)("h2",{id:"background"},"Background"),(0,r.kt)("p",null,"Thanks to the growing popularity of fitness trackers and smartwatches, more\npeople are tracking their biometrics data closely and integrating IoT into their\neveryday lives. In my search for a DIY heart rate tracker, I found an excellent\nwalkthrough from Brandon Freitag and\n",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/u/87b2115d4438"},"Gabe Weiss"),", using Google Cloud services to\nstream data from a Raspberry Pi with a heart rate sensor to BigQuery via IoT\nCore and Cloud Dataflow."),(0,r.kt)(s.Z,{alt:"A diagram with Raspberry Pi sending data to Google Cloud Platform services",height:138,src:"/img/blog/2021-02-05-2/gcp-diagram.png",title:"Example stack with Google Cloud Platform services",width:650,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Although Cloud Dataflow supports streaming inserts to BigQuery, I wanted to take\nthis opportunity to try out a new time-series database I came across called\nQuestDB. QuestDB is a fast open-source time-series database with Postgres and\nInflux line protocol compatibility. The ",(0,r.kt)("a",{parentName:"p",href:"https://"},"live demo")," on the website\nqueries the NYC taxi rides dataset with over 1.6 billion rows in milliseconds,\nso I was excited to give this database a try. To round out the end-to-end demo,\nI used Grafana to pull and visualize data from QuestDB."),(0,r.kt)(s.Z,{alt:"A diagram showing a Raspberry Pi sending data to QuestDB via Google Cloud Platform services",height:284,src:"/img/blog/2021-02-05-2/quest-diagram.png",title:"The stack used here with QuestDB replacing Dataflow and adding Grafana for visualization",width:650,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download/"},"NodeJS v14+")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.docker.com/products/docker-desktop"},"Docker")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://console.cloud.google.com/"},"A Google Cloud Account")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cloud.google.com/sdk/docs/install"},"gcloud sdk")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Optional "),(0,r.kt)("a",{parentName:"li",href:"https://www.arrow.com/en/research-and-events/articles/codelabs-using-iot-core-to-stream-heart-rate-data"},"Raspberry Pi kit"))),(0,r.kt)("p",null,"In this tutorial, we will use a Debian image and a Python script to send\nsimulated sensor data through IoT Core. If you wish to send real sensor data\nfrom a Raspberry Pi, the kit listed above contains everything you need along\nwith\n",(0,r.kt)("a",{parentName:"p",href:"https://codelabs.developers.google.com/codelabs/iotcore-heartrate#6"},"install instructions"),".\nIf you have a Raspberry Pi without the kit, you can directly swap it out for the\nVM instance below and run the Python script provided or add your own inputs."),(0,r.kt)("h2",{id:"google-cloud-setup"},"Google Cloud Setup"),(0,r.kt)("p",null,"In order to use Cloud IoT Core and Cloud Pub/Sub, you need to first create a\nGoogle Cloud Platform account and a new project (mine is called\n",(0,r.kt)("inlineCode",{parentName:"p"},"questdb-iot-demo")," ). Navigate to"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"APIs & Services -> Enable APIs and Services -> Search for APIs & Services")),(0,r.kt)("p",null,"and enable the following APIs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IoT Core")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Pub/Sub")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Compute Engine"))),(0,r.kt)(s.Z,{alt:"A screenshot of enabling APIs in Google Cloud Platform",height:142,src:"/img/blog/2021-02-05-2/enable-apis.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("h3",{id:"iot-core"},"IoT Core"),(0,r.kt)("p",null,"IoT Core is Google's fully-managed IoT service to help securely connect and\nmanage IoT devices. In this demo, we will create a registry called ",(0,r.kt)("inlineCode",{parentName:"p"},"heartrate"),"\nand send MQTT data. Click on ",(0,r.kt)("strong",{parentName:"p"},"Create Registry")," and set the Registry ID and\nRegion based on the geographic region closest to you (for me it was\n",(0,r.kt)("inlineCode",{parentName:"p"},"us-central1"),"):"),(0,r.kt)(s.Z,{alt:"A screenshot of creating an IoT Core Device Registry in Google Cloud Platform",height:310,src:"/img/blog/2021-02-05-2/create-registry.png",width:500,mdxType:"Screenshot"}),(0,r.kt)("p",null,'Next, we need to configure a Pub/Sub topic to publish device data to. Under\n"Select a Cloud Pub/Sub topic", click on ',(0,r.kt)("strong",{parentName:"p"},"Create a Topic")," and give it the\nTopic ID ",(0,r.kt)("inlineCode",{parentName:"p"},"heartratedata"),":"),(0,r.kt)(s.Z,{alt:"A screenshot of creating a Pub/Sub topic in Google Cloud Platform",height:267,src:"/img/blog/2021-02-05-2/create-topic.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Once the registry properties and Cloud Pub/Sub topics are configured, click on\n",(0,r.kt)("strong",{parentName:"p"},"Create")),(0,r.kt)("h3",{id:"compute-engine"},"Compute Engine"),(0,r.kt)("p",null,"Now it's time to add our simulated device. In order for our device to\ncommunicate with IoT Core, we need to add a public key. Head over to ",(0,r.kt)("strong",{parentName:"p"},"Compute\nEngine -> Create"),"."),(0,r.kt)(s.Z,{alt:"A screenshot of creating a VM instance in Google Cloud Platform",height:293,src:"/img/blog/2021-02-05-2/create-vm-instance.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("p",null,"The default options (",(0,r.kt)("inlineCode",{parentName:"p"},"e2-medium"),", Debian 10 image, ",(0,r.kt)("inlineCode",{parentName:"p"},"us-central1"),") will work for\nour simulator. Make sure to match the region with the IoT Core registry region\nif you chose something other than ",(0,r.kt)("inlineCode",{parentName:"p"},"us-central1"),". Once the VM is ready, click on\nthe ",(0,r.kt)("strong",{parentName:"p"},"SSH"),' button under "Connect" and install the project code with the\nfollowing commands:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Install git\nsudo apt-get update sudo apt-get install git\n# Clone project code\ngit clone https://github.com/googlecodelabs/iotcore-heartrate && cd iotcore-heartrate\n# Install all the core packages\nchmod +x initialsoftware.sh ./initialsoftware.sh\n# Generate the keys\nchmod +x generate_keys.sh ./generate_keys.sh\n# View and copy the keys\ncat ../.ssh/ec_public.pem\n")),(0,r.kt)("h3",{id:"pubsub"},"Pub/Sub"),(0,r.kt)("p",null,'Finally, we need to create a subscription to our Pub/Sub topic to pull messages\nand insert into QuestDB. Head over to "Pub/Sub" and click on our ',(0,r.kt)("inlineCode",{parentName:"p"},"heartratedata"),"\ntopic. Give the subscription the name ",(0,r.kt)("inlineCode",{parentName:"p"},"questdb")," and click ",(0,r.kt)("strong",{parentName:"p"},"Create"),"."),(0,r.kt)(s.Z,{alt:"A screenshot of creating a Pub/Sub subscription in Google Cloud Platform",height:82,src:"/img/blog/2021-02-05-2/heartrate-topic.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"iot-device-setup"},"IoT Device Setup"),(0,r.kt)("p",null,"Once you have the ",(0,r.kt)("inlineCode",{parentName:"p"},"ec_public.pem"),' key, head back to the IoT Core Registry. Under\n"Devices", click on ',(0,r.kt)("strong",{parentName:"p"},"Create a Device"),". For Device ID, enter\n",(0,r.kt)("inlineCode",{parentName:"p"},"raspberryHeartRate")," and expand the ",(0,r.kt)("strong",{parentName:"p"},"Communication, Cloud Logging,\nAuthentication")," dropdown:"),(0,r.kt)(s.Z,{alt:"A screenshot of adding a device to IoT Core in Google Cloud Platform",height:330,src:"/img/blog/2021-02-05-2/device-metadata.png",width:500,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Under Authentication, change the ",(0,r.kt)("strong",{parentName:"p"},"Public key format")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"ES256"),', paste in the\nkey from our VM or Raspberry Pi and click "Create":'),(0,r.kt)(s.Z,{alt:"A screenshot of adding a public key to IoT Core in Google Cloud Platform",height:362,src:"/img/blog/2021-02-05-2/authentication.png",title:"Adding a public key to IoT Core to secure device-to-cloud communication",width:500,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"questdb-setup"},"QuestDB Setup"),(0,r.kt)("p",null,"At this point, we have everything on Google Cloud to send data to our Pub/Sub\ntopic. Now we need to write some code to take those messages and insert them\ninto QuestDB. Let's start by starting up QuestDB via Docker."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run --name questdb-heartrate -p 9000:9000 -p 8812:8812 questdb/questdb\n")),(0,r.kt)("p",null,"The above command pulls the latest QuestDB image (v5.0.6) and maps port ",(0,r.kt)("inlineCode",{parentName:"p"},"9000"),"\nfor the console UI and port ",(0,r.kt)("inlineCode",{parentName:"p"},"8812")," for Postgres connections. By giving the\ncontainer the name ",(0,r.kt)("inlineCode",{parentName:"p"},"questdb-heartrate")," we can refer to the container later on\nafter it has been stopped and the heart rate data is persisted:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# bring the container up\ndocker start questdb-heartrate\n# shut the container down\ndocker stop questdb-heartrate\n")),(0,r.kt)("p",null,"Open up the QuestDB console at (",(0,r.kt)("a",{parentName:"p",href:"http://127.0.0.1:9000/"},"http://127.0.0.1:9000/"),") and create our\n",(0,r.kt)("inlineCode",{parentName:"p"},"heart_rate")," table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE heart_rate(sensorID STRING, uniqueID STRING, timecollected\n  TIMESTAMP, heartrate DOUBLE) timestamp(timecollected);\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," If you don't see the ",(0,r.kt)("inlineCode",{parentName:"p"},"heart_rate")," table populated on the tables and\nschema explorer panel, click on the refresh icon above the tables.)"),(0,r.kt)("h2",{id:"pubsub-to-questdb"},"Pub/Sub to QuestDB"),(0,r.kt)("p",null,"Since there's no native integration for Pub/Sub, we will need to write a simple\nprogram to listen to new Pub/Sub messages and insert the data into QuestDB. I'm\nusing NodeJS v14.15.4, but you can use similar client libraries for Pub/Sub and\nPostgres to achieve the same."),(0,r.kt)("p",null,"First, configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"gcloud")," SDK to authenticate with your GCP project without\nhaving to download a service account (see\n",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/dev-genius/simple-gcp-authentication-with-service-accounts-6b877c2e2649"},"Simple GCP Authentication with Service Accounts"),"\nfor more details)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Set default profile\ngcloud auth application-default login\n")),(0,r.kt)("p",null,"Next, create a new NodeJS workspace and install\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@google-cloud/pubsub"},"@google-cloud/pubsub")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pg"},"pg")," packages. You can use the code below to\nlisten to Pub/Sub and stream to QuestDB:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Modified from https://github.com/googleapis/nodejs-pubsub/blob/master/samples/listenWithCustomAttributes.js\nconst { PubSub } = require("@google-cloud/pubsub")\nconst { Client } = require("pg")\n\n// Default connection settings https://questdb.io/docs/reference/configuration/#postgres-wire-protocol\nconst client = new Client({\n  user: "admin",\n  host: "localhost",\n  database: "qdb",\n  password: "quest",\n  port: "8812",\n})\n\nasync function main(subscriptionName = "questdb", timeout = 60) {\n  const pubSubClient = new PubSub()\n  await client.connect()\n\n  async function listenForMessages() {\n    const subscription = pubSubClient.subscription(subscriptionName)\n    // Create an event handler to handle messages\n    const messageHandler = async (message) => {\n      // Parse Pub/Sub message into JSON\n      const data = Buffer.from(message.data, "base64").toString("utf-8")\n      const parsedMessage = JSON.parse(data)\n      // Get each field and transform time into ts format\n      const { sensorID, uniqueID, timecollected, heartrate } = parsedMessage\n      // Using timestamp in microseconds: https://questdb.io/docs/reference/sql/datatypes/\n      const ts = Date.parse(timecollected) * 1000\n\n      const text =\n        "INSERT INTO heart_rate(sensorID, uniqueID, timecollected, heartrate) VALUES($1, $2, $3, $4)"\n      const values = [sensorID, uniqueID, ts, heartrate]\n\n      const res = await client.query(text, values)\n      message.ack()\n    }\n\n    // Listen for new messages until timeout is hit\n    subscription.on("message", messageHandler)\n    setTimeout(async () => {\n      subscription.removeListener("message", messageHandler)\n      console.log("done")\n      await client.end()\n    }, timeout * 1000)\n  }\n\n  listenForMessages()\n}\n\nprocess.on("unhandledRejection", (err) => {\n  console.error(err.message)\n  process.exitCode = 1\n})\n\nmain()\n')),(0,r.kt)("h2",{id:"sending-data"},"Sending Data"),(0,r.kt)("p",null,"Finally, we are ready to send the simulated data. Switch back to the Compute\nEngine and ssh into the VM again. Issue the command below to send the data to\nour IoT Core device:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"python3 heartrateSimulator.py --project_id=questdb-iot-demo \\\n  --registry_id=heartrate --device_id=raspberryHeartRate \\\n  --private_key_file=../.ssh/ec_private.pem\n")),(0,r.kt)("p",null,"If successful, you should see some logs like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'... Publishing message #544: \'{"sensorID": "heartrate.raspZero", "heartrate":\n72.56881801680139, "uniqueID":\n"c1ca9656-671f-4fa7-8c03-12fdfb4f422f-heartrate.raspZero", "timecollected":\n"2018-07-07 20:54:50"}\'Publishing message #545: \'{"sensorID":\n"heartrate.raspZero", "heartrate": 72.8324264524384, "uniqueID":\n"8d6337b7-204f-4209-88c0-46a79d1911bb-heartrate.raspZero", "timecollected":\n"2018-07-07 20:54:59"}\' Finished.\n')),(0,r.kt)("p",null,"Now run our NodeJS code and we should see data populated in QuestDB:"),(0,r.kt)(s.Z,{alt:"A screenshot of the QuestDB Web Console returning query results on sensor data",height:353,src:"/img/blog/2021-02-05-2/select-from-heartrate.png",title:"Querying heart rate data in QuestDB",width:650,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"visualizing-data-with-grafana"},"Visualizing Data with Grafana"),(0,r.kt)("p",null,"Although QuestDB console provides some default visualizations out of the box, to\nsimulate a scenario of combining all the metrics, we'll set up a Postgres data\nsource and visualize our heart rate data. To start Grafana from Docker, run the\nfollowing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -p 3000:3000 grafana/grafana\n")),(0,r.kt)("p",null,"Navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/login"},"http://localhost:3000/login")," using the\ndefault credentials (",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),":",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),"). Under ",(0,r.kt)("strong",{parentName:"p"},"Configuration -> Data Sources"),",\nsearch for Postgres:"),(0,r.kt)(s.Z,{alt:"A screenshot of adding QuestDB as a data source in Grafana",height:377,src:"/img/blog/2021-02-05-2/add-postgres.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Provide the following login credentials (password: ",(0,r.kt)("inlineCode",{parentName:"p"},"quest"),"), ensure SSL is\ndisabled and click ",(0,r.kt)("strong",{parentName:"p"},"Save and Test"),":"),(0,r.kt)(s.Z,{alt:"A screenshot of authenticating QuestDB within Grafana using Postgres",height:263,src:"/img/blog/2021-02-05-2/postgres-credentials.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Finally, let's create a dashboard. Add a panel to the Grafana dashboard and add\nthe following SQL query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},'SELECT timecollected AS "time",\n       heartrate\nFROM heart_rate\nORDER BY time;\n')),(0,r.kt)("p",null,"If all is working as expected, we can now see the sample heart rate data:"),(0,r.kt)(s.Z,{alt:"A screenshot of a chart in Grafana showing sensor data plotted over time",height:261,src:"/img/blog/2021-02-05-2/chart-heartrate.png",title:"Sensor data visualized in Grafana",width:650,mdxType:"Screenshot"}),(0,r.kt)("p",null,"If we run the same query on QuestDB, we have the option to visualize the same\ndata points there for comparison using the ",(0,r.kt)("strong",{parentName:"p"},"Chart")," feature:"),(0,r.kt)(s.Z,{alt:"A screenshot of a chart in QuestDB showing sensor data plotted over time",height:220,src:"/img/blog/2021-02-05-2/heart-rate-graph.png",title:"Sensor data visualized in QuestDB",width:650,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"At this point, we have an end-to-end system of a device securely sending data\nvia IoT Core and streaming data into QuestDB. We can extend this example to\nmultiple devices by adding them under IoT Core and scaling our server to using\npooled connections to more efficiently add data to QuestDB. At scale, we can\nalso look at aggregates instead of raw data points, (e.g.\n",(0,r.kt)("inlineCode",{parentName:"p"},"avg(heartrate) as avg_hr from heart_rate SAMPLE BY 1d"),")"),(0,r.kt)("p",null,"If you like this content, we'd love to know your thoughts! Feel free to share\nyour feedback or just come and say hello in the\n",(0,r.kt)("a",{parentName:"p",href:"https://"},"QuestDB Community Slack"),"."))}h.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(o&&(o+=" "),o+=a);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,a=0,o="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(o&&(o+=" "),o+=t);return o}a.d(t,{Z:function(){return o}})}}]);