"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[4678],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return p}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(a),p=r,h=d["".concat(l,".").concat(p)]||d[p]||c[p]||s;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<s;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},67677:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u},default:function(){return d}});var n=a(83117),r=a(80102),s=(a(67294),a(3905)),i=a(46092),o=["components"],l={title:"Comparing TimescaleDB and QuestDB timeseries databases",author:"Kovid Rathee",author_title:"Guest",author_url:"https://gist.github.com/kovid-r",author_image_url:"https://avatars.githubusercontent.com/kovid-r",description:"How to use the Time Series Benchmark Suite to compare database read and write performance of QuestDB versus TimescaleDB.",keywords:["timeseries","timescaledb","benchmark","database"],tags:["tutorial","benchmark","timescale"],image:"/img/blog/shared/og-timescaledb.png"},m={permalink:"/blog/2021/08/18/questdb-versus-timescaledb",source:"@site/blog/2021-08-18-questdb-versus-timescaledb.mdx",title:"Comparing TimescaleDB and QuestDB timeseries databases",description:"How to use the Time Series Benchmark Suite to compare database read and write performance of QuestDB versus TimescaleDB.",date:"2021-08-18T00:00:00.000Z",formattedDate:"August 18, 2021",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"benchmark",permalink:"/blog/tags/benchmark"},{label:"timescale",permalink:"/blog/tags/timescale"}],readingTime:8.795,truncated:!1,prevItem:{title:"Launch a QuestDB droplet in 1-click via the DigitalOcean marketplace",permalink:"/blog/2021/08/24/digitalocean-droplet"},nextItem:{title:"QuestDB 6.0.4 July release, Prometheus metrics support",permalink:"/blog/2021/07/16/release-6-0-4-prometheus-metrics"}},u=[{value:"What are timeseries databases used for?",id:"what-are-timeseries-databases-used-for",children:[]},{value:"What is the Time Series Benchmark Suite (TSBS)?",id:"what-is-the-time-series-benchmark-suite-tsbs",children:[]},{value:"Tutorial prerequisites",id:"tutorial-prerequisites",children:[]},{value:"Using the TSBS to test time series database performance",id:"using-the-tsbs-to-test-time-series-database-performance",children:[{value:"Generate test data for benchmarking",id:"generate-test-data-for-benchmarking",children:[]},{value:"Load generated data to test write performance",id:"load-generated-data-to-test-write-performance",children:[]},{value:"Generate queries for reads",id:"generate-queries-for-reads",children:[]},{value:"Execute queries to benchmark read performance",id:"execute-queries-to-benchmark-read-performance",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],c={toc:u};function d(e){var t=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(i.Z,{alt:"TimescaleDB logo, QuestDB logo, InfluxDB logo",height:467,src:"/img/blog/2021-08-18/banner.png",width:650,mdxType:"Banner"}),(0,s.kt)("p",null,"This post comes from\n",(0,s.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/questdb-vs-timescaledb-38160a361c0e?sk=42d1c037a6dfc3786e11eb9d9f5af2ad"},"Kovid Rathee"),",\nwho has put together a tutorial to show how to measure the ingestion rates and\nquery performance of TimescaleDB and QuestDB databases using the time series\nbenchmark suite. Thanks for the submission, Kovid!"),(0,s.kt)("h2",{id:"what-are-timeseries-databases-used-for"},"What are timeseries databases used for?"),(0,s.kt)("p",null,"In a connected world, billions of users are generating more data than ever. From\nhuman communication to the digital footprint we create, IoT sensors have become\nubiquitous, and financial transactions are completely digitized. We have an\nexplosion of the volume of time-centric data, and we are struggling to keep up\nwith it all. Timeseries databases are on the rise and OSS projects like QuestDB,\nInfluxDB, TimescaleDB, and cloud-based solutions like Amazon Timestream, etc.,\nare in higher demand than ever. Timeseries databases have officially come of\nage."),(0,s.kt)("p",null,"All these products are competing for more space in the time-series domain, and\nin doing that, they're making each other better. This article will look at two\nmajor timeseries databases and compare them using an open-source benchmarking\ntool called TSBS \u2014 Time Series Benchmarking Suite. This benchmarking suite is\nbased on the testing scripts originally developed at InfluxDB, later enhanced by\nother major timeseries databases, and currently maintained by TimescaleDB."),(0,s.kt)("h2",{id:"what-is-the-time-series-benchmark-suite-tsbs"},"What is the Time Series Benchmark Suite (TSBS)?"),(0,s.kt)("p",null,"For traditional databases like MySQL and PostgreSQL, many popular options like\n",(0,s.kt)("a",{parentName:"p",href:"https://hammerdb.com/"},"HammerDB")," and\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/akopytov/sysbench"},"sysbench")," are standard tools to measure\ndatabase read and write performance. Similar tools exist for different types of\ndatabases. Performance testing makes sense when the benchmarking tool simulates\nreal-life scenarios by creating realistic bursts and reading streams."),(0,s.kt)("p",null,"The access and usage pattern for timeseries databases is very different from a\ntraditional database \u2014 that is why we need a tool like TSBS. TSBS currently\nsupports two kinds of loads:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"IoT")," emulates the IoT data generated from the sensors of a trucking\ncompany. Imagine tracking a trucking fleet with real-time diagnostic data from\nevery truck in your fleet.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"DevOps")," simulates data usage generated by a server that tracks memory\nusage, CPU usage, disk usage, and so on. Imagine looking at the Grafana\ndashboard with these metrics and getting alerts on breaches."))),(0,s.kt)("h2",{id:"tutorial-prerequisites"},"Tutorial prerequisites"),(0,s.kt)("p",null,"For this tutorial, you'll need to have the following tools installed and\navailable:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")," should be available on the\nmachine to run ",(0,s.kt)("a",{parentName:"li",href:"/docs/get-started/docker"},"QuestDB")," and\n",(0,s.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/timescale/timescaledb/"},"TimescaleDB")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://golang.org/doc/install"},"Go")," must be installed to run the benchmark\ntool")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," This benchmark run was completed on a 16-core Intel(R) Xeon(R)\nPlatinum 8175M CPU @ 2.50GHz with 128 GB RAM on AWS EC2."),(0,s.kt)("h2",{id:"using-the-tsbs-to-test-time-series-database-performance"},"Using the TSBS to test time series database performance"),(0,s.kt)("p",null,"To get started with the TSBS suite, clone the repository and prepare the tool:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# TSBS - create a temporary directory for the Go binaries\nmkdir -p ~/tmp/go/src/github.com/timescale/\ncd ~/tmp/go/src/github.com/timescale/\n\n# Clone the TSBS repository, build test and install Go binaries:\ngit clone git@github.com:questdb/tsbs.git\ncd ~/tmp/go/src/github.com/timescale/tsbs/ && git checkout questdb-tsbs-load-new\nGOPATH=~/tmp/go go build -v ./...\nGOPATH=~/tmp/go go test -v github.com/timescale/tsbs/cmd/tsbs_load_questdb\nGOPATH=~/tmp/go go install -v ./...\n")),(0,s.kt)("p",null,"Once all the suite is installed, QuestDB and TimescaleDB can be started:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 9000:9000 -p 9009:9009 questdb/questdb:6.0.4\n\ndocker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password \\\n  timescale/timescaledb:latest-pg12\n")),(0,s.kt)("p",null,"We will test the performance of these two databases in four phases:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Generate DevOps data")," for one day, where nine different metrics are\ncollected every 10 seconds for 200 devices. The data will be generated\nseparately for QuestDB and TimescaleDB based on their respective formats. Use\nthe ",(0,s.kt)("inlineCode",{parentName:"li"},"tsbs_generate_data")," utility for this."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Load the generated data")," using the ",(0,s.kt)("inlineCode",{parentName:"li"},"tsbs_load_questdb")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"tsbs_load"),"\nutilities to load data into QuestDB and TimescaleDB, respectively. This\nallows us to test the ingestion and write speeds of each system."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Generate queries")," to run on the loaded data for QuestDB and TimescaleDB.\nUse the ",(0,s.kt)("inlineCode",{parentName:"li"},"tsbs_generate_queries")," utility for this."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Execute generated queries")," on QuestDB and TimescaleDB using\n",(0,s.kt)("inlineCode",{parentName:"li"},"tsbs_run_queries_questdb")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"tsbs_run_queries_timescaledb")," respectively.")),(0,s.kt)("p",null,"Let's go through the scripts for each of these steps, one by one."),(0,s.kt)("h3",{id:"generate-test-data-for-benchmarking"},"Generate test data for benchmarking"),(0,s.kt)("p",null,"For the scope of this tutorial, we'll limit the scale of the benchmark run to\n200 devices. As mentioned above, the data will be generated for one day,\ntracking nine metrics for every one of the hundred devices every 10 seconds.\nUsing the tsbs_generate_data command, you can generate test data for any of the\nsupported databases and use cases."),(0,s.kt)("p",null,"The data generated can occupy a lot of space. You can scale up or down based on\nyour benchmarking requirements and availability of disk space."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Navigate to the script library\ncd ~/tmp/go/bin/\n\n# Run the following command to generate data for QuestDB\n./tsbs_generate_data \\\n--use-case="devops" --seed=123 --scale=200 \\\n--timestamp-start="2016-01-01T00:00:00Z" \\\n--timestamp-end="2016-01-02T00:00:00Z" \\\n--log-interval="10s" --format="influx" > /tmp/questdb-data\n\n# Run the following command to generate data for TimescaleDB\n./tsbs_generate_data \\\n   --use-case="devops" --seed=123 --scale=200 \\\n   --timestamp-start="2016-01-01T00:00:00Z" \\\n   --timestamp-end="2016-01-02T00:00:00Z" \\\n   --log-interval="10s" --format="timescaledb" > /tmp/timescaledb-data\n')),(0,s.kt)("p",null,"The files generated for the data will be of different sizes because of the\ndifferent formats used by TimescaleDB and QuestDB. QuestDB uses Influx Line\nProtocol format which is much lighter than any other format out there."),(0,s.kt)("h3",{id:"load-generated-data-to-test-write-performance"},"Load generated data to test write performance"),(0,s.kt)("p",null,"Loading the data is even simpler than generating it. For TimescaleDB, you can\nuse the common utility ",(0,s.kt)("inlineCode",{parentName:"p"},"tsbs_load"),". For QuestDB, you can use the\n",(0,s.kt)("inlineCode",{parentName:"p"},"tsbs_load_questdb")," utility as it supports some QuestDB-specific flags like\n",(0,s.kt)("inlineCode",{parentName:"p"},"--ilp-bind-to")," for InfluxDB Line Protocol binding port and ",(0,s.kt)("inlineCode",{parentName:"p"},"--url")," signifying\nQuestDB's REST endpoint. You can use the following commands to load the data\ninto TimescaleDB and QuestDB, respectively:"),(0,s.kt)("p",null,"Please follow the instructions for TimescaleDB's config.yaml file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Go to the following directory\ncd ~/tmp/go/bin\n\n# Create the a config file\n./tsbs_load config --target=timescaledb --data-source=FILE\n\n# Edit the config.yaml file\n# 1. Change the source file name to /tmp/timescaledb-data\n# 2. Change the password for TimescaleDB to password\n# 3. Change the number of workers to 8\n./tsbs_load load timescaledb --config=./config.yaml\n\n# Load data into QuestDB\n./tsbs_load_questdb --file /tmp/questdb-data --workers 8\n")),(0,s.kt)("p",null,"To get a better idea of load performance, you can try changing the ",(0,s.kt)("inlineCode",{parentName:"p"},"--workers"),"\nparameter. Please ensure that the benchmarking parameters and conditions for\nboth databases are the same so that you get a fair comparison."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"TimescaleDB Load/Write Performance:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./tsbs_load load timescaledb --config=./config.yaml\n#...\nSummary:\nloaded 174528000 metrics in 59.376sec with 8 workers (mean rate 2939386.10 metrics/sec)\nloaded 15552000 rows in 59.376sec with 8 workers (mean rate 261925.49 rows/sec)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"QuestDB Load/Write Performance:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./tsbs_load_questdb --file /tmp/questdb-data --workers 8\n#...\nSummary:\nloaded 174528000 metrics in 18.223sec with 8 workers (mean rate 9577373.06 metrics/sec)\nloaded 15552000 rows in 18.223sec with 8 workers (mean rate 853429.28 rows/sec)\n")),(0,s.kt)("p",null,"The write performance of QuestDB with eight workers, in this case, is ~3.2x\nfaster than TimescaleDB. For the complete output of this benchmark run, see\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/kovid-r/tsbs-questdb-timescaledb#readme"},"the accompanying GitHub repository"),"."),(0,s.kt)("h3",{id:"generate-queries-for-reads"},"Generate queries for reads"),(0,s.kt)("p",null,"The data set TSBS has generated for both QuestDB and TimescaleDB contains\nmetrics for 200 hosts. To query all the readings where one metric is above a\nthreshold across all hosts, we will use the query type ",(0,s.kt)("inlineCode",{parentName:"p"},"high-cpu-all"),". To\ngenerate 1000 queries with different time ranges during that one day, you need\nto run the following commands:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Go to the following directory\ncd ~/tmp/go/bin\n\n# Generate QuestDB queries for query-type high-cpu-all\n./tsbs_generate_queries --use-case="devops" --seed=123 --scale=200 \\\n    --timestamp-start="2016-01-01T00:00:00Z" \\\n    --timestamp-end="2016-01-02T00:00:01Z" \\\n    --queries=1000 --query-type="high-cpu-all" --format="questdb" \\\n    > /tmp/queries_questdb-high-cpu-all\n\n# Generate TimescaleDB queries for query-type high-cpu-all\n./tsbs_generate_queries --use-case="devops" --seed=123 --scale=200 \\\n    --timestamp-start="2016-01-01T00:00:00Z" \\\n    --timestamp-end="2016-01-02T00:00:01Z" \\\n    --queries=1000 --query-type="high-cpu-all" --format="timescaledb" \\\n    > /tmp/timescaledb-queries-high-cpu-all\n\n')),(0,s.kt)("p",null,"In this tutorial, we're running just one type of read query. You can choose from\nthe\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/questdb/tsbs#appendix-i-query-types-"},"different types of queries"),"\nyou can run to test the read performance:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Example queries"',title:'"Example','queries"':!0},"# TimescaleDB Query\nSELECT * FROM cpu WHERE usage_user > 90.0\n   AND time >= '2016-01-01 07:47:52.646325 +0000'\n   AND time < '2016-01-01 19:47:52.646325 +0000';\n\n# QuestDB Query\nSELECT * FROM cpu WHERE usage_user > 90.0\n   AND timestamp >= '2016-01-01T07:47:52Z'\n   AND timestamp < '2016-01-01T19:47:52Z';\n")),(0,s.kt)("h3",{id:"execute-queries-to-benchmark-read-performance"},"Execute queries to benchmark read performance"),(0,s.kt)("p",null,"Now that we've generated the data, loaded it into QuestDB and TimescaleDB, and\nalso generated the benchmarking queries that we want to run, we can finally\nperform the read performance benchmark using the following commands:"),(0,s.kt)("p",null,"Ensure that the queries have been generated properly before running the\ncommands. To do that, you can run ",(0,s.kt)("inlineCode",{parentName:"p"},"less /tmp/timescaledb-queries-high-cpu-all"),"\nor ",(0,s.kt)("inlineCode",{parentName:"p"},"less /tmp/queries_questdb-high-cpu-all"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'# Go to the following directory\ncd ~/tmp/go/bin/\n\n# Run the read benchmarking queries for TimescaleDB\ncat /tmp/timescaledb-queries-high-cpu-all | ./tsbs_run_queries_timescaledb --workers=8 \\\n  --postgres="host=localhost user=postgres password=password sslmode=disable" --print-interval 500\n\n# Run the read benchmarking queries for QuestDB\n./tsbs_run_queries_questdb --file /tmp/queries_questdb-high-cpu-all --workers=8 --print-interval 500\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"TimescaleDB read performance:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"Run complete after 1000 queries with 8 workers (Overall query rate 25.78 queries/sec):\nTimescaleDB CPU over threshold, all hosts:\nmin: 222.49ms, med: 274.94ms, mean: 308.60ms, max: 580.13ms, stddev: 73.70ms, sum: 308.6sec, count: 1000\nall queries :\nmin: 222.49ms, med: 274.94ms, mean: 308.60ms, max: 580.13ms, stddev: 73.70ms, sum: 308.6sec, count: 1000\nwall clock time: 38.827242sec\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"QuestDB read performance:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"Run complete after 1000 queries with 8 workers (Overall query rate 70.18 queries/sec):\nQuestDB CPU over threshold, all hosts:\nmin: 92.71ms, med: 109.10ms, mean: 113.32ms, max: 382.57ms, stddev: 19.34ms, sum: 113.3sec, count: 1000\nall queries :\nmin: 92.71ms, med: 109.10ms, mean: 113.32ms, max: 382.57ms, stddev: 19.34ms, sum: 113.3sec, count: 1000\nwall clock time: 14.275811sec\n")),(0,s.kt)("p",null,"QuestDB executed the queries ~2.7x faster than TimescaleDB. QuestDB vs.\nTimescaleDB"),(0,s.kt)("p",null,"To summarize the read and write benchmarks results, we can say that QuestDB is\nsignificantly faster in writes than TimescaleDB and considerably faster in\nreads. When we talk about read performance, concluding with just one type of\nquery is probably not fair, which is why you can try running the TSBS suite on\nyour own for different types of queries for both these databases. Here's the\nsummary:"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"QuestDB performed ~320 % faster than TimescaleDB for ",(0,s.kt)("strong",{parentName:"p"},"write/load")," workloads."),(0,s.kt)("p",{parentName:"blockquote"},"QuestDB performed ~270 % faster than TimescaleDB for ",(0,s.kt)("strong",{parentName:"p"},"read/analytical"),"\nworkloads.")),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"TSBS is the de facto standard for benchmarking timeseries databases. In this\ntutorial, you learned how to use TSBS to compare two timeseries databases by\neasily generating test data and emulating realistic read and write loads. As\nmentioned before, TSBS currently supports test data generation for DevOps and\nIoT (vehicle diagnostics). You can create your test data generation scripts to\ncreate more use cases for, say, real-time weather tracking, traffic signals,\nfinancial markets, and so on."),(0,s.kt)("p",null,"If you like this content, we'd love to know your thoughts! Feel free to share\nyour feedback or come and say hello in the\n",(0,s.kt)("a",{parentName:"p",href:"https://"},"QuestDB Community Slack"),"."))}d.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);