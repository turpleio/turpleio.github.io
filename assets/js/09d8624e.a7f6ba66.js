"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[3848],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},37679:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var a=n(83117),o=n(80102),r=(n(67294),n(3905)),i=["components"],s={title:"Why performance matters in time-series data",author:"Nicolas Hourcard",author_title:"Co-founder & CEO, QuestDB",author_url:"https://github.com/tris0laris",author_image_url:"https://avatars.githubusercontent.com/tris0laris",description:"Thoughts on why speed and performance are crucial to time series database ingestion and analytics.",tags:["company","startup","performance"],image:"/img/blog/placeholder.png"},l={permalink:"/blog/2020/09/24/why-performance-matters",source:"@site/blog/2020-09-24-why-performance-matters.md",title:"Why performance matters in time-series data",description:"Thoughts on why speed and performance are crucial to time series database ingestion and analytics.",date:"2020-09-24T00:00:00.000Z",formattedDate:"September 24, 2020",tags:[{label:"company",permalink:"/blog/tags/company"},{label:"startup",permalink:"/blog/tags/startup"},{label:"performance",permalink:"/blog/tags/performance"}],readingTime:4.34,truncated:!0,prevItem:{title:"NYC taxi meter and options pricing",permalink:"/blog/2020/10/16/taxi-drivers-are-options-traders"},nextItem:{title:"A Lightweight, blazing fast stack for your IoT application",permalink:"/blog/2020/08/25/fast-iot-stack-with-questdb-mqtt"}},c=[{value:"Time series data is explosive",id:"time-series-data-is-explosive",children:[]},{value:"Is the end of Moore\u2019s law in sight?",id:"is-the-end-of-moores-law-in-sight",children:[]},{value:"It reduces your cloud bills",id:"it-reduces-your-cloud-bills",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Good data from the past helps us make better decisions in the present. Most of\ntoday's data were created within the past ten years, and human data output will\nonly grow exponentially from here on. This sudden pervasiveness of data means\nthat we need new ways to store and process information focusing on efficiency\nand sustainability. This article describes why speed and performance in a\ntime-series database is the key to staying afloat in a sea of data."),(0,r.kt)("p",null,"The\n",(0,r.kt)("a",{parentName:"p",href:"https://www.seagate.com/files/www-content/our-story/trends/files/idc-seagate-dataage-whitepaper.pdf"},"International Data Corporation predicts"),"\nthat the total collected sum of human data will reach 175 zettabytes by 2025.\nOne zettabyte is a billion terabytes of course, or a trillion gigabytes,\ndepending on which mind-bending measurement you prefer."),(0,r.kt)("p",null,"While we have no issue storing and collecting this data, the real trick lies in\nhow we process it. Forrester data says as much as\n",(0,r.kt)("a",{parentName:"p",href:"https://go.forrester.com/blogs/hadoop-is-datas-darling-for-a-reason/"},"73% of the data"),"\nwithin an enterprise goes unused for analytics, a huge missed opportunity to\ncapture and process data effectively. That\u2019s why a number of teams are working\non competitive products to make data more useful."),(0,r.kt)("p",null,"QuestDB is concerned with capturing time-series data in particular, which lets\nus represent and understand change over time. Time-series data might pertain to\nchanges to the weather, changes in a machine\u2019s performance, or even changes in\nyour own weight. But quite unlike weighing yourself once a day and storing those\nstandalone states in a database, time-series data calls for capturing every\nsingle tiny fluctuation in your weight, up or down, whenever you sweat, get\nsick, eat a meal, or use the bathroom."),(0,r.kt)("p",null,"Processing this category of data calls for a high-performance system that can\nquickly manipulate lots of individual data points to turn that data into a\ndecision-making aid. Performance is uniquely important to time-series data for\nthe following reasons."),(0,r.kt)("h2",{id:"time-series-data-is-explosive"},"Time series data is explosive"),(0,r.kt)("p",null,"It\u2019s at the heart of connected devices, the Internet of Things, autonomous cars,\nfinancial services, and even server farm monitoring. Rather than capture a\nsingle data point, time-series data calls for capturing tens of thousands of\ndata points. But it doesn\u2019t even stop there \u2014 not only does time-series data\nkeep growing and never stopping, but it can grow in bursts, generating lots of\nreadings in a short amount of time."),(0,r.kt)("p",null,"A weather station capturing time-series data about wind speed might record zero\nfor a long time. But as soon as it gets windy, you\u2019ll get thousands of\nmeasurements per second because the measurement is changing a lot. It takes a\nhigh-performing system to capture and record it effectively."),(0,r.kt)("p",null,"Time-series data is everywhere a modern technologist looks, and the tools for\nmanaging it effectively are a little specialized. Otherwise, the exploding need\nfor processing power and the simultaneously reduced availability of it becomes a\nsupply and demand problem."),(0,r.kt)("h2",{id:"is-the-end-of-moores-law-in-sight"},"Is the end of Moore\u2019s law in sight?"),(0,r.kt)("p",null,"Improvements in processor power are going to slow down while data continues to\npropagate exponentially. We\u2019re facing a big problem in our quest to process and\nanalyze all of this data, and throwing more server racks of improved CPUs at the\nproblem will no longer cut it. The lack of performance improvements on the\nhardware side coupled with exploding costs for companies doesn\u2019t help anything\neither. Hardware is tapped out."),(0,r.kt)("p",null,"That\u2019s why it\u2019s time to focus on the other side of this equation: the software.\nThe solution is to write leaner code that\u2019s more hardware-efficient and extracts\nperformance gains from having the software tuned so effectively. This kind of\nsoftware is less reliant on the hardware side for its capabilities, opens up new\npossibilities for harnessing data, and operates in real time without any lag."),(0,r.kt)("p",null,"Moore\u2019s law is approaching its physical limit because it\u2019s only possible to fit\nso many transistors into an integrated circuit \u2014 most of the performance to data\nhas come from hardware, indirectly giving developers permission to write lazy,\nbloated code. But there is much less room for optimizing hardware these days.\nChip manufacturers are approaching a time when they\u2019d need a new physics to\nimprove on today\u2019s modern processors. That means it\u2019s time to focus on improving\nthe software."),(0,r.kt)("h2",{id:"it-reduces-your-cloud-bills"},"It reduces your cloud bills"),(0,r.kt)("p",null,"However much data you store and process today, you\u2019re only going to have more\ndata tomorrow. If you want to process increased volumes of information in the\nsame amount of time, then you need more computing resources, going from one to\ntwo or more servers as your needs increase. But not only will you pay more to\nyour cloud service for this, you\u2019ll also pay your database provider for\nadditional software licenses."),(0,r.kt)("p",null,"The question becomes: how much value do you actually get out of each machine? If\none can handle a billion data points, then you know you\u2019ll need a new machine\nfor each additional billion. But if you can get 100 billion data points for each\nnew machine by using higher-performance software, then you have a really reduced\ncost for each machine. You furthermore end up needing fewer of them."),(0,r.kt)("p",null,"Performance in time-series data is about helping you reach the best decision as\neffectively as possible. That\u2019s why QuestDB is glad to be building\nhigh-performance time-series data solutions that are significantly faster than\nthe competition."))}d.isMDXComponent=!0}}]);