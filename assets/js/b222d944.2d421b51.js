"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[6395],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return N}});var a=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var i=a.createContext({}),d=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):u(u({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(i.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},o=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,i=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),o=d(n),N=l,g=o["".concat(i,".").concat(N)]||o[N]||k[N]||r;return n?a.createElement(g,u(u({ref:e},m),{},{components:n})):a.createElement(g,u({ref:e},m))}));function N(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,u=new Array(r);u[0]=o;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=t,p.mdxType="string"==typeof t?t:l,u[1]=p;for(var d=2;d<r;d++)u[d]=n[d];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}o.displayName="MDXCreateElement"},9067:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},metadata:function(){return i},toc:function(){return d},default:function(){return k}});var a=n(3117),l=n(102),r=(n(7294),n(3905)),u=["components"],p={title:"Numeric functions",sidebar_label:"Numeric",description:"Numeric function reference documentation."},i={unversionedId:"reference/function/numeric",id:"reference/function/numeric",isDocsHomePage:!1,title:"Numeric functions",description:"Numeric function reference documentation.",source:"@site/docs/reference/function/numeric.md",sourceDirName:"reference/function",slug:"/reference/function/numeric",permalink:"/docs/reference/function/numeric",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/function/numeric.md",version:"current",sidebar_label:"Numeric",frontMatter:{title:"Numeric functions",sidebar_label:"Numeric",description:"Numeric function reference documentation."},sidebar:"docs",previous:{title:"Meta functions",permalink:"/docs/reference/function/meta"},next:{title:"Random value generator",permalink:"/docs/reference/function/random-value-generator"}},d=[{value:"abs",id:"abs",children:[]},{value:"log",id:"log",children:[]},{value:"power",id:"power",children:[]},{value:"round",id:"round",children:[]},{value:"round_down",id:"round_down",children:[]},{value:"round_half_even",id:"round_half_even",children:[]},{value:"round_up",id:"round_up",children:[]},{value:"sqrt",id:"sqrt",children:[]}],m={toc:d};function k(t){var e=t.components,n=(0,l.Z)(t,u);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page describes the available functions to assist with performing numeric\ncalculations."),(0,r.kt)("h2",{id:"abs"},"abs"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"abs(value)")," return the absolute value. The behavior of ",(0,r.kt)("inlineCode",{parentName:"p"},"abs")," is as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the input ",(0,r.kt)("inlineCode",{parentName:"li"},"value")," is positive, ",(0,r.kt)("inlineCode",{parentName:"li"},"abs")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"value")),(0,r.kt)("li",{parentName:"ul"},"When the input ",(0,r.kt)("inlineCode",{parentName:"li"},"value")," is negative, ",(0,r.kt)("inlineCode",{parentName:"li"},"abs")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"- value")),(0,r.kt)("li",{parentName:"ul"},"When the input ",(0,r.kt)("inlineCode",{parentName:"li"},"value")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"abs")," returns ",(0,r.kt)("inlineCode",{parentName:"li"},"0"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is the same as the type of the argument."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    x - 2 a,\n    abs(x -2)\nFROM long_sequence(3);\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"a"),(0,r.kt)("th",{parentName:"tr",align:null},"abs"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-1"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1")))),(0,r.kt)("h2",{id:"log"},"log"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"log(value)")," return the natural logarithm (",(0,r.kt)("strong",{parentName:"p"},"log",(0,r.kt)("em",{parentName:"strong"},"e")),") of a given number."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT log(4.123)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"log"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1.4165810537")))),(0,r.kt)("h2",{id:"power"},"power"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"power(base, exponent)")," returns the value of a number ",(0,r.kt)("inlineCode",{parentName:"p"},"base")," raised to the\npower defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"exponent"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base")," is any numeric value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exponent")," is any numeric value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT power(2, 3);\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"power"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8")))),(0,r.kt)("h2",{id:"round"},"round"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"round(value, scale)")," returns the ",(0,r.kt)("strong",{parentName:"p"},"closest"),' value in the specified scale. It\nuses the "half up" tie-breaking method when the value is exactly halfway between\nthe ',(0,r.kt)("inlineCode",{parentName:"p"},"round_up")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"round_down")," values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale")," is the number of decimal points returned. A negative scale means the\nrounding will occur to a digit to the left of the decimal point. For example,\n-1 means the number will be rounded to the nearest tens and +1 to the nearest\ntenths.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    d,\n    round(d, -2),\n    round(d, -1),\n    round(d,0),\n    round(d,1),\n    round(d,2)\nFROM dbl;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"d"),(0,r.kt)("th",{parentName:"tr",align:null},"round-2"),(0,r.kt)("th",{parentName:"tr",align:null},"round-1"),(0,r.kt)("th",{parentName:"tr",align:null},"round0"),(0,r.kt)("th",{parentName:"tr",align:null},"round1"),(0,r.kt)("th",{parentName:"tr",align:null},"round2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-0.811905406"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-1"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.8"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.81")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-5.002768547"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-10"),(0,r.kt)("td",{parentName:"tr",align:null},"-5"),(0,r.kt)("td",{parentName:"tr",align:null},"-5"),(0,r.kt)("td",{parentName:"tr",align:null},"-5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-64.75487334"),(0,r.kt)("td",{parentName:"tr",align:null},"-100"),(0,r.kt)("td",{parentName:"tr",align:null},"-60"),(0,r.kt)("td",{parentName:"tr",align:null},"-65"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.8"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.75")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-926.531695"),(0,r.kt)("td",{parentName:"tr",align:null},"-900"),(0,r.kt)("td",{parentName:"tr",align:null},"-930"),(0,r.kt)("td",{parentName:"tr",align:null},"-927"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.5"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.53")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.069361448"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0.1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.07")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4.003627053"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"86.91359825"),(0,r.kt)("td",{parentName:"tr",align:null},"100"),(0,r.kt)("td",{parentName:"tr",align:null},"90"),(0,r.kt)("td",{parentName:"tr",align:null},"87"),(0,r.kt)("td",{parentName:"tr",align:null},"86.9"),(0,r.kt)("td",{parentName:"tr",align:null},"86.91")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"376.3807766"),(0,r.kt)("td",{parentName:"tr",align:null},"400"),(0,r.kt)("td",{parentName:"tr",align:null},"380"),(0,r.kt)("td",{parentName:"tr",align:null},"376"),(0,r.kt)("td",{parentName:"tr",align:null},"376.4"),(0,r.kt)("td",{parentName:"tr",align:null},"376.38")))),(0,r.kt)("h2",{id:"round_down"},"round_down"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"round_down(value, scale)")," - rounds a value down to the specified scale"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale")," is the number of decimal points returned. A negative scale means the\nrounding will occur to a digit to the left of the decimal point. For example,\n-1 means the number will be rounded to the nearest tens and +1 to the nearest\ntenths.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    d,\n    round_down(d, -2),\n    round_down(d, -1),\n    round_down(d,0),\n    round_down(d,1),\n    round_down(d,2)\nFROM dbl;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"d"),(0,r.kt)("th",{parentName:"tr",align:null},"r_down-2"),(0,r.kt)("th",{parentName:"tr",align:null},"r_down-1"),(0,r.kt)("th",{parentName:"tr",align:null},"r_down0"),(0,r.kt)("th",{parentName:"tr",align:null},"r_down1"),(0,r.kt)("th",{parentName:"tr",align:null},"r_down2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-0.811905406"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.8"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.81")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-5.002768547"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-5"),(0,r.kt)("td",{parentName:"tr",align:null},"-5"),(0,r.kt)("td",{parentName:"tr",align:null},"-5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-64.75487334"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-60"),(0,r.kt)("td",{parentName:"tr",align:null},"-64"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.7"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.75")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-926.531695"),(0,r.kt)("td",{parentName:"tr",align:null},"-900"),(0,r.kt)("td",{parentName:"tr",align:null},"-920"),(0,r.kt)("td",{parentName:"tr",align:null},"-926"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.5"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.53")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.069361448"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0.06")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4.003627053"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"86.91359825"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"80"),(0,r.kt)("td",{parentName:"tr",align:null},"86"),(0,r.kt)("td",{parentName:"tr",align:null},"86.9"),(0,r.kt)("td",{parentName:"tr",align:null},"86.91")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"376.3807766"),(0,r.kt)("td",{parentName:"tr",align:null},"400"),(0,r.kt)("td",{parentName:"tr",align:null},"370"),(0,r.kt)("td",{parentName:"tr",align:null},"376"),(0,r.kt)("td",{parentName:"tr",align:null},"376.3"),(0,r.kt)("td",{parentName:"tr",align:null},"376.38")))),(0,r.kt)("h2",{id:"round_half_even"},"round_half_even"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"round_half_even(value, scale)")," - returns the ",(0,r.kt)("strong",{parentName:"p"},"closest"),' value in the specified\nscale. It uses the "half up" tie-breaking method when the value is exactly\nhalfway between the ',(0,r.kt)("inlineCode",{parentName:"p"},"round_up")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"round_down")," values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale")," is the number of decimal points returned. A negative scale means the\nrounding will occur to a digit to the left of the decimal point. For example,\n-1 means the number will be rounded to the nearest tens and +1 to the nearest\ntenths.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Tie-breaker behavior"',title:'"Tie-breaker','behavior"':!0},"SELECT\n    round_half_even(5.55, 1),\n    round_half_even(5.65, 1)\nFROM long_sequence(1);\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"round_half_even"),(0,r.kt)("th",{parentName:"tr",align:null},"round_half_even"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5.6"),(0,r.kt)("td",{parentName:"tr",align:null},"5.6")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="More examples"',title:'"More','examples"':!0},"SELECT\n    d,\n    round_half_even(d, -2),\n    round_half_even(d, -1),\n    round_half_even(d,0),\n    round_half_even(d,1),\n    round_half_even(d,2)\nFROM dbl;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"d"),(0,r.kt)("th",{parentName:"tr",align:null},"r_h_e-2"),(0,r.kt)("th",{parentName:"tr",align:null},"r_h_e-1"),(0,r.kt)("th",{parentName:"tr",align:null},"r_h_e0"),(0,r.kt)("th",{parentName:"tr",align:null},"r_h_e1"),(0,r.kt)("th",{parentName:"tr",align:null},"r_h_e2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-0.811905406"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-1"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.8"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.81")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-5.002768547"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-5"),(0,r.kt)("td",{parentName:"tr",align:null},"-5"),(0,r.kt)("td",{parentName:"tr",align:null},"-5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-64.75487334"),(0,r.kt)("td",{parentName:"tr",align:null},"-100"),(0,r.kt)("td",{parentName:"tr",align:null},"-60"),(0,r.kt)("td",{parentName:"tr",align:null},"-65"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.8"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.75")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-926.531695"),(0,r.kt)("td",{parentName:"tr",align:null},"-900"),(0,r.kt)("td",{parentName:"tr",align:null},"-930"),(0,r.kt)("td",{parentName:"tr",align:null},"-927"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.5"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.53")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.069361448"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0.1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.07")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4.003627053"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"86.91359825"),(0,r.kt)("td",{parentName:"tr",align:null},"100"),(0,r.kt)("td",{parentName:"tr",align:null},"90"),(0,r.kt)("td",{parentName:"tr",align:null},"87"),(0,r.kt)("td",{parentName:"tr",align:null},"86.9"),(0,r.kt)("td",{parentName:"tr",align:null},"86.91")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"376.3807766"),(0,r.kt)("td",{parentName:"tr",align:null},"400"),(0,r.kt)("td",{parentName:"tr",align:null},"380"),(0,r.kt)("td",{parentName:"tr",align:null},"376"),(0,r.kt)("td",{parentName:"tr",align:null},"376.4"),(0,r.kt)("td",{parentName:"tr",align:null},"376.38")))),(0,r.kt)("h2",{id:"round_up"},"round_up"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"round_up(value, scale)")," - rounds a value up to the specified scale"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scale")," is the number of decimal points returned. A negative scale means the\nrounding will occur to a digit to the left of the decimal point. For example,\n-1 means the number will be rounded to the nearest tens and +1 to the nearest\ntenths.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    d,\n    round_up(d, -2),\n    round_up(d, -1),\n    round_up(d,0),\n    round_up(d,1),\n    round_up(d,2)\nFROM dbl;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"d"),(0,r.kt)("th",{parentName:"tr",align:null},"r_up-2"),(0,r.kt)("th",{parentName:"tr",align:null},"r_up-1"),(0,r.kt)("th",{parentName:"tr",align:null},"r_up0"),(0,r.kt)("th",{parentName:"tr",align:null},"r_up1"),(0,r.kt)("th",{parentName:"tr",align:null},"r_up2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-0.811905406"),(0,r.kt)("td",{parentName:"tr",align:null},"-100"),(0,r.kt)("td",{parentName:"tr",align:null},"-10"),(0,r.kt)("td",{parentName:"tr",align:null},"-1"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.9"),(0,r.kt)("td",{parentName:"tr",align:null},"-0.82")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-5.002768547"),(0,r.kt)("td",{parentName:"tr",align:null},"-100"),(0,r.kt)("td",{parentName:"tr",align:null},"-10"),(0,r.kt)("td",{parentName:"tr",align:null},"-6"),(0,r.kt)("td",{parentName:"tr",align:null},"-5.1"),(0,r.kt)("td",{parentName:"tr",align:null},"-5.01")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-64.75487334"),(0,r.kt)("td",{parentName:"tr",align:null},"-100"),(0,r.kt)("td",{parentName:"tr",align:null},"-70"),(0,r.kt)("td",{parentName:"tr",align:null},"-65"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.8"),(0,r.kt)("td",{parentName:"tr",align:null},"-64.76")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-926.531695"),(0,r.kt)("td",{parentName:"tr",align:null},"-1000"),(0,r.kt)("td",{parentName:"tr",align:null},"-930"),(0,r.kt)("td",{parentName:"tr",align:null},"-927"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.6"),(0,r.kt)("td",{parentName:"tr",align:null},"-926.54")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.069361448"),(0,r.kt)("td",{parentName:"tr",align:null},"100"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.1"),(0,r.kt)("td",{parentName:"tr",align:null},"0.07")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4.003627053"),(0,r.kt)("td",{parentName:"tr",align:null},"100"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"4.1"),(0,r.kt)("td",{parentName:"tr",align:null},"4.01")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"86.91359825"),(0,r.kt)("td",{parentName:"tr",align:null},"100"),(0,r.kt)("td",{parentName:"tr",align:null},"90"),(0,r.kt)("td",{parentName:"tr",align:null},"87"),(0,r.kt)("td",{parentName:"tr",align:null},"87"),(0,r.kt)("td",{parentName:"tr",align:null},"86.92")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"376.3807766"),(0,r.kt)("td",{parentName:"tr",align:null},"400"),(0,r.kt)("td",{parentName:"tr",align:null},"380"),(0,r.kt)("td",{parentName:"tr",align:null},"377"),(0,r.kt)("td",{parentName:"tr",align:null},"376.4"),(0,r.kt)("td",{parentName:"tr",align:null},"376.39")))),(0,r.kt)("h2",{id:"sqrt"},"sqrt"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sqrt(value)")," return the square root of a given number."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," is any numeric value.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return value:")),(0,r.kt)("p",null,"Return value type is ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT sqrt(4000.32)\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"log"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"63.2480829749013")))))}k.isMDXComponent=!0}}]);