"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[3695],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},24973:function(e,t,n){n.d(t,{Z:function(){return d},I:function(){return u}});var a=n(67294),r=/{\w+}/g,i="{}";function o(e,t){var n=[],o=e.replace(r,(function(e){var r=e.substr(1,e.length-2),o=null==t?void 0:t[r];if(void 0!==o){var l=a.isValidElement(o)?o:String(o);return n.push(l),i}return e}));return 0===n.length?e:n.every((function(e){return"string"==typeof e}))?o.split(i).reduce((function(e,t,a){var r;return e.concat(t).concat(null!==(r=n[a])&&void 0!==r?r:"")}),""):o.split(i).reduce((function(e,t,r){return[].concat(e,[a.createElement(a.Fragment,{key:r},t,n[r])])}),[])}function l(e){return o(e.children,e.values)}var s=n(57529);function c(e){var t,n=e.id,a=e.message;return null!==(t=s[null!=n?n:a])&&void 0!==t?t:a}function u(e,t){var n,a=e.message;return o(null!==(n=c({message:a,id:e.id}))&&void 0!==n?n:a,t)}function d(e){var t,n=e.children,r=e.id,i=e.values,o=null!==(t=c({message:n,id:r}))&&void 0!==t?t:n;return a.createElement(l,{values:i},o)}},58215:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},41395:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(67294),r=n(80944),i=n(86010),o="tabItem_vU9c",l="tabItemActive_cw6a";var s=37,c=39;var u=function(e){var t=e.lazy,n=e.block,u=e.defaultValue,d=e.values,p=e.groupId,m=e.className,g=(0,r.Z)(),f=g.tabGroupChoices,h=g.setTabGroupChoices,b=(0,a.useState)(u),w=b[0],k=b[1],v=a.Children.toArray(e.children),y=[];if(null!=p){var C=f[p];null!=C&&C!==w&&d.some((function(e){return e.value===C}))&&k(C)}var x=function(e){var t=e.currentTarget,n=y.indexOf(t),a=d[n].value;k(a),null!=p&&(h(p,a),setTimeout((function(){var e,n,a,r,i,o,s,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,i=e.right,o=window,s=o.innerHeight,c=o.innerWidth,n>=0&&i<=c&&r<=s&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},N=function(e){var t,n;switch(e.keyCode){case c:var a=y.indexOf(e.target)+1;n=y[a]||y[0];break;case s:var r=y.indexOf(e.target)-1;n=y[r]||y[y.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},m)},d.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:(0,i.Z)("tabs__item",o,{"tabs__item--active":w===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:N,onFocus:x,onClick:x},n)}))),t?(0,a.cloneElement)(v.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}},82924:function(e,t,n){var a=n(67294).createContext(void 0);t.Z=a},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},80944:function(e,t,n){var a=n(67294),r=n(79443);t.Z=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},3437:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},metadata:function(){return p},toc:function(){return m},default:function(){return f}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=n(99226),l=n(24966),s=n(41395),c=n(58215),u=["components"],d={title:"Java (embedded)",description:"Java embedded API reference documentation."},p={unversionedId:"reference/api/java-embedded",id:"reference/api/java-embedded",isDocsHomePage:!1,title:"Java (embedded)",description:"Java embedded API reference documentation.",source:"@site/docs/reference/api/java-embedded.md",sourceDirName:"reference/api",slug:"/reference/api/java-embedded",permalink:"/docs/reference/api/java-embedded",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/api/java-embedded.md",version:"current",frontMatter:{title:"Java (embedded)",description:"Java embedded API reference documentation."},sidebar:"docs",previous:{title:"Authenticate",permalink:"/docs/reference/api/ilp/authenticate"},next:{title:"Command-line options",permalink:"/docs/reference/command-line-options"}},m=[{value:"Writing data",id:"writing-data",children:[{value:"Detailed steps",id:"detailed-steps",children:[]}]},{value:"Writing columns in blocks",id:"writing-columns-in-blocks",children:[]},{value:"Executing queries",id:"executing-queries",children:[{value:"Detailed steps",id:"detailed-steps-1",children:[]}]},{value:"InfluxDB sender library",id:"influxdb-sender-library",children:[]}],g={toc:m};function f(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"QuestDB is written in Java and can be used as any other Java library. Moreover,\nit is a single JAR with no additional dependencies."),(0,i.kt)("p",null,"To include QuestDB in your project, use the following:"),(0,i.kt)(s.Z,{defaultValue:"maven",values:[{label:"Maven",value:"maven"},{label:"Gradle",value:"gradle"}],mdxType:"Tabs"},(0,i.kt)(c.Z,{value:"maven",mdxType:"TabItem"},(0,i.kt)(l.Z,{renderText:function(e){return(0,i.kt)(o.Z,{className:"language-xml",title:"JDK11",mdxType:"CodeBlock"},"\n<dependency>\n  <groupId>org.questdb</groupId>\n  <artifactId>questdb</artifactId>\n  <version>"+e.name+"</version>\n</dependency>\n      ")},mdxType:"InterpolateReleaseData"}),(0,i.kt)(l.Z,{renderText:function(e){return(0,i.kt)(o.Z,{className:"language-xml",title:"JDK8",mdxType:"CodeBlock"},"\n<dependency>\n  <groupId>org.questdb</groupId>\n  <artifactId>questdb</artifactId>\n  <version>"+e.name+"-jdk8</version>\n</dependency>\n      ")},mdxType:"InterpolateReleaseData"})),(0,i.kt)(c.Z,{value:"gradle",mdxType:"TabItem"},(0,i.kt)(l.Z,{renderText:function(e){return(0,i.kt)(o.Z,{className:"language-shell",title:"JDK11",mdxType:"CodeBlock"},"implementation 'org.questdb:questdb:",e.name,"'")},mdxType:"InterpolateReleaseData"}),(0,i.kt)(l.Z,{renderText:function(e){return(0,i.kt)(o.Z,{className:"language-shell",title:"JDK8",mdxType:"CodeBlock"},"implementation 'org.questdb:questdb:",e.name,"-jdk8'")},mdxType:"InterpolateReleaseData"}))),(0,i.kt)("h2",{id:"writing-data"},"Writing data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter")," facilitates table writes. To successfully create an instance\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter"),", the table must:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Already exist"),(0,i.kt)("li",{parentName:"ul"},"Have no other open writers against it as the ",(0,i.kt)("inlineCode",{parentName:"li"},"TableWriter")," constructor will\nattempt to obtain an exclusive cross-process lock on the table.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Example table writer"',title:'"Example',table:!0,'writer"':!0},'final CairoConfiguration configuration = new DefaultCairoConfiguration("data_dir");\ntry (CairoEngine engine = new CairoEngine(configuration)) {\n    final SqlExecutionContextImpl ctx = new SqlExecutionContextImpl(engine, 1);\n    try (SqlCompiler compiler = new SqlCompiler(engine)) {\n\n        compiler.compile("create table abc (a int, b byte, c short, d long, e float, g double, h date, i symbol, j string, k boolean, l geohash(8c), ts timestamp) timestamp(ts)", ctx);\n\n        try (TableWriter writer = engine.getWriter(ctx.getCairoSecurityContext(), "abc", "testing")) {\n            for (int i = 0; i < 11; i++) {\n                TableWriter.Row row = writer.newRow(Os.currentTimeMicros());\n                row.putInt(0, 123);\n                row.putByte(1, (byte) 1111);\n                row.putShort(2, (short) 222);\n                row.putLong(3, 333);\n                row.putFloat(4, 4.44f);\n                row.putDouble(5, 5.55);\n                row.putDate(6, System.currentTimeMillis());\n                row.putSym(7, "xyz");\n                row.putStr(8, "abc");\n                row.putBool(9, true);\n                row.putGeoHash(10, GeoHashes.fromString("u33dr01d", 0, 8));\n                row.append();\n            }\n            writer.commit();\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"detailed-steps"},"Detailed steps"),(0,i.kt)("h4",{id:"configure-cairo-engine"},"Configure Cairo engine"),(0,i.kt)("p",null,"CairoEngine is a resource manager for the embedded QuestDB. Its main function is\nto facilitate concurrent access to pools of ",(0,i.kt)("inlineCode",{parentName:"p"},"TableReader")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter"),"\ninstances."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="New CairoEngine instance"',title:'"New',CairoEngine:!0,'instance"':!0},'final CairoConfiguration configuration = new DefaultCairoConfiguration("data_dir");\ntry (CairoEngine engine = new CairoEngine(configuration)) {\n')),(0,i.kt)("p",null,"A typical application will need only one instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"CairoEngine"),". This\ninstance will start when application starts and shuts down when application\ncloses. You will need to close ",(0,i.kt)("inlineCode",{parentName:"p"},"CairoEngine")," gracefully when the application\nstops."),(0,i.kt)("p",null,"QuestDB provides a default configuration which only requires the\n",(0,i.kt)("inlineCode",{parentName:"p"},"data directory")," to be specified. For a more advanced usage, the whole\n",(0,i.kt)("inlineCode",{parentName:"p"},"CairoConfiguration")," interface can be overridden."),(0,i.kt)("h4",{id:"create-an-instance-of-sqlexecutioncontext"},"Create an instance of SqlExecutionContext"),(0,i.kt)("p",null,"Execution context is a conduit for passing SQL execution artefacts to the\nexecution site. This instance is not thread-safe and it must not be shared\nbetween threads."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Example of execution context"',title:'"Example',of:!0,execution:!0,'context"':!0},"final SqlExecutionContextImpl ctx = new SqlExecutionContextImpl(engine, 1);\n")),(0,i.kt)("p",null,"The second argument is the number of threads that will be helping to execute SQL\nstatements. Unless you are building another QuestDB server, this value should\nalways be 1."),(0,i.kt)("h4",{id:"new-sqlcompiler-instance-and-blank-table"},"New SqlCompiler instance and blank table"),(0,i.kt)("p",null,"Before we start writing data using ",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter"),", the target table has to exist.\nThere are several ways to create new table ; using ",(0,i.kt)("inlineCode",{parentName:"p"},"SqlCompiler")," is the easiest."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Creating new table"',title:'"Creating',new:!0,'table"':!0},'try (SqlCompiler compiler = new SqlCompiler(engine)) {\n    compiler.compile("create table abc (a int, b byte, c short, d long, e float, g double, h date, i symbol, j string, k boolean, l geohash(8c), ts timestamp) timestamp(ts)", ctx);\n')),(0,i.kt)("p",null,"As you will be able to see below, the table field types and indexes must match\nthe code that is populating the table."),(0,i.kt)("h4",{id:"new-instance-of-tablewriter"},"New instance of TableWriter"),(0,i.kt)("p",null,"We use engine to create instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter"),". This will enable reusing this\n",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter")," instance later, when we use the same method of creating table\nwriter again."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="New table writer instance"',title:'"New',table:!0,writer:!0,'instance"':!0},'try (TableWriter writer = engine.getWriter(ctx.getCairoSecurityContext(), "abc", "testing")) {\n')),(0,i.kt)("p",null,"The writer will hold exclusive lock on table ",(0,i.kt)("inlineCode",{parentName:"p"},"abc")," until it is closed and\n",(0,i.kt)("inlineCode",{parentName:"p"},"testing")," will be used as the lock reason. This lock is both intra and\ninter-process. If you have two Java applications accessing the same table only\none will succeed at one time."),(0,i.kt)("h4",{id:"create-a-new-row"},"Create a new row"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Creating new table row with timestamp"',title:'"Creating',new:!0,table:!0,row:!0,with:!0,'timestamp"':!0},"TableWriter.Row row = writer.newRow(Os.currentTimeMicros());\n")),(0,i.kt)("p",null,"Although this operation semantically looks like a new object creation, the row\ninstance is actually being re-used under the hood. A Timestamp is necessary to\ndetermine a partition for the new row. Its value has to be either increment or\nstay the same as the last row. When the table is not partitioned and does not\nhave a designated timestamp column, timestamp value can be omitted."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Creating new table row without timestamp"',title:'"Creating',new:!0,table:!0,row:!0,without:!0,'timestamp"':!0},"TableWriter.Row row = writer.newRow();\n")),(0,i.kt)("h4",{id:"populate-columns"},"Populate columns"),(0,i.kt)("p",null,"There are put","*"," methods for every supported data type. Columns are updated by an\nindex as opposed to by name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Populating table column"',title:'"Populating',table:!0,'column"':!0},"row.putLong(3, 333);\n")),(0,i.kt)("p",null,"Column update order is not important and update can be sparse. All unset columns\nwill default to NULL values."),(0,i.kt)("h4",{id:"append-a-row"},"Append a row"),(0,i.kt)("p",null,"Following method call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Appending a new row"',title:'"Appending',a:!0,new:!0,'row"':!0},"row.append();\n")),(0,i.kt)("p",null,"Appended rows are not visible to readers until they are committed. An unneeded\nrow can also be canceled if required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Cancelling half-populated row"',title:'"Cancelling',"half-populated":!0,'row"':!0},"row.cancel();\n")),(0,i.kt)("p",null,"A pending row is automatically cancelled when ",(0,i.kt)("inlineCode",{parentName:"p"},"writer.newRow()")," is called.\nConsider the following scenario:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"TableWriter.Row row = writer.newRow(Os.currentTimeMicros());\nrow.putInt(0, 123);\nrow.putByte(1, (byte) 1111);\nrow.putShort(2, (short) 222);\nrow.putLong(3, 333);\nrow = writer.newRow(Os.currentTimeMicros());\n...\n")),(0,i.kt)("p",null,"Second ",(0,i.kt)("inlineCode",{parentName:"p"},"newRow()")," call would cancel all the updates to the row since the last\n",(0,i.kt)("inlineCode",{parentName:"p"},"append()"),"."),(0,i.kt)("h4",{id:"commit-changes"},"Commit changes"),(0,i.kt)("p",null,"To make changes visible to readers, writer has to commit. ",(0,i.kt)("inlineCode",{parentName:"p"},"writer.commit")," does\nthis job. Unlike traditional SQL databases, the size of the transaction does not\nmatter. You can commit anything between 1 and 1 trillion rows. We also spent\nconsiderable effort to ensure ",(0,i.kt)("inlineCode",{parentName:"p"},"commit()")," is lightweight. You can drip one row at\na time in applications that require such behaviour."),(0,i.kt)("h2",{id:"writing-columns-in-blocks"},"Writing columns in blocks"),(0,i.kt)("p",null,"QuestDB supports writing blocks of columnar data at once via the use of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"TableBlockWriter"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TableBlockWriter")," instance is obtained from a\n",(0,i.kt)("inlineCode",{parentName:"p"},"TableWriter")," and can then be used to write in memory frames of columnar data. A\nframe of columnar data is just a piece of contiguous memory with each column\nvalue stored in it one after another. The ",(0,i.kt)("inlineCode",{parentName:"p"},"TableBlockWriter")," will allow any\nnumber of such frames of columnar data to be written with an invocation of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"appendPageFrameColumn")," method, before the block is either committed or\ncancelled (rolled back). Use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TableBlockWriter")," requires that all columns\nhave the same number of rows written to them and within each column the frames\nneed to be added in append order."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"PageFrame")," instance can optionally be used as a convenient interface to hold\nthe columnar frames and a ",(0,i.kt)("inlineCode",{parentName:"p"},"PageFrameCursor")," instance can be used as an interface\nto provide a sequence of frames to be committed. Many of QuestDB's\n",(0,i.kt)("inlineCode",{parentName:"p"},"RecordCursorFactory")," implementations provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"PageFrameCursor"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Example table block writer"',title:'"Example',table:!0,block:!0,'writer"':!0},'final CairoConfiguration configuration = new DefaultCairoConfiguration("data_dir");\ntry (CairoEngine engine = new CairoEngine(configuration)) {\n    final SqlExecutionContextImpl ctx = new SqlExecutionContextImpl(engine, 1);\n    try (SqlCompiler compiler = new SqlCompiler(engine)) {\n\n        PageFrameCursor cursor = ...; // Setup PageFrameCursor instance\n        compiler.compile("create table abc (a int, b byte, c short, d long, e float, g double, h date, i symbol, j string, k boolean, l geohash(8c), ts timestamp) timestamp(ts)", ctx);\n\n        try (TableWriter writer = engine.getWriter(ctx.getCairoSecurityContext(), "abc", "testing")) {\n            int columnCount = writer.getMetadata().getColumnCount();\n            TableBlockWriter blockWriter = writer.newBlock();\n\n            PageFrame frame;\n            while ((frame = cursor.next()) != null) {\n                for (int columnIndex = 0; columnIndex < columnCount; columnIndex++) {\n                    blockWriter.appendPageFrameColumn(\n                            columnIndex,\n                            frame.getPageSize(columnIndex),\n                            frame.getPageAddress(columnIndex));\n                }\n            }\n            blockWriter.commit();\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"executing-queries"},"Executing queries"),(0,i.kt)("p",null,"We provide a single API for executing all kinds of SQL queries. The example\nbelow focuses on ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," and how to fetch data from a cursor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Compiling SQL"',title:'"Compiling','SQL"':!0},"final CairoConfiguration configuration = new DefaultCairoConfiguration(temp.getRoot().getAbsolutePath());\ntry (CairoEngine engine = new CairoEngine(configuration)) {\n    final SqlExecutionContextImpl ctx = new SqlExecutionContextImpl(engine, 1);\n    try (SqlCompiler compiler = new SqlCompiler(engine)) {\n        try (RecordCursorFactory factory = compiler.compile(\"abc\", ctx).getRecordCursorFactory()) {\n            try (RecordCursor cursor = factory.getCursor(ctx)) {\n                final Record record = cursor.getRecord();\n                while (cursor.hasNext()) {\n                    // access 'record' instance for field values\n                }\n            }\n        }\n    }\n}\n")),(0,i.kt)("h3",{id:"detailed-steps-1"},"Detailed steps"),(0,i.kt)("p",null,"The steps to setup CairoEngine, execution context and SqlCompiler are the same\nas those we explained in ",(0,i.kt)("a",{parentName:"p",href:"#writing-data"},"writing data")," section. We will skip\nthem here and focus on fetching data."),(0,i.kt)("h4",{id:"recordcursorfactory"},"RecordCursorFactory"),(0,i.kt)("p",null,"You can think of ",(0,i.kt)("inlineCode",{parentName:"p"},"RecordCursorFactory")," as PreparedStatement. This is the entity\nthat holds SQL execution plan with all of the execution artefacts. Factories are\ndesigned to be reused and we strongly encourage caching them. You also need to\nmake sure that you close factories explicitly when you no longer need them.\nFailing to do so can cause memory and/or other resources leak."),(0,i.kt)("h4",{id:"recordcursor"},"RecordCursor"),(0,i.kt)("p",null,"This instance allows iterating over the dataset produced by SQL. Cursors are\nrelatively short-lived and do not imply fetching all the data. Note that you\nhave to close a cursor as soon as enough data is fetched ; the closing process\ncan happen at any time."),(0,i.kt)("p",null,"Cursors are not thread safe and cannot be shared between threads."),(0,i.kt)("h4",{id:"record"},"Record"),(0,i.kt)("p",null,"This is cursor's data access API. Record instance is obtained from the cursor\noutside of the fetch loop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Example of fetching data from cursor"',title:'"Example',of:!0,fetching:!0,data:!0,from:!0,'cursor"':!0},"final Record record = cursor.getRecord();\nwhile (cursor.hasNext()) {\n    // access 'record' instance for field values\n}\n")),(0,i.kt)("p",null,"Record does not hold the data. Instead, it is an API to pull data when data is\nneeded. Record instance remains the same while cursor goes over the data, making\ncaching of records pointless."),(0,i.kt)("h2",{id:"influxdb-sender-library"},"InfluxDB sender library"),(0,i.kt)("p",null,"We have a ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/clients/java_ilp/"},"Java ILP client library")," to allow\nfast data ingestion."))}f.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);