"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[4310],{89200:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},metadata:function(){return c},toc:function(){return d},default:function(){return h}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),l=n(41395),i=n(58215),s=n(42954),p=["components"],m={},c={unversionedId:"develop/insert-data",id:"develop/insert-data",isDocsHomePage:!1,title:"Insert data",description:"This page shows how to insert data into QuestDB using different programming",source:"@site/docs/develop/insert-data.md",sourceDirName:"develop",slug:"/develop/insert-data",permalink:"/docs/develop/insert-data",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/develop/insert-data.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Connect",permalink:"/docs/develop/connect"},next:{title:"Query data",permalink:"/docs/develop/query-data"}},d=[{value:"InfluxDB Line Protocol",id:"influxdb-line-protocol",children:[{value:"Examples",id:"examples",children:[]},{value:"Timestamps",id:"timestamps",children:[]},{value:"ILP Datatypes and Casts",id:"ilp-datatypes-and-casts",children:[]},{value:"Constructing well-formed messages",id:"constructing-well-formed-messages",children:[]},{value:"Errors in Server Logs",id:"errors-in-server-logs",children:[]},{value:"Inserting NULL values",id:"inserting-null-values",children:[]},{value:"If you don&#39;t immediately see data",id:"if-you-dont-immediately-see-data",children:[]},{value:"Authentication",id:"authentication",children:[]},{value:"Third-party Library Compatibility",id:"third-party-library-compatibility",children:[]}]},{value:"PostgreSQL wire protocol",id:"postgresql-wire-protocol",children:[]},{value:"Web Console",id:"web-console",children:[]},{value:"HTTP REST API",id:"http-rest-api",children:[{value:"<code>/imp</code>: Uploading Tabular Data",id:"imp-uploading-tabular-data",children:[]},{value:"<code>/exec</code>: SQL <code>INSERT</code> Query",id:"exec-sql-insert-query",children:[]}]}],u={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page shows how to insert data into QuestDB using different programming\nlanguages and tools."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#influxdb-line-protocol"},"InfluxDB Line Protocol")," is the recommended primary\ningestion method in QuestDB and is recommended for high-performance\napplications."),(0,o.kt)("p",null,"For transactional data inserts, use the\n",(0,o.kt)("a",{parentName:"p",href:"#postgresql-wire-protocol"},"PostgreSQL wire protocol"),"."),(0,o.kt)("p",null,"For operational (ad-hoc) data ingestion, the ",(0,o.kt)("a",{parentName:"p",href:"#web-console"},"Web Console")," makes\nit easy to upload CSV files and insert via SQL statements. You can also perform\nthese same actions via the ",(0,o.kt)("a",{parentName:"p",href:"#http-rest-api"},"HTTP REST API"),". For\n",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/importing-data"},"large CSV import")," (database migrations), use SQL\n",(0,o.kt)("inlineCode",{parentName:"p"},"COPY"),"."),(0,o.kt)("p",null,"In summary, these are the different options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#influxdb-line-protocol"},"InfluxDB Line Protocol"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"High performance."),(0,o.kt)("li",{parentName:"ul"},"Optional automatic timestamps."),(0,o.kt)("li",{parentName:"ul"},"Optional integrated authentication."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/reference/clients/overview"},"Client libraries")," in various programming\nlanguages."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#postgresql-wire-protocol"},"PostgreSQL wire protocol"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"INSERT")," statements, including parameterized queries."),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"psql")," on the command line."),(0,o.kt)("li",{parentName:"ul"},"Interoperability with third-party tools and libraries."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#web-console"},"Web Console"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"CSV upload."),(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"INSERT")," statements."),(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"COPY")," for ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/importing-data/"},"large CSV import"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#http-rest-api"},"HTTP REST API"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"CSV upload."),(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"INSERT")," statements."),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"curl")," on the command line.")))),(0,o.kt)("h2",{id:"influxdb-line-protocol"},"InfluxDB Line Protocol"),(0,o.kt)("p",null,"The InfluxDB Line Protocol (ILP) is a text protocol over TCP on port 9009."),(0,o.kt)("p",null,"It is a one-way protocol to insert data, focusing on simplicity and performance."),(0,o.kt)("p",null,"Here is a summary table showing how it compares with other ways to insert data\nthat we support:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Protocol"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Record Insertion Reporting"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Data Insertion Performance"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"InfluxDB Line Protocol"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Server logs; Disconnect on error"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("strong",{parentName:"td"},"Best"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"CSV upload via HTTP REST"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Configurable"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Very Good")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"SQL ",(0,o.kt)("inlineCode",{parentName:"td"},"INSERT")," statements"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Transaction-level"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Good")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"SQL ",(0,o.kt)("inlineCode",{parentName:"td"},"COPY")," statements"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Transaction-level"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Suitable for one-off data migration")))),(0,o.kt)("p",null,"This interface is the preferred ingestion method as it provides the following\nbenefits:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"High-throughput ingestion"),(0,o.kt)("li",{parentName:"ul"},"Robust ingestion from multiple sources into tables with dedicated systems for\nreducing congestion"),(0,o.kt)("li",{parentName:"ul"},"Configurable commit-lag for out-of-order data via\n",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/configuration#influxdb-line-protocol-tcp"},"server configuration"),"\nsettings")),(0,o.kt)("p",null,"With sufficient client-side validation, the lack of errors to the client and\nconfirmation isn't necessarily a concern: QuestDB will log out any issues and\ndisconnect on error. The database will process any valid lines up to that point\nand insert rows."),(0,o.kt)("p",null,"On the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/overview"},"InfluxDB line protocol")," page, you may\nfind additional details on the message format, ports and authentication."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/third-party-tools/telegraf"},"Telegraf guide")," helps you configure a\nTelegraf agent to collect and send metrics to QuestDB via ILP."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/clients/overview"},"ILP client libraries")," provide more\nuser-friendly ILP clients for a growing number of languages."))),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("p",null,"These examples send a few rows of input. These use client libraries as well as\nraw TCP socket connections, when a client library is not available."),(0,o.kt)(l.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Go",value:"go"},{label:"Java",value:"java"},{label:"NodeJS",value:"nodejs"},{label:"C#",value:"csharp"},{label:"C",value:"c"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"Ruby",value:"ruby"},{label:"PHP",value:"php"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"python",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"go",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"java",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"javascript",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"csharp",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"c",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"c",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"cpp",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)(s.Q,{name:"ilp",lang:"rust",mdxType:"RemoteRepoExample"})),(0,o.kt)(i.Z,{value:"ruby",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},'require \'socket\'\nHOST = \'localhost\'\nPORT = 9009\n# Returns the current time in nanoseconds\ndef time_in_nsec\n    now = Time.now\n    return now.to_i * (10 ** 9) + now.nsec\nend\nbegin\n    s = TCPSocket.new HOST, PORT\n    # Single record insert\n    s.puts "trades,name=client_timestamp value=12.4 #{time_in_nsec}\\n"\n    # Omitting the timestamp allows the server to assign one\n    s.puts "trades,name=client_timestamp value=12.4\\n"\n    # Streams of readings must be newline-delimited\n    s.puts "trades,name=client_timestamp value=12.4\\n" +\n            "trades,name=client_timestamp value=11.4\\n"\nrescue SocketError => ex\n    puts ex.inspect\nensure\n    s.close() if s\nend\n'))),(0,o.kt)(i.Z,{value:"php",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nerror_reporting(E_ALL);\n\n/* Allow the script to hang around waiting for connections. */\nset_time_limit(0);\n\n/* Turn on implicit output flushing so we see what we\'re getting\n * as it comes in. */\nob_implicit_flush();\n\n$address = \'localhost\';\n$port = 9009;\n\n/* Create a TCP/IP socket. */\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\nif ($socket === false) {\n    echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\\n";\n} else {\n    echo "OK.\\n";\n}\n\necho "Attempting to connect to \'$address\' on port \'$port\'...";\n$result = socket_connect($socket, $address, $port);\nif ($result === false) {\n    echo "socket_connect() failed.\\nReason: ($result) " . socket_strerror(socket_last_error($socket)) . "\\n";\n} else {\n    echo "OK.\\n";\n}\n\n$row=utf8_encode("test_readings,city=London,make=Omron temperature=23.5,humidity=0.343 1465839830100400000\\n");\necho "$row";\nsocket_write($socket, $row);\necho "\\n";\nsocket_close($socket);\n\n?>\n')))),(0,o.kt)("h3",{id:"timestamps"},"Timestamps"),(0,o.kt)("p",null,"Providing a timestamp is optional. If one isn't provided, the server will\nautomatically assign the server's system time as the row's timestamp value."),(0,o.kt)("p",null,"Timestamps are interpreted as the number of nanoseconds from 1st Jan 1970 UTC,\nunless otherwise configured. See ",(0,o.kt)("inlineCode",{parentName:"p"},"cairo.timestamp.locale")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"line.tcp.timestamp")," ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/configuration"},"configuration options"),"."),(0,o.kt)("h3",{id:"ilp-datatypes-and-casts"},"ILP Datatypes and Casts"),(0,o.kt)("h4",{id:"strings-vs-symbols"},"Strings vs Symbols"),(0,o.kt)("p",null,"Strings may be recorded as either the ",(0,o.kt)("inlineCode",{parentName:"p"},"STRING")," type or the ",(0,o.kt)("inlineCode",{parentName:"p"},"SYMBOL")," type."),(0,o.kt)("p",null,"Inspecting a sample ILP we can see how a space ",(0,o.kt)("inlineCode",{parentName:"p"},"' '")," separator splits ",(0,o.kt)("inlineCode",{parentName:"p"},"SYMBOL"),"\ncolumns to the left from the rest of the columns."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'table_name,col1=symbol_val1,col2=symbol_val2 col3="string val",col4=10.5\n                                            \u252c\n                                            \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 separator\n')),(0,o.kt)("p",null,"In this example, columns ",(0,o.kt)("inlineCode",{parentName:"p"},"col1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"col2")," are strings written to the database\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"SYMBOL"),"s, whilst ",(0,o.kt)("inlineCode",{parentName:"p"},"col3")," is written out as a ",(0,o.kt)("inlineCode",{parentName:"p"},"STRING"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SYMBOL"),"s are strings with which are automatically\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/String_interning"},"interned")," by the database on a\nper-column basis. You should use this type if you expect the string to be\nre-used over and over, such as is common with identifiers."),(0,o.kt)("p",null,"For one-off strings use ",(0,o.kt)("inlineCode",{parentName:"p"},"STRING")," columns which aren't interned."),(0,o.kt)("h4",{id:"casts"},"Casts"),(0,o.kt)("p",null,"QuestDB types are a superset of those supported by ILP. This means that when\nsending data you should be aware of the performed conversions."),(0,o.kt)("p",null,"See:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/reference/sql/datatypes"},"QuestDB Types in SQL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/reference/api/ilp/columnset-types"},"ILP types and cast conversion tables"))),(0,o.kt)("h3",{id:"constructing-well-formed-messages"},"Constructing well-formed messages"),(0,o.kt)("p",null,"Different library implementations will perform different degrees content\nvalidation upfront before sending messages out. To avoid encountering issues,\nfollow these guidelines:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"All strings must be UTF-8 encoded."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Columns should only appear once per row."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Symbol columns must be written out before other columns."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Table and column names can't have invalid characters.")," These should not\ncontain ",(0,o.kt)("inlineCode",{parentName:"p"},"?"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"."),",",(0,o.kt)("inlineCode",{parentName:"p"},","),", ",(0,o.kt)("inlineCode",{parentName:"p"},"'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},"\\"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,o.kt)("inlineCode",{parentName:"p"},":"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"("),", ",(0,o.kt)("inlineCode",{parentName:"p"},")"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"~"),",",(0,o.kt)("inlineCode",{parentName:"p"},"' '")," (space), ",(0,o.kt)("inlineCode",{parentName:"p"},"\\0")," (nul terminator),\n",(0,o.kt)("a",{parentName:"p",href:"https://unicode-explorer.com/c/FEFF"},"ZERO WIDTH NO-BREAK SPACE"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Write timestamp column via designated API"),", or at the end of the message if\nyou are using raw sockets. If you have multiple timestamp columns write\nadditional ones as column values.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Don't change column type between rows."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Supply timestamps in order.")," These need to be at least equal to previous\nones in the same table, unless using the out of order feature. This is not\nnecessary if you use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/out-of-order-commit-lag"},"out-of-order"),"\nfeature."))),(0,o.kt)("h3",{id:"errors-in-server-logs"},"Errors in Server Logs"),(0,o.kt)("p",null,"QuestDB will always log any ILP errors in its\n",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/root-directory-structure#log-directory"},"server logs"),"."),(0,o.kt)("p",null,"Here is an example error from the server logs caused when a line attempted to\ninsert a ",(0,o.kt)("inlineCode",{parentName:"p"},"STRING")," into a ",(0,o.kt)("inlineCode",{parentName:"p"},"SYMBOL")," column."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"2022-04-13T13:35:19.784654Z E i.q.c.l.t.LineTcpConnectionContext [3968] could not process line data [table=bad_ilp_example, msg=cast error for line protocol string [columnWriterIndex=0, columnType=SYMBOL], errno=0]\n2022-04-13T13:35:19.784670Z I tcp-line-server scheduling disconnect [fd=3968, reason=0]\n")),(0,o.kt)("h3",{id:"inserting-null-values"},"Inserting NULL values"),(0,o.kt)("p",null,"To insert a NULL value, skip the column (or symbol) for that row."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"table1 a=10.5 1647357688714369403\ntable1 b=1.25 1647357698714369403\n")),(0,o.kt)("p",null,"Will insert as:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"a"),(0,o.kt)("th",{parentName:"tr",align:"left"},"b"),(0,o.kt)("th",{parentName:"tr",align:null},"timestamp"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"10.5"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"NULL")),(0,o.kt)("td",{parentName:"tr",align:null},"2022-03-15T15:21:28.714369Z")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"NULL")),(0,o.kt)("td",{parentName:"tr",align:"left"},"1.25"),(0,o.kt)("td",{parentName:"tr",align:null},"2022-03-15T15:21:38.714369Z")))),(0,o.kt)("h3",{id:"if-you-dont-immediately-see-data"},"If you don't immediately see data"),(0,o.kt)("p",null,"If you don't see your inserted data, this is usually down to one of two things:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You prepared the messages, but forgot to call ",(0,o.kt)("inlineCode",{parentName:"p"},".flush()")," or similar in your\nclient library, so no data was sent.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The internal timers and buffers within QuestDB did not commit the data yet.\nFor development (and development only), you may want to tweak configuration\nsettings to commit data more frequently."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ini",metastring:"title=server.conf",title:"server.conf"},"cairo.max.uncommitted.rows=1\n")),(0,o.kt)("p",{parentName:"li"},"Refer to\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/tcp-receiver/#commit-strategy"},"ILP's commit strategy"),"\ndocumentation for more on these configuration settings."))),(0,o.kt)("h3",{id:"authentication"},"Authentication"),(0,o.kt)("p",null,"ILP can additionally provide authentication. This is an optional feature which\nis documented ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/authenticate"},"here"),"."),(0,o.kt)("h3",{id:"third-party-library-compatibility"},"Third-party Library Compatibility"),(0,o.kt)("p",null,"Use our own ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/clients/overview"},"client libraries")," and/or protocol\ndocumentation: Clients intended to work with InfluxDB will not work with\nQuestDB."),(0,o.kt)("h2",{id:"postgresql-wire-protocol"},"PostgreSQL wire protocol"),(0,o.kt)("p",null,"QuestDB also supports the same wire protocol as PostgreSQL, allowing you to\nconnect and query the database with various third-party pre-existing client\nlibraries and tools."),(0,o.kt)("p",null,"You can connect to TCP port ",(0,o.kt)("inlineCode",{parentName:"p"},"8812")," and use both ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," SQL\nqueries."),(0,o.kt)("p",null,"PostgreSQL wire protocol is better suited for applications inserting via SQL\nprogrammatically as it provides parameterized queries, which avoid SQL injection\nissues."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"#influxdb-line-protocol"},"InfluxDB Line Protocol")," is the recommended primary\ningestion method in QuestDB. SQL ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," statements over the PostgreSQL offer\nfeedback and error reporting, but have worse overall performance."))),(0,o.kt)("p",null,"Here are a few examples demonstrating SQL ",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," queries:"),(0,o.kt)(l.Z,{defaultValue:"psql",values:[{label:"psql",value:"psql"},{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"NodeJS",value:"nodejs"},{label:"Go",value:"go"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"psql",mdxType:"TabItem"},(0,o.kt)("p",null,"Create the table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'psql -h localhost -p 8812 -U admin -d qdb \\\n    -c "CREATE TABLE IF NOT EXISTS t1 (name STRING, value INT);"\n')),(0,o.kt)("p",null,"Insert row:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"psql -h localhost -p 8812 -U admin -d qdb -c \"INSERT INTO t1 VALUES('a', 42)\"\n")),(0,o.kt)("p",null,"Query back:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'psql -h localhost -p 8812 -U admin -d qdb -c "SELECT * FROM t1"\n')),(0,o.kt)("p",null,"Note that you can also run ",(0,o.kt)("inlineCode",{parentName:"p"},"psql")," from Docker without installing the client\nlocally:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run -it --rm --network=host -e PGPASSWORD=quest \\\n    postgres psql ....\n"))),(0,o.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("p",null,"This example uses the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.psycopg.org/psycopg3/docs/"},"psychopg3")," adapter."),(0,o.kt)("p",null,"To ",(0,o.kt)("a",{parentName:"p",href:"https://www.psycopg.org/psycopg3/docs/basic/install.html"},"install")," the client library, use ",(0,o.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'python3 -m pip install "psycopg[binary]"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import psycopg as pg\nimport time\n\n# Connect to an existing QuestDB instance\n\nconn_str = 'user=admin password=quest host=127.0.0.1 port=8812 dbname=qdb'\nwith pg.connect(conn_str, autocommit=True) as connection:\n    \n    # Open a cursor to perform database operations\n\n    with connection.cursor() as cur:\n\n        # Execute a command: this creates a new table\n\n        cur.execute('''\n          CREATE TABLE IF NOT EXISTS test_pg (\n              ts TIMESTAMP,\n              name STRING,\n              value INT\n          ) timestamp(ts);\n          ''')\n        \n        print('Table created.')\n\n        # Insert data into the table.\n\n        for x in range(10):\n\n            # Converting datetime into millisecond for QuestDB\n\n            timestamp = time.time_ns() // 1000\n\n            cur.execute('''\n                INSERT INTO test_pg\n                    VALUES (%s, %s, %s);\n                ''',\n                (timestamp, 'python example', x))\n\n        print('Rows inserted.')\n\n        #Query the database and obtain data as Python objects.\n\n        cur.execute('SELECT * FROM trades_pg;')\n        records = cur.fetchall()\n        for row in records:\n            print(row)\n\n# the connection is now closed\n\n"))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.myco;\n\nimport java.sql.*;\nimport java.util.Properties;\n\nclass App {\n  public static void main(String[] args) throws SQLException {\n    Properties properties = new Properties();\n    properties.setProperty("user", "admin");\n    properties.setProperty("password", "quest");\n    properties.setProperty("sslmode", "disable");\n\n    final Connection connection = DriverManager.getConnection(\n      "jdbc:postgresql://localhost:8812/qdb", properties);\n    connection.setAutoCommit(false);\n\n    final PreparedStatement statement = connection.prepareStatement(\n      "CREATE TABLE IF NOT EXISTS trades (" +\n      "    ts TIMESTAMP, date DATE, name STRING, value INT" +\n      ") timestamp(ts);");\n    statement.execute();\n\n    try (PreparedStatement preparedStatement = connection.prepareStatement(\n        "INSERT INTO TRADES  VALUES (?, ?, ?, ?)")) {\n      preparedStatement.setTimestamp(\n        1,\n        new Timestamp(io.questdb.std.Os.currentTimeMicros()));\n      preparedStatement.setDate(2, new Date(System.currentTimeMillis()));\n      preparedStatement.setString(3, "abc");\n      preparedStatement.setInt(4, 123);\n      preparedStatement.execute();\n    }\n    System.out.println("Done");\n    connection.close();\n  }\n}\n'))),(0,o.kt)(i.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("p",null,"This example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pg"},(0,o.kt)("inlineCode",{parentName:"a"},"pg")," package")," which\nallows for quickly building queries using Postgres wire protocol. Details on the\nuse of this package can be found on the\n",(0,o.kt)("a",{parentName:"p",href:"https://node-postgres.com/"},"node-postgres documentation"),"."),(0,o.kt)("p",null,"This example uses naive ",(0,o.kt)("inlineCode",{parentName:"p"},"Date.now() * 1000")," inserts for Timestamp types in\nmicrosecond resolution. For accurate microsecond timestamps, the\n",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/process.html#processhrtimebigint"},"process.hrtime.bigint()"),"\ncall can be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'"use strict"\n\nconst { Client } = require("pg")\n\nconst start = async () => {\n  const client = new Client({\n    database: "qdb",\n    host: "127.0.0.1",\n    password: "quest",\n    port: 8812,\n    user: "admin",\n  })\n  await client.connect()\n\n  const createTable = await client.query(\n    "CREATE TABLE IF NOT EXISTS trades (" +\n      "    ts TIMESTAMP, date DATE, name STRING, value INT" +\n      ") timestamp(ts);",\n  )\n  console.log(createTable)\n\n  let now = new Date().toISOString()\n  const insertData = await client.query(\n    "INSERT INTO trades VALUES($1, $2, $3, $4);",\n    [now, now, "node pg example", 123],\n  )\n  await client.query("COMMIT")\n\n  console.log(insertData)\n\n  for (let rows = 0; rows < 10; rows++) {\n    // Providing a \'name\' field allows for prepared statements / bind variables\n    now = new Date().toISOString()\n    const query = {\n      name: "insert-values",\n      text: "INSERT INTO trades VALUES($1, $2, $3, $4);",\n      values: [now, now, "node pg prep statement", rows],\n    }\n    await client.query(query)\n  }\n  await client.query("COMMIT")\n\n  const readAll = await client.query("SELECT * FROM trades")\n  console.log(readAll.rows)\n\n  await client.end()\n}\n\nstart()\n  .then(() => console.log("Done"))\n  .catch(console.error)\n'))),(0,o.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("p",null,"This example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jackc/pgx"},"pgx")," driver and toolkit for\nPostgreSQL in Go. More details on the use of this toolkit can be found on the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jackc/pgx/wiki/Getting-started-with-pgx"},"GitHub repository for pgx"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "context"\n  "fmt"\n  "log"\n  "time"\n\n  "github.com/jackc/pgx/v4"\n)\n\nvar conn *pgx.Conn\nvar err error\n\nfunc main() {\n  ctx := context.Background()\n  conn, _ = pgx.Connect(ctx, "postgresql://admin:quest@localhost:8812/qdb")\n  defer conn.Close(ctx)\n\n  // text-based query\n  _, err := conn.Exec(ctx,\n    ("CREATE TABLE IF NOT EXISTS trades (" +\n     "    ts TIMESTAMP, date DATE, name STRING, value INT" +\n     ") timestamp(ts);"))\n  if err != nil {\n    log.Fatalln(err)\n  }\n\n  // Prepared statement given the name \'ps1\'\n  _, err = conn.Prepare(ctx, "ps1", "INSERT INTO trades VALUES($1,$2,$3,$4)")\n  if err != nil {\n    log.Fatalln(err)\n  }\n\n  // Insert all rows in a single commit\n  tx, err := conn.Begin(ctx)\n  if err != nil {\n    log.Fatalln(err)\n  }\n\n  for i := 0; i < 10; i++ {\n    // Execute \'ps1\' statement with a string and the loop iterator value\n    _, err = conn.Exec(\n      ctx,\n      "ps1",\n      time.Now(),\n      time.Now().Round(time.Millisecond),\n      "go prepared statement",\n      i + 1)\n    if err != nil {\n      log.Fatalln(err)\n    }\n  }\n\n  // Commit the transaction\n  err = tx.Commit(ctx)\n  if err != nil {\n    log.Fatalln(err)\n  }\n\n  // Read all rows from table\n  rows, err := conn.Query(ctx, "SELECT * FROM trades")\n  fmt.Println("Reading from trades table:")\n  for rows.Next() {\n    var name string\n    var value int64\n    var ts time.Time\n    var date time.Time\n    err = rows.Scan(&ts, &date, &name, &value)\n    fmt.Println(ts, date, name, value)\n  }\n\n  err = conn.Close(ctx)\n}\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("p",null,"The following example shows how to use parameterized queries and prepared\nstatements using the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/postgres/0.19.0/postgres/"},"rust-postgres"),"\nclient."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use postgres::{Client, NoTls, Error};\nuse chrono::{Utc};\nuse std::time::SystemTime;\n\nfn main() -> Result<(), Error> {\n    let mut client = Client::connect("postgresql://admin:quest@localhost:8812/qdb", NoTls)?;\n\n    // Basic query\n    client.batch_execute(\n      "CREATE TABLE IF NOT EXISTS trades ( \\\n          ts TIMESTAMP, date DATE, name STRING, value INT \\\n      ) timestamp(ts);")?;\n\n    // Parameterized query\n    let name: &str = "rust example";\n    let val: i32 = 123;\n    let utc = Utc::now();\n    let sys_time = SystemTime::now();\n    client.execute(\n        "INSERT INTO trades VALUES($1,$2,$3,$4)",\n        &[&utc.naive_local(), &sys_time, &name, &val],\n    )?;\n\n    // Prepared statement\n    let mut txn = client.transaction()?;\n    let statement = txn.prepare("INSERT INTO trades VALUES ($1,$2,$3,$4)")?;\n    for value in 0..10 {\n        let utc = Utc::now();\n        let sys_time = SystemTime::now();\n        txn.execute(&statement, &[&utc.naive_local(), &sys_time, &name, &value])?;\n    }\n    txn.commit()?;\n\n    println!("import finished");\n    Ok(())\n}\n')))),(0,o.kt)("h2",{id:"web-console"},"Web Console"),(0,o.kt)("p",null,"QuestDB ships with an embedded ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/web-console"},"Web Console")," running\nby default on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9000"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:"title='Creating a table and inserting some data'",title:"'Creating",a:!0,table:!0,and:!0,inserting:!0,some:!0,"data'":!0},"\nCREATE TABLE takeaway_order (ts TIMESTAMP, id SYMBOL, status SYMBOL)\n  TIMESTAMP(ts);\n\nINSERT INTO takeaway_order VALUES (now(), 'order1', 'placed');\nINSERT INTO takeaway_order VALUES (now(), 'order2', 'placed');\n")),(0,o.kt)("p",null,"SQL statements can be written in the code editor and executed by clicking the\n",(0,o.kt)("strong",{parentName:"p"},"Run")," button. Note that the web console runs a single statement at a time."),(0,o.kt)("p",null,"For inserting bulk data or migrating data from other databases, see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/importing-data"},"large CSV import"),"."),(0,o.kt)("h2",{id:"http-rest-api"},"HTTP REST API"),(0,o.kt)("p",null,"QuestDB exposes a REST API for compatibility with a wide range of libraries and\ntools. The REST API is accessible on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9000")," and has the following\ninsert-capable entrypoints:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Entrypoint"),(0,o.kt)("th",{parentName:"tr",align:"left"},"HTTP Method"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,o.kt)("th",{parentName:"tr",align:"left"},"API Docs"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"#imp-uploading-tabular-data"},(0,o.kt)("inlineCode",{parentName:"a"},"/imp"))),(0,o.kt)("td",{parentName:"tr",align:"left"},"POST"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Import CSV data"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/reference/api/rest#imp---import-data"},"Reference"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"#exec-sql-insert-query"},(0,o.kt)("inlineCode",{parentName:"a"},"/exec?query=.."))),(0,o.kt)("td",{parentName:"tr",align:"left"},"GET"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Run SQL Query returning JSON result set"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/reference/api/rest#exec---execute-queries"},"Reference"))))),(0,o.kt)("p",null,"For details such as content type, query parameters and more, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/rest"},"REST API")," docs."),(0,o.kt)("h3",{id:"imp-uploading-tabular-data"},(0,o.kt)("inlineCode",{parentName:"h3"},"/imp"),": Uploading Tabular Data"),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"#influxdb-line-protocol"},"InfluxDB Line Protocol")," is the recommended primary\ningestion method in QuestDB. CSV uploading offers insertion feedback and error\nreporting, but has worse overall performance."),(0,o.kt)("p",{parentName:"div"},"See ",(0,o.kt)("inlineCode",{parentName:"p"},"/imp"),"'s ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/rest#url-parameters"},(0,o.kt)("inlineCode",{parentName:"a"},"atomicity"))," query\nparameter to customize behavior on error."))),(0,o.kt)("p",null,"Let's assume you want to upload the following data via the ",(0,o.kt)("inlineCode",{parentName:"p"},"/imp")," entrypoint:"),(0,o.kt)(l.Z,{defaultValue:"csv",values:[{label:"CSV",value:"csv"},{label:"Table",value:"table"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"csv",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv",metastring:"title=data.csv",title:"data.csv"},"col1,col2,col3\na,10.5,True\nb,100,False\nc,,True\n"))),(0,o.kt)(i.Z,{value:"table",mdxType:"TabItem"},(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"col1"),(0,o.kt)("th",{parentName:"tr",align:"left"},"col2"),(0,o.kt)("th",{parentName:"tr",align:"left"},"col3"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"a"),(0,o.kt)("td",{parentName:"tr",align:"left"},"10.5"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"true"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"b"),(0,o.kt)("td",{parentName:"tr",align:"left"},"100"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"false"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"c"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"NULL")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"true"))))))),(0,o.kt)("p",null,"You can do so via the command line using ",(0,o.kt)("inlineCode",{parentName:"p"},"cURL")," or programmatically via HTTP\nAPIs in your scripts and applications."),(0,o.kt)("p",null,"By default, the response is designed to be human-readable. Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"fmt=json"),"\nquery argument to obtain a response in JSON. You can also specify the schema\nexplicitly. See the second example in Python for these features."),(0,o.kt)(l.Z,{defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"Python",value:"python"},{label:"NodeJS",value:"nodejs"},{label:"Go",value:"go"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"curl",mdxType:"TabItem"},(0,o.kt)("p",null,"This example imports a CSV file with automatic schema detection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Basic import with table name"',title:'"Basic',import:!0,with:!0,table:!0,'name"':!0},"curl -F data=@data.csv http://localhost:9000/imp?name=table_name\n")),(0,o.kt)("p",null,"This example overwrites an existing table and specifies a timestamp format and a\ndesignated timestamp column. For more information on the optional parameters to\nspecify timestamp formats, partitioning and renaming tables, see the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/rest#examples"},"REST API documentation"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Providing a user-defined schema"',title:'"Providing',a:!0,"user-defined":!0,'schema"':!0},'curl \\\n-F schema=\'[{"name":"ts", "type": "TIMESTAMP", "pattern": "yyyy-MM-dd - HH:mm:ss"}]\' \\\n-F data=@weather.csv \'http://localhost:9000/imp?overwrite=true&timestamp=ts\'\n'))),(0,o.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("p",null,"This first example shows uploading the ",(0,o.kt)("inlineCode",{parentName:"p"},"data.csv")," file with automatic schema\ndetection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nimport requests\n\ncsv = {'data': ('my_table', open('./data.csv', 'r'))}\nhost = 'http://localhost:9000'\n\ntry:\n    response = requests.post(host + '/imp', files=csv)\n    print(response.text)\nexcept requests.exceptions.RequestException as e:\n    print(f'Error: {e}', file=sys.stderr)\n")),(0,o.kt)("p",null,"The second example creates a CSV buffer from Python objects and uploads them\nwith a custom schema. Note UTF-8 encoding."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"fmt=json")," parameter allows us to obtain a parsable response, rather than a\ntabular response designed for human consumption."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import io\nimport csv\nimport requests\nimport pprint\nimport json\n\n\ndef to_csv_str(table):\n    output = io.StringIO()\n    csv.writer(output, dialect='excel').writerows(table)\n    return output.getvalue().encode('utf-8')\n\n\ndef main():\n    table_name = 'example_table2'\n    table = [\n        ['col1', 'col2', 'col3'],\n        ['a',    10.5,   True],\n        ['b',    100,    False],\n        ['c',    None,   True]]\n\n    table_csv = to_csv_str(table)\n    print(table_csv)\n    schema = json.dumps([\n        {'name': 'col1', 'type': 'SYMBOL'},\n        {'name': 'col2', 'type': 'DOUBLE'},\n        {'name': 'col3', 'type': 'BOOLEAN'}])\n    response = requests.post(\n        'http://localhost:9000/imp',\n        params={'fmt': 'json'},\n        files={\n            'schema': schema,\n            'data': (table_name, table_csv)}).json()\n\n    # You can parse the `status` field and `error` fields\n    # of individual columns. See Reference/API/REST docs for details.\n    pprint.pprint(response)\n\n\nif __name__ == '__main__':\n    main()\n"))),(0,o.kt)(i.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const fetch = require("node-fetch")\nconst FormData = require("form-data")\nconst fs = require("fs")\n\nconst HOST = "http://localhost:9000"\n\nasync function run() {\n  const form = new FormData()\n\n  form.append("data", fs.readFileSync(__dirname + "/data.csv"), {\n    filename: fileMetadata.name,\n    contentType: "application/octet-stream",\n  })\n\n  try {\n    const r = await fetch(`${HOST}/imp`, {\n      method: "POST",\n      body: form,\n      headers: form.getHeaders(),\n    })\n\n    console.log(r)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nrun()\n'))),(0,o.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "bytes"\n  "fmt"\n  "io"\n  "io/ioutil"\n  "log"\n  "mime/multipart"\n  "net/http"\n  "net/url"\n  "os"\n)\n\nfunc main() {\n  u, err := url.Parse("http://localhost:9000")\n  checkErr(err)\n  u.Path += "imp"\n  url := fmt.Sprintf("%v", u)\n  fileName := "/path/to/data.csv"\n  file, err := os.Open(fileName)\n  checkErr(err)\n\n  defer file.Close()\n\n  buf := new(bytes.Buffer)\n  writer := multipart.NewWriter(buf)\n  uploadFile, _ := writer.CreateFormFile("data", "data.csv")\n  _, err = io.Copy(uploadFile, file)\n  checkErr(err)\n  writer.Close()\n\n  req, err := http.NewRequest(http.MethodPut, url, buf)\n  checkErr(err)\n  req.Header.Add("Content-Type", writer.FormDataContentType())\n\n  client := &http.Client{}\n  res, err := client.Do(req)\n  checkErr(err)\n\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  checkErr(err)\n\n  log.Println(string(body))\n}\n\nfunc checkErr(err error) {\n  if err != nil {\n    panic(err)\n  }\n}\n')))),(0,o.kt)("h3",{id:"exec-sql-insert-query"},(0,o.kt)("inlineCode",{parentName:"h3"},"/exec"),": SQL ",(0,o.kt)("inlineCode",{parentName:"h3"},"INSERT")," Query"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/exec")," entrypoint takes a SQL query and returns results as JSON."),(0,o.kt)("p",null,"We can use this for quick SQL inserts too, but note that there's no support for\nparameterized queries that are necessary to avoid SQL injection issues."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Prefer the ",(0,o.kt)("a",{parentName:"p",href:"#postgresql-wire-protocol"},"PostgreSQL interface")," if you are\ngenerating sql programmatically."),(0,o.kt)("p",{parentName:"div"},"Prefer ",(0,o.kt)("a",{parentName:"p",href:"#influxdb-line-protocol"},"ILP")," if you need high-performance inserts."))),(0,o.kt)(l.Z,{defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"Python",value:"python"},{label:"NodeJS",value:"nodejs"},{label:"Go",value:"go"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"curl",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'# Create Table\ncurl -G \\\n  --data-urlencode "query=CREATE TABLE IF NOT EXISTS trades(name STRING, value INT)" \\\n  http://localhost:9000/exec\n\n# Insert a row\ncurl -G \\\n  --data-urlencode "query=INSERT INTO trades VALUES(\'abc\', 123456)" \\\n  http://localhost:9000/exec\n'))),(0,o.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nimport requests\nimport json\n\nhost = 'http://localhost:9000'\n\ndef run_query(sql_query):\n    query_params = {'query': sql_query, 'fmt' : 'json'}\n    try:\n        response = requests.get(host + '/exec', params=query_params)\n        json_response = json.loads(response.text)\n        print(json_response)\n    except requests.exceptions.RequestException as e:\n        print(f'Error: {e}', file=sys.stderr)\n\n# create table\nrun_query(\"CREATE TABLE IF NOT EXISTS trades (name STRING, value INT)\")\n# insert row\nrun_query(\"INSERT INTO trades VALUES('abc', 123456)\")\n"))),(0,o.kt)(i.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"node-fetch")," package can be installed using ",(0,o.kt)("inlineCode",{parentName:"p"},"npm i node-fetch"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const fetch = require("node-fetch")\n\nconst HOST = "http://localhost:9000"\n\nasync function createTable() {\n  try {\n    const query = "CREATE TABLE IF NOT EXISTS trades (name STRING, value INT)"\n\n    const response = await fetch(\n      `${HOST}/exec?query=${encodeURIComponent(query)}`,\n    )\n    const json = await response.json()\n\n    console.log(json)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nasync function insertData() {\n  try {\n    const query = "INSERT INTO trades VALUES(\'abc\', 123456)"\n\n    const response = await fetch(\n      `${HOST}/exec?query=${encodeURIComponent(query)}`,\n    )\n    const json = await response.json()\n\n    console.log(json)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\ncreateTable().then(insertData)\n'))),(0,o.kt)(i.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n  "io/ioutil"\n  "log"\n  "net/http"\n  "net/url"\n)\n\nfunc main() {\n  u, err := url.Parse("http://localhost:9000")\n  checkErr(err)\n\n  u.Path += "exec"\n  params := url.Values{}\n  params.Add("query", `\n    CREATE TABLE IF NOT EXISTS\n      trades (name STRING, value INT);\n    INSERT INTO\n      trades\n    VALUES(\n      "abc",\n      123456\n    );\n  `)\n  u.RawQuery = params.Encode()\n  url := fmt.Sprintf("%v", u)\n\n  res, err := http.Get(url)\n  checkErr(err)\n\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  checkErr(err)\n\n  log.Println(string(body))\n}\n\nfunc checkErr(err error) {\n  if err != nil {\n    panic(err)\n  }\n}\n')))))}h.isMDXComponent=!0}}]);