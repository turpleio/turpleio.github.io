"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5362],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},25869:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=n(46092),s=["components"],l={title:"Visualizing cryptocurrency data with Python, Grafana and QuestDB",author:"Tancrede Collard",author_title:"QuestDB Team",author_url:"https://github.com/TheTanc",author_image_url:"https://avatars.githubusercontent.com/TheTanc",description:"Learn how to using Python to fetch cryptocurrency data from Coinbase, store it in QuestDB, and visualize the data using Grafana.",keywords:["questdb","python","grafana","crypto","database"],tags:["tutorial","crypto","trading","python","grafana"],image:"/img/blog/shared/og-bitcoin-grafana.png"},u={permalink:"/blog/2022/03/15/cryptocurrency-grafana-questdb",source:"@site/blog/2022-03-15-cryptocurrency-grafana-questdb.md",title:"Visualizing cryptocurrency data with Python, Grafana and QuestDB",description:"Learn how to using Python to fetch cryptocurrency data from Coinbase, store it in QuestDB, and visualize the data using Grafana.",date:"2022-03-15T00:00:00.000Z",formattedDate:"March 15, 2022",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"crypto",permalink:"/blog/tags/crypto"},{label:"trading",permalink:"/blog/tags/trading"},{label:"python",permalink:"/blog/tags/python"},{label:"grafana",permalink:"/blog/tags/grafana"}],readingTime:6.405,truncated:!1,prevItem:{title:"Crypto Volume Profiles with QuestDB and Julia",permalink:"/blog/2022/03/29/crypto-volumes-julia-questdb"},nextItem:{title:"How to generate time-series data in QuestDB",permalink:"/blog/2022/03/14/mock-sql-timeseries-data-questdb"}},c=[{value:"Visualizing time series data",id:"visualizing-time-series-data",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Installing QuestDB using homebrew",id:"installing-questdb-using-homebrew",children:[]},{value:"Fetching data from Coinbase using Python",id:"fetching-data-from-coinbase-using-python",children:[]},{value:"Building a Grafana dashboard",id:"building-a-grafana-dashboard",children:[]},{value:"Calculating indicative bid offers",id:"calculating-indicative-bid-offers",children:[]},{value:"Next steps",id:"next-steps",children:[]}],p={toc:c};function d(e){var t=e.components,l=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{alt:"Grafana logo, QuestDB logo, Bitcoin logo",height:467,src:"/img/blog/2022-03-15/banner.png",width:650,mdxType:"Banner"}),(0,i.kt)("p",null,"This post comes from Tancrede Collard, who has written an excellent tutorial\nthat shows how to use Python to fetch cryptocurrency data from Coinbase, store\nit in QuestDB, and visualize the data using Grafana. Thanks for the submission,\nTancrede!"),(0,i.kt)("h2",{id:"visualizing-time-series-data"},"Visualizing time series data"),(0,i.kt)("p",null,"When analyzing streaming data such as cryptocurrency or market metrics, the\nfoundation of the data processing pipeline is efficient storage and queries. To\nuse this data for insights and analytics, data visualization is a convenient way\nto plot and convey trends, create actionable reports, or even set up alerting."),(0,i.kt)("p",null,"Most cryptocurrency trading projects will focus on price charts and standard\nindicators like ",(0,i.kt)("a",{parentName:"p",href:"https://www.investopedia.com/terms/r/rsi.asp"},"RSI")," or moving\naverages. Derivatives are often overlooked in many cryptocurrency analytics and\nvisualization projects, and there's plenty to explore, such as the underlying\npricing metrics such as volatility and funding rates."),(0,i.kt)("p",null,"A lot of common off-the-shelf tools can plot prices over time, but few are\navailable for derivative features. Having control of the underlying database,\ncreating custom metrics, and building dashboards based on these metrics allows\nus to build our own solutions with custom pricing inputs and models for\nderivatives."),(0,i.kt)("p",null,"In this tutorial, you'll learn how to fetch data from the Coinbase API using a\nPython script, load the data into QuestDB and run SQL queries via QuestDB for\nderivatives insights. We'll be visualizing data using Grafana so that we can\nbuild dashboards for reporting or alerts based on metrics you care about."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"To follow with this tutorial, you'll need the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.coinbase.com/signup"},"Coinbase")," account with an\n",(0,i.kt)("a",{parentName:"li",href:"https://developers.coinbase.com/api/v2"},"API key")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://brew.sh/"},"Homebrew")," for macOS users")),(0,i.kt)("h2",{id:"installing-questdb-using-homebrew"},"Installing QuestDB using homebrew"),(0,i.kt)("p",null,"Before we can start storing data, we'll need to get QuestDB up and running.\nAside from running QuestDB from\n",(0,i.kt)("a",{parentName:"p",href:"https://questdb.io/get-questdb/"},"binaries and via Docker"),", macOS users can get\nstarted using homebrew:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install questdb\n")),(0,i.kt)("p",null,"Additional settings can be changes in the\n",(0,i.kt)("a",{parentName:"p",href:"https://questdb.io/docs/reference/configuration/"},"server configuration")," file\nlocated at ",(0,i.kt)("inlineCode",{parentName:"p"},"/opt/homebrew/var/questdb/conf/server.conf")," for the homebrew install.\nThe interface we'll be using for inserting data is ILP\n(",(0,i.kt)("a",{parentName:"p",href:"https://questdb.io/docs/reference/api/ilp/overview/"},"InfluxDB line protocol"),")\nover TCP which runs on port 9009 by default. The server configuration for these\nkeys looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"######################### LINE TCP settings ###############################\nline.tcp.enabled=true\nline.tcp.net.active.connection.limit=10\nline.tcp.net.bind.to=0.0.0.0:9009\n")),(0,i.kt)("p",null,"To avoid unnecessary memory usage when using Grafana, it's recommended to\ndisable QuestDB's ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," query cache with the following PostgreSQL property in\nQuestDB's server config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"pg.select.cache.enabled=false\n")),(0,i.kt)("p",null,"When we've set these server configuration properties, we can start up the\ndatabase service with\n",(0,i.kt)("a",{parentName:"p",href:"https://questdb.io/docs/reference/command-line-options/"},"QuestDB's CLI"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"questdb start\n")),(0,i.kt)("h2",{id:"fetching-data-from-coinbase-using-python"},"Fetching data from Coinbase using Python"),(0,i.kt)("p",null,"Cryptocurrency data is readily available from a variety of public APIs. Coinbase\noffers a simple API endpoint to get an indicative bid and offer price which is\nall we need for our use case."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},"https://api.coinbase.com/v2/prices/\n")),(0,i.kt)("p",null,"It requires an authorization token which you should obtain from your Coinbase\naccount. For this tutorial, we'll use a simple Python script to periodically\npoll the endpoint for a given currency pair. The loop does 3 things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"fetch SELL (bid) and BUY (ask) prices"),(0,i.kt)("li",{parentName:"ol"},"send the current bid & ask prices to QuestDB via ILP"),(0,i.kt)("li",{parentName:"ol"},"sleep 2 seconds before looping to step 1")),(0,i.kt)("p",null,"The script uses ",(0,i.kt)("inlineCode",{parentName:"p"},"requests")," for the HTTP requests to the Coinbase API and\n",(0,i.kt)("inlineCode",{parentName:"p"},"socket")," for the direct TCP communication to QuestDB. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"your_token")," by\nthe API key from your Coinbase account:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nimport socket\nfrom time import sleep\n\n# QuestDB settings\nHOST = 'localhost'\nPORT = 9009\n\n# Auth\ntoken='your_token'\n\n# Request settings\npair='BTC-USD'\nsellURL=\"https://api.coinbase.com/v2/prices/\"+pair+\"/sell\"\nbuyURL=\"https://api.coinbase.com/v2/prices/\"+pair+\"/buy\"\nPARAMS={'Authorization': 'Bearer '+token}\n\nif __name__ == '__main__':\n    try:\n        while 1==1:\n            # Get data from the API\n            sellData = requests.get(url=sellURL, params=PARAMS).json()\n            buyData = requests.get(url=buyURL, params=PARAMS).json()\n            sp = sellData['data']['amount']\n            bp = buyData['data']['amount']\n\n            # Send data to QuestDB\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.connect((HOST, PORT))\n            sock.sendall(('crypto,fromCCY=BTC,toCCY=USD,exch=CB bid='+sp+',ask='+bp+'\\n').encode())\n            sleep(2)\n\n    except Exception as e:\n        print(e)\n")),(0,i.kt)("p",null,"When you start the script, prices should appear in the web console for QuestDB.\nRunning ",(0,i.kt)("inlineCode",{parentName:"p"},"crypto")," (this is shorthand for ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT * FROM crypto"),") in the SQL\neditor shows the prices flowing in QuestDB:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"QuestDB web console",src:n(19188).Z})),(0,i.kt)("p",null,"One important thing to note is that we didn't create a table before sending\ndata. QuestDB automatically creates tables using the appropriate columns\ndetected from the message. The currency identifiers are inserted as\n",(0,i.kt)("a",{parentName:"p",href:"https://questdb.io/docs/concept/symbol/"},"symbol types"),", and the values are\ninserted as doubles. It's also noteworthy that the record timestamp is set as\nthe server time when the row was inserted and tables created from ILP ingestion\nhave a default ",(0,i.kt)("inlineCode",{parentName:"p"},"day")," partitioning. The schema looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"fromCCY: symbol\ntoCCY:   symbol\nexch:    symbol\nbid:     double\nask:     double\n")),(0,i.kt)("h2",{id:"building-a-grafana-dashboard"},"Building a Grafana dashboard"),(0,i.kt)("p",null,"Grafana is an excellent tool for data visualization, and it comes in extremely\nhandy If you're doing any algorithmic trading. The variety of integrations with\nother services enables you to quickly set up monitoring and alerts for\nconditions like irregular prices or flow and risk limits."),(0,i.kt)("p",null,"This tutorial is tailored for macOS users, so we'll use Homebrew, but there are\nother options covered in the\n",(0,i.kt)("a",{parentName:"p",href:"https://questdb.io/docs/third-party-tools/grafana"},"QuestDB Grafana guide"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install grafana\nbrew services start grafana\n")),(0,i.kt)("p",null,"To configure Grafana, open the UI available ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")," and\nconfigure QuestDB:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Go to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Configuration")," section and click on ",(0,i.kt)("inlineCode",{parentName:"li"},"Data sources")),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("inlineCode",{parentName:"li"},"Add data source")),(0,i.kt)("li",{parentName:"ul"},"Choose the ",(0,i.kt)("inlineCode",{parentName:"li"},"PostgreSQL")," plugin and configure it with the following settings:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"host: localhost:8812\ndatabase: qdb\nuser: admin\npassword: quest\nSSL mode: disable\n")),(0,i.kt)("h2",{id:"calculating-indicative-bid-offers"},"Calculating indicative bid offers"),(0,i.kt)("p",null,"Let's craft a query in Grafana that will allow us to plot the metrics we're\ninterested in. Start off by creating a new dashboard and click on ",(0,i.kt)("inlineCode",{parentName:"p"},"new panel"),".\nThe pencil icon allows you to provide a query to run against QuestDB for Grafana\nto plot:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"The edit icon in Grafana panel",src:n(97702).Z})),(0,i.kt)("p",null,"Paste the following query to create a time series of the bid-offer and mid\nprice:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"select\n  timestamp as time,\n  avg(ask) as ask,\n  avg(ask+bid)/2 as mid,\n  avg(bid) as bid\nfrom crypto\nwhere $__timeFilter(timestamp)\nand fromCCY='BTC' and toCCY='USD' and exch='CB'\nsample by $__interval\n")),(0,i.kt)("p",null,"To simplify queries which have dynamic elements such as date ranges, the query\ncontains\n",(0,i.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/variables/variable-types/global-variables/#global-variables"},"global variables"),".\nWe're using two:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$__timeFilter(timestamp)")," - allows filtering results by sending a start-time\nand end-time to QuestDB; generates a ",(0,i.kt)("inlineCode",{parentName:"li"},"BETWEEN")," clause."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$__interval")," - calculates a dynamic interval based on the time range applied\nto the dashboard. By using this function, the sampling interval changes\nautomatically as the user zooms in and out of the panel.")),(0,i.kt)("p",null,"At this point, we have a dashboard with ticking prices. We can start\nexperimenting with other parameters such as the colors or the sample frequency\nfor each of the series. The Grafana UI can be used to change the chart range and\nresolution:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Low-resolution Cryptocurrency trade data in Grafana",src:n(36875).Z})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"High-resolution Cryptocurrency trade data in Grafana",src:n(92190).Z})),(0,i.kt)("p",null,"Although our data is very simplistic right now (indicative bid an offer from one\nplatform on one pair), the nice thing about building this from scratch is that\nwe can calculate derived metrics such as the spread over time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  timestamp as time,\n  avg(ask-bid)/(avg(bid+ask)/2)*100\nfrom crypto\nwhere $__timeFilter(timestamp)\nand fromCCY='BTC' and toCCY='USD' and exch='CB'\nsample by $__interval\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Spread prices visualized in Grafana",src:n(79111).Z})),(0,i.kt)("h2",{id:"next-steps"},"Next steps"),(0,i.kt)("p",null,"There are many other things to do, such as pulling prices from various venues or\nfetching order book data rather than indicative top-of-book. The next steps we\ncan take with this project that would be interesting to explore would be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deriving forward curve and implied funding on cryptocurrency using futures\nprices"),(0,i.kt)("li",{parentName:"ul"},"Plotting crypto volatility smiles")),(0,i.kt)("p",null,"If you like this content, we'd love to know your thoughts! Feel free to share\nyour feedback or just come and say hello in the\n",(0,i.kt)("a",{parentName:"p",href:"https://"},"QuestDB Community Slack"),"."))}d.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);