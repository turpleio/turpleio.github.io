"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5563],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return p}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(a),p=r,h=m["".concat(l,".").concat(p)]||m[p]||u[p]||i;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},65805:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return d},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),s=a(46092),o=a(72525),l=["components"],d={title:"What is time-series data, and why are we building a time-series database (TSDB)?",author:"Nicolas Hourcard",author_title:"Co-founder & CEO, QuestDB",author_url:"https://github.com/tris0laris",author_image_url:"https://avatars.githubusercontent.com/tris0laris",description:"A primer on time-series data and time-series databases (TSDB), and why we decided to build QuestDB",image:"/img/blog/2020-11-26/banner.jpg",tags:["company","startup","entrepreneurship","story"]},c={permalink:"/blog/2020/11/26/why-timeseries-data",source:"@site/blog/2020-11-26-why-timeseries-data.md",title:"What is time-series data, and why are we building a time-series database (TSDB)?",description:"A primer on time-series data and time-series databases (TSDB), and why we decided to build QuestDB",date:"2020-11-26T00:00:00.000Z",formattedDate:"November 26, 2020",tags:[{label:"company",permalink:"/blog/tags/company"},{label:"startup",permalink:"/blog/tags/startup"},{label:"entrepreneurship",permalink:"/blog/tags/entrepreneurship"},{label:"story",permalink:"/blog/tags/story"}],readingTime:8.31,truncated:!0,prevItem:{title:"Building a garbage-free network stack for Kafka streams",permalink:"/blog/2020/12/10/garbage-free-stack-for-kafka-streams"},nextItem:{title:"Community contribution from Alex Pelagenko improving our HTTP server",permalink:"/blog/2020/11/16/http-server-contribution"}},u=[{value:"Part I: Time series data and characteristics of TSDBs",id:"part-i-time-series-data-and-characteristics-of-tsdbs",children:[{value:"Time-series data explained",id:"time-series-data-explained",children:[]},{value:"Performance is the pillar of a time-series database",id:"performance-is-the-pillar-of-a-time-series-database",children:[]},{value:"TSDBs most important features and trade-offs",id:"tsdbs-most-important-features-and-trade-offs",children:[]}]},{value:"Part 2: Why we set out to build QuestDB",id:"part-2-why-we-set-out-to-build-questdb",children:[{value:"When it all started 7 years ago",id:"when-it-all-started-7-years-ago",children:[]},{value:"QuestDB design and performance",id:"questdb-design-and-performance",children:[]},{value:"QuestDB and its growing community",id:"questdb-and-its-growing-community",children:[]}]}],m={toc:u};function p(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(s.Z,{alt:"An open lock with its key attached to it.",height:433,src:"/img/blog/2020-11-26/banner.jpg",width:650,mdxType:"Banner"},"Photo by ",(0,i.kt)("a",{href:"https://unsplash.com/photos/uCMKx2H1Y38"},"AbsolutVision")," ","on ",(0,i.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,i.kt)("p",null,"Like all good superheroes, every company has its own origin story explaining why\nthey were created and how they grew over time. This article covers the origin\nstory of QuestDB and frames it with an introduction to time series databases to\nshow where we sit in that landscape today."),(0,i.kt)("h2",{id:"part-i-time-series-data-and-characteristics-of-tsdbs"},"Part I: Time series data and characteristics of TSDBs"),(0,i.kt)("h3",{id:"time-series-data-explained"},"Time-series data explained"),(0,i.kt)("p",null,"Time series is a succession of data points ordered by time. These data points\ncould be a succession of events from an application\u2019s users, the state of CPU\nand memory usage over time, financial trades recorded every microsecond, or\nsensors from a car emitting data about the vehicle acceleration and velocity."),(0,i.kt)("p",null,"For that reason, time-series is synonymous with large amounts of data. Unlike\ntraditional databases in which older data entries are typically updated with the\nmost recent data point to show the latest state, time-series databases (\u201cTSDB\u201d)\ncontinuously accumulate data points over time. This way, one can draw insights\nfrom the evolution of metrics over time to conclude meaningful insights from the\ndata. Better yet is to predict future events through machine learning models\nbased on historical time-series analysis."),(0,i.kt)(o.Z,{alt:"AAPL stock price over the last 5 years",height:284,src:"/img/blog/2020-11-26/apple.png",title:"Apple\u2019s share price (daily) over the last 5 years: time-series data!",width:650,mdxType:"Screenshot"}),(0,i.kt)("p",null,"Time series databases were successfully adopted for use in financial\napplications (the world QuestDB\u2019s team comes from) where storing and querying\nchanges in stock, price, quantities and transactions over time is\nbusiness-critical. With the rise in the number of connected devices, application\nmonitoring and observability, time series data is proving to be critical in\nnearly all fields."),(0,i.kt)(o.Z,{alt:"Example of time-series data use cases",height:327,src:"/img/blog/2020-11-26/useCases.png",title:"Time-series data use cases",width:650,mdxType:"Screenshot"}),(0,i.kt)("p",null,"As a result, time series has been the fastest growing database category for the\npast two years according to\n",(0,i.kt)("a",{parentName:"p",href:"https://db-engines.com/de/ranking/time+series+dbms"},"DB-engines"),"."),(0,i.kt)(o.Z,{alt:"Chart showing the popularity of time-series databases over the last 2 years - the data is from db-engines.com",height:290,src:"/img/blog/2020-11-26/popularity.png",title:"Popularity by database category",width:650,mdxType:"Screenshot"}),(0,i.kt)("h3",{id:"performance-is-the-pillar-of-a-time-series-database"},"Performance is the pillar of a time-series database"),(0,i.kt)("p",null,"As use cases which generate data suitable for time series analysis are\nincreasing exponentially, so is the amount of raw data itself. This means that\nTSDBs must be designed to handle exceptionally large volumes, specifically,\nperformant ingestion (WRITE operations) is a cornerstone feature."),(0,i.kt)("p",null,"Time-series data is typically found in very demanding enterprise use cases where\nrequirements for ingesting data are usually around a million data points per\nsecond. The ability to deal with multiple sources of data is also paramount."),(0,i.kt)("p",null,"For example, stock market events occurring on a microsecond (and nanosecond)\nfrequency, or thousands of IoT sensors sending atmospheric data continuously\nfrom an offshore oil & gas rig. Most importantly, enterprises expect databases\nto handle bursts of data which are high volumes of data incoming at irregular\nintervals. This is very common in financial markets, with spikes of trading\nvolume occurring after events which are difficult to predict."),(0,i.kt)("p",null,"Once all of the data is stored into a database, most use cases require to query\n(READ operations) this data in real-time. Operations teams will need to see\nrelevant metrics that show the state of application servers as soon as an\nanomaly is found. E-commerce websites need to analyze immense datasets of\nbuyers\u2019 behavior over time to gather new insights and optimize their stock in\nconsequence. A fintech company will want to detect fraud as transactions occur."),(0,i.kt)("h3",{id:"tsdbs-most-important-features-and-trade-offs"},"TSDBs most important features and trade-offs"),(0,i.kt)("p",null,"TSDBs are not optimized for OLTP workloads that typically include lots of\nregular updates and delete operations. Those are better handled by relational\ndatabases such as PostgreSQL, MySQL, SQL Server or Oracle."),(0,i.kt)("p",null,"In contrast, time-series data is mostly an append-only workload with delete\noperations performed in batches on less recent data. Typically, users are\nconcerned the most about the recent data coming in that is being analyzed on the\nfly. We list some of the most interesting features of a time-series database.\nFurther, we summarise how QuestDB addresses those needs."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Downsampling")),(0,i.kt)("p",{parentName:"li"},"Representing the data with a lower frequency. For example, shifting from a\ndaily view to a monthly view. This is typically done on the fly on a dashboard\nand requires very fast aggregation functions to be computed live. In order to\nfacilitate such queries, QuestDB built a native extension to ANSI SQL with the\nfunction ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#examples"},"SAMPLE BY"),". Note: our\n",(0,i.kt)("a",{parentName:"p",href:"/blog/2020/10/19/grafana-tutorial"},"Grafana tutorial")," shows downsampling examples.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Interval search")),(0,i.kt)("p",{parentName:"li"},"Fast retrieving data over arbitrary intervals. For example, zooming into a\nspecific timeframe preceding a monitoring alert to better understand the\nunderlying cause in real-time. QuestDB\u2019s\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/sql/where#symbol-and-string"},"WHERE")," clause for timestamp\nsearch is fast and efficient but requires a designated timestamp.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Time series joins")),(0,i.kt)("p",{parentName:"li"},"Align join time-series data from two different tables, which do not have\nexactly matching timestamps. QuestDB supports\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/sql/join#asof-join"},"ASOF")," joins. QuestDB\u2019s SQL query to\nmatch two tables (\u201cbid\u201d and \u201casks\u201d) with unequal timestamps would look like:"),(0,i.kt)(o.Z,{alt:"Example of an ASOF join query",height:85,src:"/img/blog/2020-11-26/asof.png",title:"Example of ASOF join query between the tables Bid and Ask",width:620,mdxType:"Screenshot"})),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Automated partitioning management")),(0,i.kt)("p",{parentName:"li"},"Time partitions created automatically as data arrives. In QuestDB, data is\nstored in columns and partitioned by time. This makes it possible to access\none specific column for a given time partition instead of lifting the entire\ntable in memory, which is a computationally very intensive operation. We see\nthis as a prerequisite for fast and efficient READS.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Time-series ingestion protocols")),(0,i.kt)("p",{parentName:"li"},"Being able to ingest unstructured time-series data succinctly is a must.\nQuestDB supports the\n",(0,i.kt)("a",{parentName:"p",href:"/blog/2020/07/22/influxdb-lp-on-tcp"},"InfluxDB line protocol")," that is the\nindustry standard for observability use cases, with the ability to create new\ncolumns on the fly without specifying a schema ahead of time.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Most recent first")),(0,i.kt)("p",{parentName:"li"},"With time-series data, the most recent data is often more likely to be\nanalyzed. Databases should be able to pull the latest record very fast,\neasily. QuestDB\u2019s SQL language extension includes\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/sql/latest-on#examples"},"LATEST BY")," to get the most recent\nview of a record instantly. As data is ingested in chronological order,\nQuestDB starts scanning from the bottom and can thus retrieve the data point\nvery quickly."))),(0,i.kt)("h2",{id:"part-2-why-we-set-out-to-build-questdb"},"Part 2: Why we set out to build QuestDB"),(0,i.kt)("h3",{id:"when-it-all-started-7-years-ago"},"When it all started 7 years ago"),(0,i.kt)("p",null,"Our CTO worked in electronic trading, building systems for more than 10 years.\nIn 2013, his boss would not allow him to use the only high-performance database\nsuited to deal with time-series data because of its proprietary nature and\nprice."),(0,i.kt)("p",null,"QuestDB was built with the intention of democratizing the performance that was\nonly available for high-end enterprise applications, and to make the tooling\navailable for every developer around the world leveraging an open source\ndistribution model. Instead of writing a new querying language from scratch,\nQuestDB would facilitate adoption and accessibility via SQL rather than a new\ncomplex proprietary language."),(0,i.kt)("p",null,"We have heard a large number of companies complaining about the performance\nlimitations of open source time-series databases. Most of those re-use existing\nlibraries or are an extension of a well-known database which was not designed to\nprocess time-series data efficiently in the first place."),(0,i.kt)("p",null,"Instead, we chose an alternative route which took more than 7 years of R&D. Our\nvision from day 1 was to challenge the norm and build software that uses new\napproaches and leverages the techniques learned in low-latency trading floors.\nAn important aspect was to study and understand the evolution of hardware to\nbuild database software that could extract more performance from CPUs, memory,\nand modern hard disks."),(0,i.kt)("h3",{id:"questdb-design-and-performance"},"QuestDB design and performance"),(0,i.kt)("p",null,"QuestDB is built-in zero-GC Java and C++, and every single algorithm in the code\nbase has been written from scratch with the goal of maximizing performance."),(0,i.kt)("p",null,"QuestDB\u2019s data model (time-based arrays) differs from the LSM trees or B-trees\nbased storage engines found in InfluxDB or TimescaleDB. It requires less\noverhead and data duplication while maintaining immediate consistency and\npersisting data on disk."),(0,i.kt)("p",null,"This linear data model structure massively optimises ingestion as it allows the\ndatabase to slice data extremely efficiently in small chunks and process it all\nin parallel. QuestDB also saturates the network cards to process messages from\nseveral senders in parallel. Our ingestion is append only, with an order of\ncomplexity O(1); QuestDB does not rely on computively intense indices to reorder\ndata as it hits the database. Out of order ingests are dealt with and re-ordered\nin memory before being persisted to disk."),(0,i.kt)("p",null,"QuestDB\u2019s data layout enables CPUs to access data faster. With respect to\nqueries, our codebase leverages modern CPU architecture with SIMD instructions\nto request that the same operation be performed on multiple data elements in\nparallel. We store data in columns and partition it by time in order to lift the\nminimal amount of data from disk for a given query."),(0,i.kt)(o.Z,{alt:"Architecture of the storage model with column files and time partitions",height:323,src:"/img/blog/2020-11-26/model.png",title:"Data stored in columns and partitioned by time",width:650,mdxType:"Screenshot"}),(0,i.kt)("p",null,"In order to showcase the capabilities of our database, we decided to put\ntogether an ",(0,i.kt)("a",{parentName:"p",href:"https://"},"online demo"),", which features a 1.6 billion rows\ndataset with more than 10 years of NYC taxi and weather data (350GB). The\nhardware powering the demo is a c5.metal instance (AWS) with 24 physical cores\nand 192 GB of memory. The data is stored and accessed from disk, none of the\nresults are cached or pre-calculated. The postmortem of QuestDB\u2019s ShowHN on\nHackerNews can be found\n",(0,i.kt)("a",{parentName:"p",href:"https://dzone.com/articles/we-put-a-sql-database-on-the-internet"},"on DZone"),"."),(0,i.kt)("h3",{id:"questdb-and-its-growing-community"},"QuestDB and its growing community"),(0,i.kt)("p",null,"Pushing database performance higher and higher still while making it easy for\ndevelopers to get started with our product is what motivates us every day. This\nis why we are focused on building a strong community of developers who can\nparticipate and improve the product through our open source distribution model.\nWe hope to see you on our ",(0,i.kt)("a",{parentName:"p",href:"https://slack.questdb.io/"},"Slack")," channel."))}p.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);