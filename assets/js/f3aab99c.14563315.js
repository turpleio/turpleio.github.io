"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[1152],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),p=o,f=d["".concat(u,".").concat(p)]||d[p]||h[p]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},32897:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),i=n(46092),s=["components"],u={title:"Community contribution from Alex Pelagenko improving our HTTP server",author:"Alex Pelagenko",author_title:"QuestDB Contributor",author_url:"https://github.com/ideoma",author_image_url:"https://avatars.githubusercontent.com/ideoma",description:"One of QuestDB\u2019s major contributors, Alex Pelagenko, shares his experience on improving QuestDB\u2019s HTTP server.",image:"/img/blog/2020-11-16/banner.jpg",tags:["community","engineering","architecture"]},l={permalink:"/blog/2020/11/16/http-server-contribution",source:"@site/blog/2020-11-16-http-server-contribution.md",title:"Community contribution from Alex Pelagenko improving our HTTP server",description:"One of QuestDB\u2019s major contributors, Alex Pelagenko, shares his experience on improving QuestDB\u2019s HTTP server.",date:"2020-11-16T00:00:00.000Z",formattedDate:"November 16, 2020",tags:[{label:"community",permalink:"/blog/tags/community"},{label:"engineering",permalink:"/blog/tags/engineering"},{label:"architecture",permalink:"/blog/tags/architecture"}],readingTime:2.675,truncated:!0,prevItem:{title:"What is time-series data, and why are we building a time-series database (TSDB)?",permalink:"/blog/2020/11/26/why-timeseries-data"},nextItem:{title:"Authentication for InfluxDB line protocol",permalink:"/blog/2020/10/20/authentication-for-influx-line-protocol"}},c=[{value:"The HTTP server for QuestDB",id:"the-http-server-for-questdb",children:[]},{value:"How I added queuing to QuestDB&#39;s HTTP stack",id:"how-i-added-queuing-to-questdbs-http-stack",children:[]}],h={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{alt:"Close-up on a dark computer keyboard.",height:391,src:"/img/blog/2020-11-26/banner.jpg",width:650,mdxType:"Banner"}," ","Photo by",(0,a.kt)("a",{href:"https://unsplash.com/photos/1osIUArK5oA"},"Florian Krumm")," on",(0,a.kt)("a",{href:"https://unsplash.com"},"Unsplash")," "),(0,a.kt)("p",null,"I have recently made a sizable contribution to QuestDB\u2019s code and wanted to\nshare my experience and feedback while it is still fresh in my head. I am not a\ncomplete outsider for the project and know Vlad personally but other than that\nit was voluntary to add a few lines of code to a project I like."),(0,a.kt)("h2",{id:"the-http-server-for-questdb"},"The HTTP server for QuestDB"),(0,a.kt)("p",null,"QuestDB has a custom HTTP stack that uses non-blocking socket IO via a thin\nlayer of JNI OS abstraction. Non-blocking IO is handled via two state machines.\nOne for inbound traffic, which includes a series of parsing state machines. The\nother for outbound traffic. We focus on the outbound traffic state machine,\nwhich has to deal with two types of interruptions: slow socket on one side and\ndata availability on the other. While slow socket interruption was already dealt\nwith, the data availability interruption had been handled in a very trivial\nmanner. When data was unavailable, the HTTP stack would report an immediate\nerror and trigger a send-to-socket state machine."),(0,a.kt)("p",null,"Data availability interruptions are due to QuestDB\u2019s single writer model. A\ntable will be locked while the HTTP server is dealing with a CSV import request.\nA request to alter the locked table will bounce back with an error. Why is this\ninteresting? It is a difficult problem of coordination amongst threads while at\nthe same time keeping the whole stack non-blocking."),(0,a.kt)("h2",{id:"how-i-added-queuing-to-questdbs-http-stack"},"How I added queuing to QuestDB's HTTP stack"),(0,a.kt)("p",null,"The first hurdle was to understand the stack, which is hard to follow at first\nglance. Control is passed around via both conditional statements and exception\nmechanisms. The thread messaging stack is also unusual. The API is\nnon-blocking - the thread must find another task if the outbound queue is full\nor the inbound queue is empty."),(0,a.kt)("p",null,"Instead of rejecting requests due to data availability errors, I added a queuing\nsystem that catches the state of these requests in a priority queue. This queue\nis then processed by idle threads (idle because of IO interruptions) and retried\nat exponentially increasing intervals. For example the first retry will happen\nin 2ms then in 4ms, 8ms, 16ms \u2026 512ms, 1s, 1s, 1s. The retry interval is a\nconfiguration parameter. Following this addition, operations are queued on the\nserver, meaning that the user does not have to deal with errors or attempt to do\nthis operation again. This piece of code processes priority queue:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"private boolean sendToOutQueue() {\n  boolean useful = false;\n   final long now = clock.getTicks();\n   while (nextRerun.size() > 0) {\n       Retry next = nextRerun.peek();\n       if (next.getAttemptDetails().nextRunTimestamp <= now) {\n           useful = true;\n           Retry retry = nextRerun.poll();\n           if (!sendToOutQueue(retry)) {\n               nextRerun.add(retry);\n               return true;\n           }\n       }\n       else {\n           // All reruns are in the future.\n           return useful;\n       }\n   }\n   return useful;\n}\n")),(0,a.kt)("p",null,"QuestDB\u2019s team was very patient explaining the different bits of the HTTP stack\nand guiding me to figure out how best to solve the multi writing problem. They\nwere also careful not to dampen my enthusiasm with the pull request feedback."))}d.isMDXComponent=!0},86010:function(e,t,n){function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);