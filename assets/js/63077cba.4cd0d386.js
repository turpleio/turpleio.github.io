"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5894],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(l,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27690:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=n(83117),i=n(80102),o=(n(67294),n(3905)),r=n(46092),s=["components"],l={title:"SQL Extensions for Time Series Data in QuestDB - Part II",author:"Kovid Rathee",author_title:"Guest post",author_url:"https://kovidrathee.medium.com/",author_image_url:"https://miro.medium.com/fit/c/96/96/0*_CwYR2OmNap47tQO.jpg",description:"SQL extensions for time series data in QuestDB part II",keywords:["tutorial","sql","questdb","timeseries"],image:"/img/blog/2022-11-23/banner.png",tags:["tutorial","sql","timeseries","questdb"]},p={permalink:"/blog/2022/11/23/sql-extensions-time-series-data-questdb-part-ii",source:"@site/blog/2022-11-23-sql-extensions-time-series-data-questdb-part-ii.md",title:"SQL Extensions for Time Series Data in QuestDB - Part II",description:"SQL extensions for time series data in QuestDB part II",date:"2022-11-23T00:00:00.000Z",formattedDate:"November 23, 2022",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"sql",permalink:"/blog/tags/sql"},{label:"timeseries",permalink:"/blog/tags/timeseries"},{label:"questdb",permalink:"/blog/tags/questdb"}],readingTime:8.305,truncated:!0,prevItem:{title:"QuestDB 6.6.1 - Dynamic Commits",permalink:"/blog/2022/11/25/questdb-6.6.1-dynamic-commits"},nextItem:{title:"QuestDB 6.5.5 Release",permalink:"/blog/2022/11/14/questdb-release-6.5.5"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"Setup",id:"setup",children:[{value:"Import sample data",id:"import-sample-data",children:[]},{value:"Create an ordered timestamp column",id:"create-an-ordered-timestamp-column",children:[]}]},{value:"Understanding the basics of <code>SAMPLE BY</code>",id:"understanding-the-basics-of-sample-by",children:[{value:"Hourly count of trips",id:"hourly-count-of-trips",children:[]},{value:"Three-hourly holistic summary of trips",id:"three-hourly-holistic-summary-of-trips",children:[]},{value:"Weekly summary of trips",id:"weekly-summary-of-trips",children:[]}]},{value:"Dealing with missing data",id:"dealing-with-missing-data",children:[]},{value:"Working with timezones and offsets",id:"working-with-timezones-and-offsets",children:[{value:"Aligning sample calculation to another timezone",id:"aligning-sample-calculation-to-another-timezone",children:[]},{value:"Aligning sample calculation with offsets",id:"aligning-sample-calculation-with-offsets",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],m={toc:u};function d(e){var t=e.components,l=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This post comes from ",(0,o.kt)("a",{parentName:"p",href:"https://kovidrathee.medium.com/"},"Kovid Rathee"),", who,\nfollowing up on his\n",(0,o.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/sql-extensions-for-time-series-data-in-questdb-f6b53acf3213"},"first tutorial"),",\nhas put together another tutorial on SQL extensions for time series data in\nQuestDB."),(0,o.kt)(r.Z,{alt:"A screenshot of the QuestDB Web Console with a SAMPLE BY query",height:467,src:"/img/blog/2022-11-23/banner.png",width:650,mdxType:"Banner"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This tutorial follows up on our previous one, where we introduced\n",(0,o.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/sql-extensions-for-time-series-data-in-questdb-f6b53acf3213"},"SQL extensions in QuestDB"),"\nthat make time-series analysis easier. Today, you will learn about the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by/"},(0,o.kt)("inlineCode",{parentName:"a"},"SAMPLE BY")," extension")," in detail, which will\nenable you to work with time-series data efficiently because of its simplicity\nand flexibility."),(0,o.kt)("p",null,"To get started with this tutorial, you should know that ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," is a SQL\nextension in QuestDB that helps you group or bucket time-series data based on\nthe ",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/designated-timestamp"},"designated timestamp"),". This removes the\nneed for lengthy ",(0,o.kt)("inlineCode",{parentName:"p"},"CASE WHEN")," statements and ",(0,o.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clauses. Not only that,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension enables you to quickly deal with many other\ndata-related issues, such as\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#fill-options"},"missing data"),",\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#time-zone"},"incorrect timezones"),", and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#with-offset"},"offsets"),"."),(0,o.kt)("p",null,"This tutorial assumes you have an up-and-running QuestDB instance ready for use.\nLet's dive straight into it."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("h3",{id:"import-sample-data"},"Import sample data"),(0,o.kt)("p",null,"Similar to the previous tutorial, we'll use\n",(0,o.kt)("a",{parentName:"p",href:"https://s3-eu-west-1.amazonaws.com/questdb.io/datasets/grafana_tutorial_dataset.tar.gz"},"the NYC taxi rides data for February 2018"),".\nYou can use the following script that utilizes the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/importing-data-rest/"},"HTTP REST API")," to upload data into QuestDB:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl https://s3-eu-west-1.amazonaws.com/questdb.io/datasets/grafana_tutorial_dataset.tar.gz > grafana_data.tar.gz\ntar -xvf grafana_data.tar.gz\ncurl -F data=@taxi_trips_feb_2018.csv http://localhost:9000/imp\ncurl -F data=@weather.csv http://localhost:9000/imp\n")),(0,o.kt)("p",null,"Alternatively, you can use\n",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/web-console#import"},"the import functionality in the QuestDB console"),",\nas shown in the image below:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(75893).Z})),(0,o.kt)("h3",{id:"create-an-ordered-timestamp-column"},"Create an ordered timestamp column"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," keyword mandates the use of the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/designated-timestamp/"},"designated timestamp")," column to enable\nfurther analysis. Therefore, you'll have to elect the ",(0,o.kt)("inlineCode",{parentName:"p"},"pickup_datetime")," column\nas the designated timestamp in a new table called ",(0,o.kt)("inlineCode",{parentName:"p"},"taxi_trips")," with the script\nbelow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE taxi_trips AS (\n  SELECT *\n    FROM 'taxi_trips_feb_2018.csv'\n   ORDER BY pickup_datetime\n) TIMESTAMP(pickup_datetime)\nPARTITION BY MONTH;\n")),(0,o.kt)("p",null,"By converting the ",(0,o.kt)("inlineCode",{parentName:"p"},"pickup_datetime")," column to ",(0,o.kt)("inlineCode",{parentName:"p"},"timestamp"),", you are allowing\nQuestDB to use it as the table's\n",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/designated-timestamp/"},"designated timestamp"),". Using this\ndesignated timestamp column, QuestDB is able to index the table to run\ntime-based queries more efficiently. If it all goes well, you should see the\nfollowing data after running a ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT *")," query on the ",(0,o.kt)("inlineCode",{parentName:"p"},"taxi_trips")," table:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(215).Z})),(0,o.kt)("h2",{id:"understanding-the-basics-of-sample-by"},"Understanding the basics of ",(0,o.kt)("inlineCode",{parentName:"h2"},"SAMPLE BY")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension allows you to create groups and buckets of data based\non time ranges. This is especially valuable for time-series data as you can\ncalculate frequently used aggregates with extreme simplicity. ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," offers\nyou the ability to summarize or aggregate data from very fine to very coarse\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#sample-units"},"units of time"),", i.e., from\nmicroseconds to months and everything in between (milliseconds, seconds,\nminutes, hours, and days). You can also derive other units of time, such as a\nweek, fortnight, and year from the ones provided out of the box."),(0,o.kt)("p",null,"Let's look at some examples to understand how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," in different\nscenarios."),(0,o.kt)("h3",{id:"hourly-count-of-trips"},"Hourly count of trips"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," keyword with the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#sample-units"},"sample unit")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"h")," to get an\nhour-by-hour count of trips for the whole duration of the data set. Running the\nfollowing query, you'll get results in the console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips\nFROM\n  'taxi_trips' SAMPLE BY 1h;\n")),(0,o.kt)("p",null,"There are two ways you can read your data in the QuestDB console: using the\ngrid, which has a tabular form factor, or using a chart, where you can draw up a\nline, bar, or an area chart to\n",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/web-console#visualizing-results"},"visualize your data"),". Here's an\nexample of a bar chart drawn from the above query:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(59276).Z})),(0,o.kt)("h3",{id:"three-hourly-holistic-summary-of-trips"},"Three-hourly holistic summary of trips"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension allows you to group data by any arbitrary number of\nsample units. In the following example, you'll see that the query is calculating\na three-hourly summary of trips with multiple aggregate functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips,\n  SUM(passenger_count) total_passengers,\n  ROUND(AVG(trip_distance), 2) avg_trip_distance,\n  ROUND(SUM(fare_amount)) total_fare_amount,\n  ROUND(SUM(tip_amount)) total_tip_amount,\n  ROUND(SUM(fare_amount + tip_amount)) total_earnings\nFROM\n  'taxi_trips' SAMPLE BY 3h;\n")),(0,o.kt)("p",null,"You can view the output of the query in the following grid on the QuestDB\nconsole:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(27784).Z})),(0,o.kt)("h3",{id:"weekly-summary-of-trips"},"Weekly summary of trips"),(0,o.kt)("p",null,"As mentioned above, although there's no sample unit for a week, a fortnight, or\na year, you can derive them simply by utilizing the built-in sample units. If\nyou want to sample the data by a week, use ",(0,o.kt)("inlineCode",{parentName:"p"},"7d")," as the sampling time, as shown\nin the query below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips,\n  SUM(passenger_count) total_passengers,\n  ROUND(AVG(trip_distance), 2) avg_trip_distance,\n  ROUND(SUM(fare_amount)) total_fare_amount,\n  ROUND(SUM(tip_amount)) total_tip_amount,\n  ROUND(SUM(fare_amount + tip_amount)) total_earnings\nFROM\n  'taxi_trips'\nWHERE\n  pickup_datetime BETWEEN '2018-02-01' AND '2018-02-28' SAMPLE BY 7d;\n")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(77065).Z})),(0,o.kt)("h2",{id:"dealing-with-missing-data"},"Dealing with missing data"),(0,o.kt)("p",null,"If you've worked a fair bit with data, you already know that data isn't always\nin a pristine state. One of the most common issues, especially with time-series\ndata, is discontinuity, i.e., scenarios where data is missing for specific time\nperiods. You can quickly identify and deal with missing data using the advanced\nfunctionality of the ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension."),(0,o.kt)("p",null,"QuestDB offers an easy way to generate and fill in missing data with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," clause. Take the following example: I've deliberately removed data\nfrom 4 am to 5 am for the 1st of February 2018. Notice how the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#fill-options"},(0,o.kt)("inlineCode",{parentName:"a"},"FILL")," keyword"),", when used in\nconjunction with the ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension, can generate a row for the hour\nstarting at 4 am and fill it with data generated from linear interpolation of\nthe 2 surrounding points:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips,\n  SUM(passenger_count) total_passengers,\n  ROUND(AVG(trip_distance), 2) avg_trip_distance,\n  ROUND(SUM(fare_amount)) total_fare_amount,\n  ROUND(SUM(tip_amount)) total_tip_amount,\n  ROUND(SUM(fare_amount + tip_amount)) total_earnings\nFROM\n  'taxi_trips'\nWHERE\n  pickup_datetime NOT BETWEEN '2018-02-01T04:00:00' AND '2018-02-01T04:59:59' SAMPLE BY 1h FILL(LINEAR);\n")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(60259).Z})),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#fill-options"},(0,o.kt)("inlineCode",{parentName:"a"},"FILL"))," keyword demands a\n",(0,o.kt)("inlineCode",{parentName:"p"},"fillOption")," from the following:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"th"},"fillOption")),(0,o.kt)("th",{parentName:"tr",align:null},"Usage scenario"),(0,o.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"NONE"),(0,o.kt)("td",{parentName:"tr",align:null},"When you don't want to populate missing data, and leave it as is"),(0,o.kt)("td",{parentName:"tr",align:null},"This is the default ",(0,o.kt)("inlineCode",{parentName:"td"},"fillOption"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"NULL"),(0,o.kt)("td",{parentName:"tr",align:null},"When you want to generate rows for missing time periods, but leave all the values as NULLs"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PREV"),(0,o.kt)("td",{parentName:"tr",align:null},"When you want to copy the values of the previous row from the summarized data"),(0,o.kt)("td",{parentName:"tr",align:null},"This is useful when you expect the numbers to be similar to the preceding time period")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"LINEAR"),(0,o.kt)("td",{parentName:"tr",align:null},"When you want to normalize the missing values, you can take the average of the immediately preceding and following row"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"CONST or x"),(0,o.kt)("td",{parentName:"tr",align:null},"When you want to hardcode values where data is missing"),(0,o.kt)("td",{parentName:"tr",align:null},"FILL (column_1, column_2, column_3, ...)")))),(0,o.kt)("p",null,"Here's another example of hardcoding values using the FILL(x) ",(0,o.kt)("inlineCode",{parentName:"p"},"fillOption"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(5117).Z})),(0,o.kt)("p",null,"In the example above, we've used an inline ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE")," clause to emulate missing\ndata with the help of the ",(0,o.kt)("inlineCode",{parentName:"p"},"NOT BETWEEN")," keyword. Alternatively, you can create a\nseparate table with missing trips using the same idea, as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE 'taxi_trips_missing' AS (\n  SELECT *\n  FROM 'taxi_trips'\n  WHERE\n    pickup_datetime NOT BETWEEN '2018-02-01T04:00:00' AND '2018-02-01T04:59:59'\n);\n")),(0,o.kt)("h2",{id:"working-with-timezones-and-offsets"},"Working with timezones and offsets"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension also enables you to change timezones and add or\nsubtract offsets from your timestamp columns to adjust for any issues you might\nencounter when dealing with different source systems, especially in different\ngeographic areas. It is important to note that, by default, QuestDB aligns its\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#sample-calculation"},"sample calculation")," based on\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"FIRST OBSERVATION"),", as shown in the example below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips,\n  SUM(passenger_count) total_passengers,\n  ROUND(AVG(trip_distance), 2) avg_trip_distance,\n  ROUND(SUM(fare_amount)) total_fare_amount,\n  ROUND(SUM(tip_amount)) total_tip_amount,\n  ROUND(SUM(fare_amount + tip_amount)) total_earnings\nFROM\n  'taxi_trips'\nWHERE\n  pickup_datetime BETWEEN '2018-02-01T13:35:52' AND '2018-02-28' SAMPLE BY 1d;\n")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(26305).Z})),(0,o.kt)("p",null,"Note that now the ",(0,o.kt)("inlineCode",{parentName:"p"},"1d")," sample calculation starts at ",(0,o.kt)("inlineCode",{parentName:"p"},"13:35:52")," and ends at\n",(0,o.kt)("inlineCode",{parentName:"p"},"13:35:51")," the next day. Apart from the option demonstrated above, there are two\nother ways to align your sample calculations - to the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#time-zone"},"calendar time zone"),", and to\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#with-offset"},"calendar with offset"),"."),(0,o.kt)("p",null,"Let's take a look at the other two alignment methods."),(0,o.kt)("h3",{id:"aligning-sample-calculation-to-another-timezone"},"Aligning sample calculation to another timezone"),(0,o.kt)("p",null,"When moving data across systems, pipelines, and warehouses, you can encounter\nissues with time zones. For the sake of demonstration, let's assume that you're\nworking in New York City, but you've identified that the timestamps of the data\nset you've loaded into the database are in Australian Eastern Time (instead of\nNew York's EST). Traditionally, this could lead to extra conversion work to\nensure that this new data is comparable to the rest of your data in EST."),(0,o.kt)("p",null,"QuestDB allows you to easily fix this issue by aligning your data to another\ntimezone using the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#time-zone"},(0,o.kt)("inlineCode",{parentName:"a"},"ALIGN TO CALENDAR TIME ZONE")," option"),"\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension. In the example shown below, you can see how an\n",(0,o.kt)("inlineCode",{parentName:"p"},"ALIGN TO CALENDAR TIME ZONE ('AEST')")," has aligned the ",(0,o.kt)("inlineCode",{parentName:"p"},"pickup_datetime"),", i.e.,\nthe designated timestamp column to the AEST timezone for Melbourne."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips,\n  SUM(passenger_count) total_passengers,\n  ROUND(AVG(trip_distance), 2) avg_trip_distance,\n  ROUND(SUM(fare_amount)) total_fare_amount,\n  ROUND(SUM(tip_amount)) total_tip_amount,\n  ROUND(SUM(fare_amount + tip_amount)) total_earnings\nFROM\n  'taxi_trips' SAMPLE BY 3h ALIGN TO CALENDAR TIME ZONE ('AEST');\n")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(72518).Z})),(0,o.kt)("h3",{id:"aligning-sample-calculation-with-offsets"},"Aligning sample calculation with offsets"),(0,o.kt)("p",null,"Similar to the previous example, you can also align the sample calculation by\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by#with-offset"},"offsetting the designated timestamp"),"\ncolumn manually by any ",(0,o.kt)("inlineCode",{parentName:"p"},"hh:mm")," value between -23:59 to 23:59. In the following\nexample, we're offsetting the sample calculation by -5:30, i.e., negative five\nhours and thirty minutes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  pickup_datetime,\n  COUNT() total_trips,\n  SUM(passenger_count) total_passengers,\n  ROUND(AVG(trip_distance), 2) avg_trip_distance,\n  ROUND(SUM(fare_amount)) total_fare_amount,\n  ROUND(SUM(tip_amount)) total_tip_amount,\n  ROUND(SUM(fare_amount + tip_amount)) total_earnings\nFROM\n  'taxi_trips' SAMPLE BY 3h ALIGN TO CALENDAR WITH OFFSET '-05:30';\n")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(92664).Z})),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"In this tutorial, you learned how to exploit the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/sample-by/"},(0,o.kt)("inlineCode",{parentName:"a"},"SAMPLE BY")," extension")," in QuestDB to work\nefficiently with time-series data, especially in aggregated form. In addition,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY")," extension also allows you to fix common problems with\ntime-series data attributable to complex data pipelines, disparate source\nsystems in different geographical areas, software bugs, etc. All in all, SQL\nextensions in QuestDB, like ",(0,o.kt)("inlineCode",{parentName:"p"},"SAMPLE BY"),", provide a significant advantage when\nworking with time-series data by enabling you to achieve more in fewer lines of\nSQL."))}d.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}n.d(t,{Z:function(){return i}})},92664:function(e,t,n){t.Z=n.p+"assets/images/3xyC6kt-9f6866625dd1890af257ec810e09177f.png"},60259:function(e,t,n){t.Z=n.p+"assets/images/8hD7Lmw-0d5a4a5392ecfc51f6b6f8ad2d690e8b.png"},75893:function(e,t,n){t.Z=n.p+"assets/images/EWniDQq-66f4a0c497b20788bee38b5eb061d9ca.png"},59276:function(e,t,n){t.Z=n.p+"assets/images/JHBiCI3-3b363068924770998c826bdf96b12b2c.png"},27784:function(e,t,n){t.Z=n.p+"assets/images/NG2sDIV-aa63c96e57326f99f45e9575524934c1.png"},215:function(e,t,n){t.Z=n.p+"assets/images/QwI0YVe-6028484a8d2aa5f338f04f0136efd9c6.png"},26305:function(e,t,n){t.Z=n.p+"assets/images/U9m6k6s-07c174970a6908322262f9d025edd49a.png"},77065:function(e,t,n){t.Z=n.p+"assets/images/f5lVlQL-0d7432f46f2803cf492b0ef30f860b32.png"},5117:function(e,t,n){t.Z=n.p+"assets/images/gN0LO6g-af0768088cb4bdda1ab7bb08d257d7d9.png"},72518:function(e,t,n){t.Z=n.p+"assets/images/szB7CMD-656555952cd91e7f8ac38ce864b506e6.png"}}]);