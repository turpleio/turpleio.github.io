"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[3559],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63264:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),i=n(46092),s=["components"],l={title:"QuestDB version 6.0 alpha",author:"Brian Smith",author_title:"QuestDB Team",author_url:"https://github.com/bsmth",author_image_url:"https://avatars.githubusercontent.com/bsmth",description:"An alpha version for QuestDB version 6.0 is available now to test with highlights such as out-of-order support, improved InfluxDB Line Protocol ingestion and multiple fixes and improvements",keywords:["postgres","grafana","timeseries","database"],image:"/img/blog/2021-04-20/og.png",tags:["release","engineering","docker"]},u={permalink:"/blog/2021/04/20/questdb-release-6-0-alpha",source:"@site/blog/2021-04-20-questdb-release-6-0-alpha.md",title:"QuestDB version 6.0 alpha",description:"An alpha version for QuestDB version 6.0 is available now to test with highlights such as out-of-order support, improved InfluxDB Line Protocol ingestion and multiple fixes and improvements",date:"2021-04-20T00:00:00.000Z",formattedDate:"April 20, 2021",tags:[{label:"release",permalink:"/blog/tags/release"},{label:"engineering",permalink:"/blog/tags/engineering"},{label:"docker",permalink:"/blog/tags/docker"}],readingTime:3.065,truncated:!0,prevItem:{title:"How we achieved write speeds of 1.4 million rows per second",permalink:"/blog/2021/05/10/questdb-release-6-0-tsbs-benchmark"},nextItem:{title:"Streaming on-chain Ethereum data to QuestDB",permalink:"/blog/2021/04/12/stream-ethereum-data"}},p=[{value:"QuestDB 6.0 alpha",id:"questdb-60-alpha",children:[]},{value:"New features",id:"new-features",children:[]},{value:"Bug fixes",id:"bug-fixes",children:[]},{value:"How do I run it?",id:"how-do-i-run-it",children:[]},{value:"Notes on out-of-order data ingestion",id:"notes-on-out-of-order-data-ingestion",children:[]},{value:"Benchmarking QuestDB versus InfluxDB, ClickHouse and TimescaleDB",id:"benchmarking-questdb-versus-influxdb-clickhouse-and-timescaledb",children:[]}],c={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{alt:"Announcement for QuestDB 6.0 alpha with out-of-order inserts and compatibility with the Time Series Benchmarking Suite",height:362,src:"/img/blog/2021-04-20/og.png",width:650,mdxType:"Banner"}),(0,a.kt)("p",null,"We've just published an alpha version for the upcoming 6.0 major release and it\nincludes long-awaited support for ingesting out-of-order records on-the-fly, a\ncomplete overhaul of the InfluxDB Line Protocol subsystem, and multiple fixes\nwhich provide stability improvements. Here's a roundup of changes that have just\nlanded in the latest and greatest version!"),(0,a.kt)("h2",{id:"questdb-60-alpha"},"QuestDB 6.0 alpha"),(0,a.kt)("p",null,"QuestDB relies on an append-only model and in versions prior to 6.0, we reject\nrecords that appear (chronologically) out-of-order by timestamp at the database.\nIn real-world applications, data doesn\u2019t follow this rule because of network\njitter, latency or even clock synchronization issues. Out-of-order (O3) support\nadds flexibility to the system and provides compatibility with the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/timescale/tsbs"},"Time Series Benchmark Suite")," (TSBS) which is\nused to reliably measure and compare the performance of time series databases."),(0,a.kt)("p",null,"Also included with this version is a massive internal revision of InfluxDB Line\nProtocol (ILP) ingestion which brings significant performance improvements,\nalongside multiple UI fixes for the Web Console and SQL features."),(0,a.kt)("h2",{id:"new-features"},"New features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"O3 support")," for ingestion of records which are out-of-order by timestamp"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ARM64 support")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fileName")," parameter can be specified for the ",(0,a.kt)("inlineCode",{parentName:"li"},"/exp")," endpoint for CSV exports"),(0,a.kt)("li",{parentName:"ul"},"PostgreSQL JDBC driver now supports ",(0,a.kt)("inlineCode",{parentName:"li"},"getSQLKeywords")," method"),(0,a.kt)("li",{parentName:"ul"},"UI improvements for results with only one column"),(0,a.kt)("li",{parentName:"ul"},"Notification element does not obscure returned rows")),(0,a.kt)("h2",{id:"bug-fixes"},"Bug fixes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LIMIT -1")," returns last row as expected"),(0,a.kt)("li",{parentName:"ul"},"Epoch timestamps supported in CSV imports"),(0,a.kt)("li",{parentName:"ul"},"Behavior of ",(0,a.kt)("inlineCode",{parentName:"li"},"ORDER BY")," query returns correct values on non-cached symbol types"),(0,a.kt)("li",{parentName:"ul"},"Column names allow the use of minus ",(0,a.kt)("inlineCode",{parentName:"li"},"-")," and underscore ",(0,a.kt)("inlineCode",{parentName:"li"},"_")," characters for\ncompatibility with InfluxDB Line Protocol messages")),(0,a.kt)("h2",{id:"how-do-i-run-it"},"How do I run it?"),(0,a.kt)("p",null,"The alpha release has been published to\n",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/questdb/questdb/tags?page=1&ordering=last_updated"},"Docker Hub"),"\nand can be pulled with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull questdb/questdb:6.0.0-alpha-linux-amd64\n")),(0,a.kt)("p",null,"The image can then be run with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 9000:9000 -p 8812:8812 -p 9009:9009 \\\n  questdb/questdb:6.0.0-alpha-linux-amd64\n")),(0,a.kt)("h2",{id:"notes-on-out-of-order-data-ingestion"},"Notes on out-of-order data ingestion"),(0,a.kt)("p",null,"This feature is ",(0,a.kt)("strong",{parentName:"p"},"enabled by default")," for ingestion over InfluxDB Line\nProtocol, PostgreSQL wire protocol and bulk imports via REST API. One\nrequirement for the use of this feature is that tables must have a partitioning\nstrategy employed. New tables created over ILP have a partitioning strategy per\n",(0,a.kt)("inlineCode",{parentName:"p"},"DAY")," applied by default. For more information with SQL examples showing how to\nemploy a partitioning strategy, see the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/sql/create-table#create-table"},"CREATE TABLE documentation"),"."),(0,a.kt)("p",null,"Additional server configuration parameters may be applied for optimizing\nout-of-order ingestion over InfluxDB Line Protocol. For more details on these\nvalues, see the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/questdb/questdb/blob/7d9c76f82a94d9c872b5cb7f30b6f18b95b3e8e4/core/src/main/resources/io/questdb/site/conf/server.conf#L341-L350"},"server.conf description"),",\nor reach out with any questions in the meantime. A supplementary guide will\nfollow soon which describes why and when to apply these settings to help with\nfine-tuning for your use case."),(0,a.kt)("h2",{id:"benchmarking-questdb-versus-influxdb-clickhouse-and-timescaledb"},"Benchmarking QuestDB versus InfluxDB, ClickHouse and TimescaleDB"),(0,a.kt)("p",null,"Following the release of this alpha version, we will be running the TSBS\nbenchmark suite which allows us to compare the performance of QuestDB on\ningestion rates for high-throughput scenarios. We are in the process of\ncontributing a pull request into the official TSBS repository so users may\ndirectly clone the suite and run the benchmark against QuestDB and other systems\nfor comparison."),(0,a.kt)("p",null,"We\u2019re eagerly awaiting feedback on performance or any issues in this release,\nfeel free to reach out and let us know how the alpha is running if you end up\ntesting. You can let us know how we're doing or just come by and say hello\n",(0,a.kt)("a",{parentName:"p",href:"https://"},"in our Slack Community")," or browse the repository\n",(0,a.kt)("a",{parentName:"p",href:"https://"},"on GitHub"),"."))}d.isMDXComponent=!0},86010:function(e,t,n){function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);