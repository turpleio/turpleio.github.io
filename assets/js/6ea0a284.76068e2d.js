"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5251],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return k}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},s=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=p(t),k=l,N=s["".concat(d,".").concat(k)]||s[k]||u[k]||i;return t?a.createElement(N,r(r({ref:n},m),{},{components:t})):a.createElement(N,r({ref:n},m))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=s;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},92373:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var a=t(83117),l=t(80102),i=(t(67294),t(3905)),r=["components"],o={title:"Random value generator",sidebar_label:"Random value generator",description:"Random value generator function reference documentation."},d={unversionedId:"reference/function/random-value-generator",id:"reference/function/random-value-generator",isDocsHomePage:!1,title:"Random value generator",description:"Random value generator function reference documentation.",source:"@site/docs/reference/function/random-value-generator.md",sourceDirName:"reference/function",slug:"/reference/function/random-value-generator",permalink:"/docs/reference/function/random-value-generator",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/function/random-value-generator.md",version:"current",sidebar_label:"Random value generator",frontMatter:{title:"Random value generator",sidebar_label:"Random value generator",description:"Random value generator function reference documentation."},sidebar:"docs",previous:{title:"Numeric functions",permalink:"/docs/reference/function/numeric"},next:{title:"Row generator",permalink:"/docs/reference/function/row-generator"}},p=[{value:"Usage",id:"usage",children:[]},{value:"Generating sequences",id:"generating-sequences",children:[]},{value:"rnd_boolean",id:"rnd_boolean",children:[]},{value:"rnd_byte",id:"rnd_byte",children:[]},{value:"rnd_short",id:"rnd_short",children:[]},{value:"rnd_int",id:"rnd_int",children:[]},{value:"rnd_long",id:"rnd_long",children:[]},{value:"rnd_long256",id:"rnd_long256",children:[]},{value:"rnd_float",id:"rnd_float",children:[]},{value:"rnd_double",id:"rnd_double",children:[]},{value:"rnd_date()",id:"rnd_date",children:[]},{value:"rnd_timestamp()",id:"rnd_timestamp",children:[]},{value:"rnd_char",id:"rnd_char",children:[]},{value:"rnd_symbol",id:"rnd_symbol",children:[]},{value:"rnd_str",id:"rnd_str",children:[]},{value:"rnd_bin",id:"rnd_bin",children:[]}],m={toc:p};function u(e){var n=e.components,t=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The following functions have been created to help with our test suite. They are\nalso useful for users testing QuestDB on specific workloads in order to quickly\ngenerate large test datasets that mimic the structure of their actual data."),(0,i.kt)("p",null,"Values can be generated either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pseudo randomly"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/reference/function/row-generator#long_sequence"},"Deterministically"),"\nwhen specifying a ",(0,i.kt)("inlineCode",{parentName:"li"},"seed"))),(0,i.kt)("p",null,"QuestDB supports the following random generation functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_boolean"},"rnd_boolean")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_byte"},"rnd_byte")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_short"},"rnd_short")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_int"},"rnd_int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_long"},"rnd_long")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_long256"},"rnd_long256")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_float"},"rnd_float")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_double"},"rnd_double")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_date"},"rnd_date")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_timestamp"},"rnd_timestamp")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_char"},"rnd_char")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_symbol"},"rnd_symbol")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_str"},"rnd_str")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#rnd_bin"},"rnd_bin"))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Random functions should be used for populating test tables only. They do not\nhold values in memory and calculations should not be performed at the same time\nas the random numbers are generated."),(0,i.kt)("p",null,"For example, running\n",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT round(a,2), a FROM (SELECT rnd_double() a FROM long_sequence(10));")," is\nbad practice and will return inconsistent results."),(0,i.kt)("p",null,"A better approach would be to populate a table and then run the query. So for\nexample"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"create")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE TABLE test(val double);")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"populate")," -\n",(0,i.kt)("inlineCode",{parentName:"li"},"INSERT INTO test SELECT * FROM (SELECT rnd_double() FROM long_sequence(10));")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"query")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"SELECT round(val,2) FROM test;"))),(0,i.kt)("h2",{id:"generating-sequences"},"Generating sequences"),(0,i.kt)("p",null,"This page describes the functions to generate values. To generate sequences of\nvalues, please refer the page about\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/function/row-generator"},"row generators"),"."),(0,i.kt)("h2",{id:"rnd_boolean"},"rnd_boolean"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rnd_boolean()")," - generates a random ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," value, either ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),",\nboth having equal probability."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random boolean"',title:'"Random','boolean"':!0},"SELECT\n    value a,\n    count() b\nFROM (SELECT rnd_boolean() value FROM long_sequence(100));\n")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"a"),(0,i.kt)("th",{parentName:"tr",align:null},"b"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"47")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"53")))),(0,i.kt)("h2",{id:"rnd_byte"},"rnd_byte"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_byte()")," - returns a random integer which can take any value between ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"\nand ",(0,i.kt)("inlineCode",{parentName:"li"},"127"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_byte(min, max)")," - generates byte values in a specific range (for example\nonly positive, or between 1 and 10).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min"),": is a ",(0,i.kt)("inlineCode",{parentName:"li"},"byte")," representing the lowest possible generated value\n(inclusive)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max"),": is a ",(0,i.kt)("inlineCode",{parentName:"li"},"byte")," representing the highest possible generated value\n(inclusive).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"byte"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random byte"',title:'"Random','byte"':!0},"SELECT rnd_byte() FROM long_sequence(5);\nSELECT rnd_byte(-1,1) FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"122,34,17,83,24\n0,1,-1,-1,0\n")),(0,i.kt)("h2",{id:"rnd_short"},"rnd_short"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_short()")," - returns a random integer which can take any value between\n",(0,i.kt)("inlineCode",{parentName:"li"},"-32768")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"32767"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_short(min, max)")," - returns short values in a specific range (for example\nonly positive, or between 1 and 10). Supplying ",(0,i.kt)("inlineCode",{parentName:"li"},"min")," above ",(0,i.kt)("inlineCode",{parentName:"li"},"max")," will result\nin an ",(0,i.kt)("inlineCode",{parentName:"li"},"invalid range")," error.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min"),": is a ",(0,i.kt)("inlineCode",{parentName:"li"},"short")," representing the lowest possible generated value\n(inclusive)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max"),": is a ",(0,i.kt)("inlineCode",{parentName:"li"},"short")," representing the highest possible generated value\n(inclusive).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"short"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random short"',title:'"Random','short"':!0},"SELECT rnd_short() FROM long_sequence(5);\nSELECT rnd_short(-1,1) FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"-27434,234,-12977,8843,24\n0,1,-1,-1,0\n")),(0,i.kt)("h2",{id:"rnd_int"},"rnd_int"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_int()")," is used to return a random integer which can take any value\nbetween ",(0,i.kt)("inlineCode",{parentName:"li"},"-2147483648")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"2147483647"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_int(min, max, nanRate)")," is used to generate int values in a specific\nrange (for example only positive, or between 1 and 10), or to get occasional\n",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values along with int values.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min"),": is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," representing the lowest possible generated value\n(inclusive)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max"),": is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," representing the highest possible generated value\n(inclusive)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be NaN.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random int"',title:'"Random','int"':!0},"SELECT rnd_int() FROM long_sequence(5)\nSELECT rnd_int(1,4,0) FROM long_sequence(5);\nSELECT rnd_int(1,4,1) FROM long_sequence(5);\nSELECT rnd_int(1,4,2) FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"1822685476, 1173192835, -2808202361, 78121757821, 44934191\n1,4,3,1,2\nnull,null,null,null,null\n1,null,4,null,2\n")),(0,i.kt)("h2",{id:"rnd_long"},"rnd_long"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_long()")," is used to return a random signed integer between\n",(0,i.kt)("inlineCode",{parentName:"li"},"0x8000000000000000L")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"0x7fffffffffffffffL"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_long(min, max, nanRate)")," is used to generate long values in a specific\nrange (for example only positive, or between 1 and 10), or to get occasional\n",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values along with int values.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min"),": is a ",(0,i.kt)("inlineCode",{parentName:"li"},"long")," representing the lowest possible generated value\n(inclusive)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max"),": is a ",(0,i.kt)("inlineCode",{parentName:"li"},"long")," representing the highest possible generated value\n(inclusive)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),".")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"long"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random long"',title:'"Random','long"':!0},"SELECT rnd_long() FROM long_sequence(5);\nSELECT rnd_long(1,4,0) FROM long_sequence(5);\nSELECT rnd_long(1,4,1) FROM long_sequence(5);\nSELECT rnd_long(-10000000,10000000,2) FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"1,4,3,1,2\nnull,null,null,null,null\n-164567594, -323331140, 26846334, -892982893, -351053301\n300291810703592700, 2787990010234796000, 4305203476273459700, -8518907563589124000, 8443756723558216000\n")),(0,i.kt)("h2",{id:"rnd_long256"},"rnd_long256"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_long256()")," - generates a random ",(0,i.kt)("inlineCode",{parentName:"li"},"long256")," value between 0 and 2^256.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"long256"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random long256"',title:'"Random','long256"':!0},"SELECT rnd_long256() FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0x5dd94b8492b4be20632d0236ddb8f47c91efc2568b4d452847b4a645dbe4871a,\n0x55f256188b3474aca83ccc82c597668bb84f36d3f5b25afd9e194c1867625918,\n0x630c6f02c1c2e0c2aa4ac80ab684aa36d91dd5233cc185bb7097400fa12e7de0,\n0xa9eeaa5268f911f4bcac2e89b621bd28bba90582077fc9fb9f14a53fcf6368b7,\n0x7c80546eea2ec093a5244e39efad3f39c5489d2337007fd0b61d8b141058724d\n")),(0,i.kt)("h2",{id:"rnd_float"},"rnd_float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_float()")," - generates a random ",(0,i.kt)("strong",{parentName:"li"},"positive")," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," between 0 and 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_float(nanRate)")," - generates a random ",(0,i.kt)("strong",{parentName:"li"},"positive")," ",(0,i.kt)("inlineCode",{parentName:"li"},"float")," between 0 and 1\nwhich will be ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," at a frequency defined by ",(0,i.kt)("inlineCode",{parentName:"li"},"nanRate"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values:"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"float"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random float"',title:'"Random','float"':!0},"SELECT rnd_float() FROM long_sequence(5);\nSELECT rnd_float(2) FROM long_sequence(6);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0.3821478, 0.5162148, 0.22929084, 0.03736937, 0.39675003\n0.08108246, 0.7082644, null, 0.6784522, null, 0.5711276\n")),(0,i.kt)("h2",{id:"rnd_double"},"rnd_double"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_double()")," - generates a random ",(0,i.kt)("strong",{parentName:"li"},"positive")," ",(0,i.kt)("inlineCode",{parentName:"li"},"double")," between 0 and 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_double(nanRate)")," - generates a random ",(0,i.kt)("strong",{parentName:"li"},"positive")," ",(0,i.kt)("inlineCode",{parentName:"li"},"double")," between 0 and\n1 which will be ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," at a frequency defined by ",(0,i.kt)("inlineCode",{parentName:"li"},"nanRate"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values:"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"double"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random double"',title:'"Random','double"':!0},"SELECT rnd_double() FROM long_sequence(5);\nSELECT rnd_double(2) FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0.99115364871, 0.31011470271, 0.10776479191, 0.53938281731, 0.89820403511\n0.99115364871, null, null, 0.53938281731, 0.89820403511\n")),(0,i.kt)("h2",{id:"rnd_date"},"rnd_date()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_date()")," generates a random date between ",(0,i.kt)("inlineCode",{parentName:"li"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"end")," dates (both\ninclusive). IT will also generate ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values at a frequency defined by\n",(0,i.kt)("inlineCode",{parentName:"li"},"nanRate"),". When ",(0,i.kt)("inlineCode",{parentName:"li"},"start")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"end")," are invalid dates, or when ",(0,i.kt)("inlineCode",{parentName:"li"},"start")," is\nsuperior to ",(0,i.kt)("inlineCode",{parentName:"li"},"end"),", it will return ",(0,i.kt)("inlineCode",{parentName:"li"},"invalid range")," error. When ",(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," is\ninferior to 0, it will return ",(0,i.kt)("inlineCode",{parentName:"li"},"invalid NAN rate")," error.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"date")," defining the minimum possible generated date (inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"date")," defining the maximum possible generated date (inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," defines the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be NaN.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"date"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random date"',title:'"Random','date"':!0},"SELECT rnd_date(\n    to_date('2015', 'yyyy'),\n    to_date('2016', 'yyyy'),\n    0)\nFROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"2015-01-29T18:00:17.402Z, 2015-11-15T20:22:14.112Z,\n2015-12-08T09:26:04.483Z, 2015-05-28T02:22:47.022Z,\n2015-10-13T19:16:37.034Z\n")),(0,i.kt)("h2",{id:"rnd_timestamp"},"rnd_timestamp()"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_timestamp(start, end, nanRate)")," generates a random timestamp between\n",(0,i.kt)("inlineCode",{parentName:"li"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"end")," timestamps (both inclusive). It will also generate ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"\nvalues at a frequency defined by ",(0,i.kt)("inlineCode",{parentName:"li"},"nanRate"),". When ",(0,i.kt)("inlineCode",{parentName:"li"},"start")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"end")," are invalid\ntimestamps, or when ",(0,i.kt)("inlineCode",{parentName:"li"},"start")," is superior to ",(0,i.kt)("inlineCode",{parentName:"li"},"end"),", it will return\n",(0,i.kt)("inlineCode",{parentName:"li"},"invalid range")," error. When ",(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," is inferior to 0, it will return\n",(0,i.kt)("inlineCode",{parentName:"li"},"invalid NAN rate")," error.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," defining the minimum possible generated timestamp\n(inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"end")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," defining the maximum possible generated timestamp\n(inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nanRate")," defines the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"NaN"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be NaN.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamp"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random timestamp"',title:'"Random','timestamp"':!0},"SELECT rnd_timestamp(\n    to_timestamp('2015', 'yyyy'),\n    to_timestamp('2016', 'yyyy'),\n    0)\nFROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"2015-01-29T18:00:17.402762Z, 2015-11-15T20:22:14.112744Z,\n2015-12-08T09:26:04.483039Z, 2015-05-28T02:22:47.022680Z,\n2015-10-13T19:16:37.034203Z\n")),(0,i.kt)("h4",{id:"sequences"},"Sequences"),(0,i.kt)("p",null,"To generate increasing timestamps, please refer the page about\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/function/row-generator"},"row generators"),"."),(0,i.kt)("h2",{id:"rnd_char"},"rnd_char"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_char()")," is used to generate a random ",(0,i.kt)("inlineCode",{parentName:"li"},"char")," which will be an uppercase\ncharacter from the 26-letter A to Z alphabet. Letters from A to Z will be\ngenerated with equal probability.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"char"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random char"',title:'"Random','char"':!0},"SELECT rnd_char() FROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"G, P, E, W, K\n")),(0,i.kt)("h2",{id:"rnd_symbol"},"rnd_symbol"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_symbol(symbolList)")," is used to choose a random ",(0,i.kt)("inlineCode",{parentName:"li"},"symbol")," from a list\ndefined by the user. It is useful when looking to generate specific symbols\nfrom a finite list (e.g ",(0,i.kt)("inlineCode",{parentName:"li"},"BUY, SELL")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"AUTUMN, WINTER, SPRING, SUMMER"),".\nSymbols are randomly chosen from the list with equal probability. When only\none symbol is provided in the list, this symbol will be chosen with 100%\nprobability, in which case it is more efficient to use\n",(0,i.kt)("inlineCode",{parentName:"li"},"cast('your_symbol' as symbol")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_symbol(list_size, minLength, maxLength, nullRate)")," generated a finite\nlist of distinct random symbols and chooses one symbol from the list at\nrandom. The finite list is of size ",(0,i.kt)("inlineCode",{parentName:"li"},"list_size"),". The generated symbols length\nis between ",(0,i.kt)("inlineCode",{parentName:"li"},"minLength")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"maxLength")," (both inclusive). The function will\nalso generate ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," values at a rate defined by ",(0,i.kt)("inlineCode",{parentName:"li"},"nullRate"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"symbolList")," is a variable-length list of possible ",(0,i.kt)("inlineCode",{parentName:"li"},"symbol")," values expressed\nas a comma-separated list of strings. For example,\n",(0,i.kt)("inlineCode",{parentName:"li"},"'a', 'bcd', 'efg123', '\u884c'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list_size")," is the number of distinct ",(0,i.kt)("inlineCode",{parentName:"li"},"symbol")," values to generated"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minLength")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the minimum length for of a generated symbol\n(inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxLength")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the maximum length for of a generated symbol\n(inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"symbol"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random symbol from a list"',title:'"Random',symbol:!0,from:!0,a:!0,'list"':!0},"SELECT rnd_symbol('ABC','def', '123')\nFROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"'ABC', '123', 'def', '123', 'ABC'\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random symbol, randomly generated"',title:'"Random',"symbol,":!0,randomly:!0,'generated"':!0},"SELECT rnd_symbol(2, 3, 4, 0)\nFROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"'ABC', 'DEFG', 'ABC', 'DEFG', 'DEFG'\n")),(0,i.kt)("h2",{id:"rnd_str"},"rnd_str"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_str(stringList)")," is used to choose a random ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," from a list defined\nby the user. It is useful when looking to generate specific strings from a\nfinite list (e.g ",(0,i.kt)("inlineCode",{parentName:"li"},"BUY, SELL")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"AUTUMN, WINTER, SPRING, SUMMER"),". Strings are\nrandomly chosen from the list with equal probability. When only one string is\nprovided in the list, this string will be chosen with 100% probability."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_str(list_size, minLength, maxLength, nullRate)")," generated a finite list\nof distinct random string and chooses one string from the list at random. The\nfinite list is of size ",(0,i.kt)("inlineCode",{parentName:"li"},"list_size"),". The generated strings length is between\n",(0,i.kt)("inlineCode",{parentName:"li"},"minLength")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"maxLength")," (both inclusive). The function will also generate\n",(0,i.kt)("inlineCode",{parentName:"li"},"null")," values at a rate defined by ",(0,i.kt)("inlineCode",{parentName:"li"},"nullRate"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"strList")," is a variable-length list of possible ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," values expressed as a\ncomma-separated list of strings. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"'a', 'bcd', 'efg123', '\u884c'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"list_size")," is the number of distinct ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," values to generated"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minLength")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the minimum length for of a generated string\n(inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxLength")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the maximum length for of a generated string\n(inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random string from a list"',title:'"Random',string:!0,from:!0,a:!0,'list"':!0},"SELECT rnd_str('ABC','def', '123')\nFROM long_sequence(5);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"'ABC', '123', 'def', '123', 'ABC'\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random string, randomly generated"',title:'"Random',"string,":!0,randomly:!0,'generated"':!0},"SELECT rnd_str(3, 2, 2, 4)\nFROM long_sequence(8);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"'AB', 'CD', null, 'EF', 'CD', 'EF', null, 'AB'\n")),(0,i.kt)("h2",{id:"rnd_bin"},"rnd_bin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_bin()")," generates random binary data of a size up to ",(0,i.kt)("inlineCode",{parentName:"li"},"32")," bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rnd_bin(minBytes, maxBytes, nullRate)")," generates random binary data of a size\nbetween ",(0,i.kt)("inlineCode",{parentName:"li"},"minBytes")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"maxBytes")," and returns ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," at a rate defined by\n",(0,i.kt)("inlineCode",{parentName:"li"},"nullRate"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"minBytes")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"long")," defining the minimum size in bytes for of a generated\nbinary (inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxBytes")," is a ",(0,i.kt)("inlineCode",{parentName:"li"},"long")," defining the maximum size in bytes for of a generated\nbinary (inclusive)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullRate")," is an ",(0,i.kt)("inlineCode",{parentName:"li"},"int")," defining the frequency of occurrence of ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0"),": No ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," will be returned."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1"),": Will only return ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"N > 1"),": On average, one in N generated values will be ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),".")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Return value:")),(0,i.kt)("p",null,"Return value type is ",(0,i.kt)("inlineCode",{parentName:"p"},"binary"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Random binary"',title:'"Random','binary"':!0},"SELECT rnd_bin() FROM long_sequence(5);\nSELECT rnd_bin(2, 5, 2) FROM long_sequence(5);\n")))}u.isMDXComponent=!0}}]);