"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[2037],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=r,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},1395:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(7294),r=t(944),o=t(6010),i="tabItem_vU9c",l="tabItemActive_cw6a";var s=37,c=39;var u=function(e){var n=e.lazy,t=e.block,u=e.defaultValue,p=e.values,d=e.groupId,f=e.className,m=(0,r.Z)(),h=m.tabGroupChoices,g=m.setTabGroupChoices,b=(0,a.useState)(u),y=b[0],v=b[1],k=a.Children.toArray(e.children),w=[];if(null!=d){var T=h[d];null!=T&&T!==y&&p.some((function(e){return e.value===T}))&&v(T)}var N=function(e){var n=e.currentTarget,t=w.indexOf(n),a=p[t].value;v(a),null!=d&&(g(d,a),setTimeout((function(){var e,t,a,r,o,i,s,c;(e=n.getBoundingClientRect(),t=e.top,a=e.left,r=e.bottom,o=e.right,i=window,s=i.innerHeight,c=i.innerWidth,t>=0&&o<=c&&r<=s&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(l),setTimeout((function(){return n.classList.remove(l)}),2e3))}),150))},O=function(e){var n,t;switch(e.keyCode){case c:var a=w.indexOf(e.target)+1;t=w[a]||w[0];break;case s:var r=w.indexOf(e.target)-1;t=w[r]||w[w.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},f)},p.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,className:(0,o.Z)("tabs__item",i,{"tabs__item--active":y===n}),key:n,ref:function(e){return w.push(e)},onKeyDown:O,onFocus:N,onClick:N},t)}))),n?(0,a.cloneElement)(k.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}},9443:function(e,n,t){var a=(0,t(7294).createContext)(void 0);n.Z=a},944:function(e,n,t){var a=t(7294),r=t(9443);n.Z=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},3310:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p},default:function(){return f}});var a=t(3117),r=t(102),o=(t(7294),t(3905)),i=t(1395),l=t(8215),s=["components"],c={title:"Authenticate",description:"This page shows how to setup authentication for InfluxDB line protocol over TCP using JSON web keys."},u={unversionedId:"reference/api/ilp/authenticate",id:"reference/api/ilp/authenticate",isDocsHomePage:!1,title:"Authenticate",description:"This page shows how to setup authentication for InfluxDB line protocol over TCP using JSON web keys.",source:"@site/docs/reference/api/ilp/authenticate.md",sourceDirName:"reference/api/ilp",slug:"/reference/api/ilp/authenticate",permalink:"/docs/reference/api/ilp/authenticate",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/api/ilp/authenticate.md",version:"current",frontMatter:{title:"Authenticate",description:"This page shows how to setup authentication for InfluxDB line protocol over TCP using JSON web keys."},sidebar:"docs",previous:{title:"ILP UDP Receiver",permalink:"/docs/reference/api/ilp/udp-receiver"},next:{title:"Java (embedded)",permalink:"/docs/reference/api/java-embedded"}},p=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Server configuration",id:"server-configuration",children:[]},{value:"Client keys",id:"client-keys",children:[]},{value:"Authentication",id:"authentication",children:[]}],d={toc:p};function f(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Although the original protocol does not support it, we have added authentication\nover TCP for InfluxDB line protocol. This works by using an\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Elliptic-curve_cryptography"},"elliptic curve P-256"),"\nJSON Web Token (JWT) to sign a server challenge. This page shows how to\nauthenticate clients with QuestDB when using\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/overview"},"InfluxDB line protocol")," for the TCP\nendpoint."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"QuestDB should be running and accessible and can be started via\n",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/docker"},"Docker"),", the ",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/binaries"},"binaries"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/homebrew"},"Homebrew")," for macOS users."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/latchset/jose"},"jose")," package is a C-language\nimplementation of the Javascript Object Signing and Encryption standard and may\nbe used for convenience to generate cryptographic keys. It's also recommended to\n",(0,o.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/download/"},"install jq")," for parsing the JSON\noutput from the keys generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"jose")),(0,o.kt)(i.Z,{defaultValue:"macos",values:[{label:"macOS",value:"macos"},{label:"Debian",value:"debian"},{label:"Ubuntu",value:"ubuntu"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"macos",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"brew install jose\nbrew install jq\n"))),(0,o.kt)(l.Z,{value:"debian",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yum install jose\nyum install jq\n"))),(0,o.kt)(l.Z,{value:"ubuntu",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"apt install jose\napt install jq\n")))),(0,o.kt)("h2",{id:"server-configuration"},"Server configuration"),(0,o.kt)("p",null,"In order to use this feature, you need to create an authentication file using\nthe following template:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"testUser1 ec-p-256-sha256 fLKYEaoEb9lrn3nkwLDA-M_xnuFOdSt9y0Z7_vWSHLU Dt5tbS1dEDMSYfym3fgMv0B99szno-dFc1rYF9t0aac\n# [key/user id] [key type] {keyX keyY}\n")),(0,o.kt)("p",null,"Only elliptic curve (P-256) are supported (key type ",(0,o.kt)("inlineCode",{parentName:"p"},"ec-p-256-sha256"),"). An\nauthentication file can be generated using the ",(0,o.kt)("inlineCode",{parentName:"p"},"jose")," utility with the following\ncommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'jose jwk gen -i \'{"alg":"ES256", "kid": "testUser1"}\' -o /var/lib/questdb/conf/full_auth.json\n\nKID=$(cat /var/lib/questdb/conf/full_auth.json | jq -r \'.kid\')\nX=$(cat /var/lib/questdb/conf/full_auth.json | jq -r \'.x\')\nY=$(cat /var/lib/questdb/conf/full_auth.json | jq -r \'.y\')\n\necho "$KID ec-p-256-sha256 $X $Y" | tee /var/lib/questdb/conf/auth.txt\n')),(0,o.kt)("p",null,"Once you created the file, you will need to reference it in the server\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/configuration"},"configuration"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ini",metastring:"title='/path/to/server.conf'",title:"'/path/to/server.conf'"},"line.tcp.auth.db.path=conf/auth.txt\n")),(0,o.kt)("h2",{id:"client-keys"},"Client keys"),(0,o.kt)("p",null,"For the server configuration above, the corresponding JSON Web Key must be\nstored on the client side. When sending a fully-composed JWK, it will have the\nfollowing keys:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "kty": "EC",\n  "d": "5UjEMuA0Pj5pjK8a-fa24dyIf-Es5mYny3oE_Wmus48",\n  "crv": "P-256",\n  "kid": "testUser1",\n  "x": "fLKYEaoEb9lrn3nkwLDA-M_xnuFOdSt9y0Z7_vWSHLU",\n  "y": "Dt5tbS1dEDMSYfym3fgMv0B99szno-dFc1rYF9t0aac"\n}\n')),(0,o.kt)("p",null,"For this kind of key, the ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," property is used to generate the the secret key.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," parameters are used to generate the public key (values that we\nretrieve in the server authentication file)."),(0,o.kt)("h2",{id:"authentication"},"Authentication"),(0,o.kt)("p",null,"The server will now expect the client to send its key id (terminated with ",(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),")\nstraight after ",(0,o.kt)("inlineCode",{parentName:"p"},"connect()"),". The server will respond with a challenge (printable\ncharacters terminated with ",(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),"). The client needs to sign the challenge and\nrespond to the server with the ",(0,o.kt)("inlineCode",{parentName:"p"},"base64")," encoded signature (terminated with\n",(0,o.kt)("inlineCode",{parentName:"p"},"\\n"),"). If all is good the client can then continue, if not the server will\ndisconnect and log the failure."),(0,o.kt)(i.Z,{defaultValue:"nodejs",values:[{label:"NodeJS",value:"nodejs"},{label:"Go",value:"go"},{label:"Python",value:"python"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const { Socket } = require("net")\nconst { Crypto } = require("node-webcrypto-ossl")\n\nconst crypto = new Crypto()\n\nconst PORT = 9009\nconst HOST = "localhost"\n\nconst PRIVATE_KEY = "5UjEMuA0Pj5pjK8a-fa24dyIf-Es5mYny3oE_Wmus48"\nconst PUBLIC_KEY = {\n  x: "fLKYEaoEb9lrn3nkwLDA-M_xnuFOdSt9y0Z7_vWSHLU",\n  y: "Dt5tbS1dEDMSYfym3fgMv0B99szno-dFc1rYF9t0aac",\n}\nconst JWK = {\n  ...PUBLIC_KEY,\n  kid: "testUser1",\n  kty: "EC",\n  d: PRIVATE_KEY,\n  crv: "P-256",\n}\n\nconst client = new Socket()\n\nasync function write(data) {\n  return new Promise((resolve) => {\n    client.write(data, () => {\n      resolve()\n    })\n  })\n}\n\nasync function authenticate(challenge) {\n  // Check for trailing \\n which ends the challenge\n  if (challenge.slice(-1).readInt8() === 10) {\n    const apiKey = await crypto.subtle.importKey(\n      "jwk",\n      JWK,\n      { name: "ECDSA", namedCurve: "P-256" },\n      true,\n      ["sign"],\n    )\n\n    const signature = await crypto.subtle.sign(\n      { name: "ECDSA", hash: "SHA-256" },\n      apiKey,\n      challenge.slice(0, challenge.length - 1),\n    )\n\n    await write(`${Buffer.from(signature).toString("base64")}\\n`)\n\n    return true\n  }\n\n  return false\n}\n\nasync function sendData() {\n  const rows = [\n    `test,location=us temperature=22.4 ${Date.now() * 1e6}`,\n    `test,location=us temperature=21.4 ${Date.now() * 1e6}`,\n  ]\n\n  for (row of rows) {\n    await write(`${row}\\n`)\n  }\n}\n\nasync function run() {\n  let authenticated = false\n  let data\n\n  client.on("data", async function (raw) {\n    data = !data ? raw : Buffer.concat([data, raw])\n\n    if (!authenticated) {\n      authenticated = await authenticate(data)\n      await sendData()\n      setTimeout(() => {\n        client.destroy()\n      }, 0)\n    }\n  })\n\n  client.on("ready", async function () {\n    await write(`${JWK.kid}\\n`)\n  })\n\n  client.connect(PORT, HOST)\n}\n\nrun()\n'))),(0,o.kt)(l.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n    qdb "github.com/questdb/go-questdb-client"\n)\n\nfunc main() {\n    ctx := context.TODO()\n    // Connect to QuestDB running on 127.0.0.1:9009\n    sender, err := qdb.NewLineSender(\n        ctx,\n        // Specify keyId and key for authentication.\n        qdb.WithAuth("testUser1", "5UjEMuA0Pj5pjK8a-fa24dyIf-Es5mYny3oE_Wmus48"),\n    )\n    if err != nil {\n        log.Fatal(err)\n    }\n    // Make sure to close the sender on exit to release resources.\n    defer sender.Close()\n    // Send a few ILP messages.\n    err = sender.\n        Table("trades").\n        Symbol("name", "test_ilp1").\n        Float64Column("value", 12.4).\n        AtNow(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    err = sender.\n        Table("trades").\n        Symbol("name", "test_ilp2").\n        Float64Column("value", 11.4).\n        AtNow(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    // Make sure that the messages are sent over the network.\n    err = sender.Flush(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n'))),(0,o.kt)(l.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# https://github.com/questdb/py-questdb-client\n\nfrom questdb.ingress import Sender, IngressError, TimestampNanos, TimestampMicros\nimport datetime\nimport sys\n\nHOST = 'localhost'\nPORT = 9009\n\n\ndef send_with_auth():\n    try:\n        auth = (\"YOUR_KID\", \"YOUR_D_KEY\", \"YOUR_X_KEY\", \"YOUR_Y_KEY\")\n        with Sender(HOST, PORT, auth=auth, tls=True) as sender:\n            buffer = sender.new_buffer()\n            buffer.row(\n                'trades',\n                symbols={'name': 'tls_client_timestamp'},\n                columns={'value': 12.4, 'valid_from': TimestampMicros.from_datetime(datetime.datetime.utcnow())},\n                at=TimestampNanos.from_datetime(datetime.datetime.utcnow()))\n            sender.flush(buffer)\n    except IngressError as e:\n        sys.stderr.write(f'Got error: {e}')\n\n\nif __name__ == '__main__':\n    send_with_auth()\n")))))}f.isMDXComponent=!0},6010:function(e,n,t){function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}t.d(n,{Z:function(){return r}})}}]);