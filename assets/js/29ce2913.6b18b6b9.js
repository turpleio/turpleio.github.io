"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[8567],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),h=r,d=m["".concat(l,".").concat(h)]||m[h]||c[h]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},33377:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=n(46092),s=n(72525),l=["components"],u={title:"Streaming on-chain Ethereum data to QuestDB",author:"Yitaek Hwang",author_title:"Guest",author_url:"https://github.com/Yitaek",author_image_url:"https://avatars.githubusercontent.com/Yitaek",description:"Learn how to use Infura, Blockchain ETL, and QuestDB to stream Ethereum data to a time series database for visualization and analysis.",keywords:["timeseries","infura","kafka","blockchain","ethereum","crypto","etl"],tags:["tutorial","crypto","blockchain","ethereum","kafka","infura"],image:"/img/blog/shared/og-ethereum.png"},p={permalink:"/blog/2021/04/12/stream-ethereum-data",source:"@site/blog/2021-04-12-stream-ethereum-data.mdx",title:"Streaming on-chain Ethereum data to QuestDB",description:"Learn how to use Infura, Blockchain ETL, and QuestDB to stream Ethereum data to a time series database for visualization and analysis.",date:"2021-04-12T00:00:00.000Z",formattedDate:"April 12, 2021",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"crypto",permalink:"/blog/tags/crypto"},{label:"blockchain",permalink:"/blog/tags/blockchain"},{label:"ethereum",permalink:"/blog/tags/ethereum"},{label:"kafka",permalink:"/blog/tags/kafka"},{label:"infura",permalink:"/blog/tags/infura"}],readingTime:5.235,truncated:!1,prevItem:{title:"QuestDB version 6.0 alpha",permalink:"/blog/2021/04/20/questdb-release-6-0-alpha"},nextItem:{title:"Automating ETL jobs on time series data with QuestDB on Google Cloud Platform",permalink:"/blog/2021/03/31/automating-etl-jobs-on-time-series-data-on-gcp"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Accessing Ethereum on-chain data",id:"accessing-ethereum-on-chain-data",children:[]},{value:"Create table for time series data",id:"create-table-for-time-series-data",children:[]},{value:"Stream Ethereum on-chain data",id:"stream-ethereum-on-chain-data",children:[]},{value:"Exploring data &amp; next steps",id:"exploring-data--next-steps",children:[]},{value:"Summary",id:"summary",children:[]}],m={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{alt:"Physical coins with Ethereum and Bitcoin logos.",height:467,src:"/img/blog/2021-04-12/banner.jpg",width:650,mdxType:"Banner"},"Photo by ",(0,o.kt)("a",{href:"https://unsplash.com/@thoughtcatalog"},"Thought Catalog")," ","via ",(0,o.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,o.kt)("p",null,"This submission comes from one of our community contributors\n",(0,o.kt)("a",{parentName:"p",href:"https://yitaek.medium.com/"},"Yitaek Hwang")," who has put together another\nexcellent tutorial that shows how to stream Ethereum blockchain data into\nQuestDB for time series data visualization and analysis."),(0,o.kt)("p",null,"Thanks for another great contribution, Yitaek!"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Previously, I wrote about using\n",(0,o.kt)("a",{parentName:"p",href:"/blog/2021/03/18/questdb-and-prometheus-on-gke-autopilot"},"Coinbase API and Kafka Connect"),"\nto track the price of various cryptocurrencies in real-time. While price is an\nimportant factor for a potential investor, on-chain data like block information\n(gas used, difficulty), transactions, and smart contracts also provide useful\nmetrics for technical analysis. In this tutorial, we will pull on-chain data\nfrom Ethereum and stream it to QuestDB for further analysis and visualization."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Disclaimer:")," This tutorial is not investment or financial advice. All views\nexpressed here are my own."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.python.org/downloads/"},"Python 3.6+")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.docker.com/products/docker-desktop"},"Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://infura.io/"},"Infura")," account")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This tutorial uses ethereum-etl 1.6.x series.\nLater releases may not be compatible with QuestDB."))),(0,o.kt)("h2",{id:"accessing-ethereum-on-chain-data"},"Accessing Ethereum on-chain data"),(0,o.kt)("p",null,"Infura is a development platform powered by Consensys with a generous free tier\n(100k requests/day) to pull data from Ethereum Mainnet and Testnets. Create a\nnew project in your Infura account under Ethereum:"),(0,o.kt)(s.Z,{alt:"A new account on Infura showing API call quotas remaining",height:278,src:"/img/blog/2021-04-12/infura-account.png",width:650,mdxType:"Screenshot"}),(0,o.kt)("p",null,"Make note of the HTTPS endpoint for the Mainnet in the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"https://mainnet.infura.io/v3/<your-project-id>\n")),(0,o.kt)("h2",{id:"create-table-for-time-series-data"},"Create table for time series data"),(0,o.kt)("p",null,"The ETL script we will use to stream Ethereum data provides the following\non-chain information:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Blocks"),(0,o.kt)("li",{parentName:"ul"},"Contracts"),(0,o.kt)("li",{parentName:"ul"},"Logs"),(0,o.kt)("li",{parentName:"ul"},"Token Transfers"),(0,o.kt)("li",{parentName:"ul"},"Tokens"),(0,o.kt)("li",{parentName:"ul"},"Traces"),(0,o.kt)("li",{parentName:"ul"},"Transactions")),(0,o.kt)("p",null,"For simplicity, we will only stream blocks and token transfers in this example,\nbut the schema for all the available on-chain data is located under\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/blockchain-etl/ethereum-etl-postgres/tree/master/schema"},"ethereum-etl-postgres/schema"),".\nThis data will be indexed in QuestDB for high-performance time series data\nanalysis."),(0,o.kt)("p",null,"Start the QuestDB Docker container with the web console and PostgreSQL wire\nprotocol ports exposed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 9000:9000 -p 8812:8812 questdb/questdb\n")),(0,o.kt)("p",null,"Navigate to the web console at localhost:9000 and create tables for ",(0,o.kt)("inlineCode",{parentName:"p"},"blocks"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"create table blocks\n(\n  timestamp string,\n  number int,\n  hash string,\n  parent_hash string,\n  nonce string,\n  sha3_uncles string,\n  logs_bloom string,\n  transactions_root string,\n  state_root string,\n  receipts_root string,\n  miner symbol,\n  difficulty long,\n  total_difficulty long,\n  size long,\n  extra_data string,\n  gas_limit long,\n  gas_used long,\n  transaction_count long\n);\n")),(0,o.kt)("p",null,"and for ",(0,o.kt)("inlineCode",{parentName:"p"},"token_transfers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"create table token_transfers\n(\n  token_address symbol,\n  from_address symbol,\n  to_address symbol,\n  value float,\n  transaction_hash string,\n  log_index long,\n  block_timestamp string,\n  block_number long,\n  block_hash string\n);\n")),(0,o.kt)("p",null,"When creating tables that use repetitive strings in QuestDB, we can achieve\nbetter performance on both storage space and query efficiency by using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," type."),(0,o.kt)(s.Z,{alt:"A SQL query in the QuestDB web console showing how to create a new table",height:251,src:"/img/blog/2021-04-12/create-table.png",width:650,mdxType:"Screenshot"}),(0,o.kt)("p",null,"When sending data over PostgreSQL wire, we can send regular ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," types, but\ntreat them as enum-like values stored as integers in QuestDB. For more\ninformation on using this feature, further details can be found on the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/symbol"},"symbol type documentation"),"."),(0,o.kt)("p",null,"After refreshing the tables list, you should see both populated and we\u2019re ready\nto stream Ethereum data to our database."),(0,o.kt)("h2",{id:"stream-ethereum-on-chain-data"},"Stream Ethereum on-chain data"),(0,o.kt)("p",null,"Blockchain ETL provides a Python script to pull data from Infura and stream it\nto Google Pub/Sub or Postgres. To start, we need to first install\nethereumetl","[streaming]"," :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'pip3 install "ethereum-etl[streaming]"\n')),(0,o.kt)("p",null,"Now we need to specify our QuestDB credentials as well as Infura API details.\nPostgres output is in the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http"},"postgresql+pg8000://<user>:<password>@<host>:<port>/<database>\n")),(0,o.kt)("p",null,"where API url is specified via ",(0,o.kt)("inlineCode",{parentName:"p"},"--provider-uri"),". We can also specify the\n",(0,o.kt)("inlineCode",{parentName:"p"},"start-block")," number (or omit to download all of Ethereum data from the\nbeginning), and the schemas we\u2019re interested in:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ethereumetl stream --start-block 600000 -e block,token_transfer \\\n--output postgresql+pg8000://admin:quest@localhost:8812/qdb \\\n--provider-uri https://mainnet.infura.io/v3/<my-project-id>\n")),(0,o.kt)("p",null,"As the stream starts up, data will be visible in QuestDB:"),(0,o.kt)(s.Z,{alt:"A SQL query in the QuestDB web console showing how to list all rows from a table",height:456,src:"/img/blog/2021-04-12/select-all-from-blocks.png",width:650,mdxType:"Screenshot"}),(0,o.kt)("p",null,"The script automatically stores the last processed block in\n",(0,o.kt)("inlineCode",{parentName:"p"},"last_synced_block.txt"),". If you would like to run the script later, you can\nremove the ",(0,o.kt)("inlineCode",{parentName:"p"},"--start-block")," flag and the script will resume from the value stored\nas a checkpoint in ",(0,o.kt)("inlineCode",{parentName:"p"},"last_synced_block.txt"),"."),(0,o.kt)("h2",{id:"exploring-data--next-steps"},"Exploring data & next steps"),(0,o.kt)("p",null,"QuestDB provides some built-in visualization capabilities. For example, if you\nwould like to explore how ",(0,o.kt)("inlineCode",{parentName:"p"},"gas_used")," by ",(0,o.kt)("inlineCode",{parentName:"p"},"miner")," looks, you can navigate to\n",(0,o.kt)("strong",{parentName:"p"},"Chart")," on the QuestDB Web Console and configure the following settings:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Chart type - bar")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Labels - ",(0,o.kt)("inlineCode",{parentName:"strong"},"miner"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Series - ",(0,o.kt)("inlineCode",{parentName:"strong"},"gas_used")))),(0,o.kt)(s.Z,{alt:"The chart functionality in the QuestDB web console showing a bar chart of blockchain info",height:257,src:"/img/blog/2021-04-12/visualizing-data.png",width:650,mdxType:"Screenshot"}),(0,o.kt)("p",null,"The Ethereum ETL script currently stores\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/blockchain-etl/ethereum-etl/blob/develop/ethereumetl/streaming/eth_item_timestamp_calculator.py"},"timestamp data in RFC3339 format"),",\nwhereas QuestDB expects signed offset from Unix Epoch. This was why our table\nschema used ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"timestamp")," type for our time series fields. To\nsee better performance and to use more language features that QuestDB offers,\nthere are a few options. We can either modify the ETL script directly to send\n",(0,o.kt)("inlineCode",{parentName:"p"},"timestamp")," types, or stream our data to Cloud Pub/Sub, transform the data prior\nto streaming to QuestDB."),(0,o.kt)("p",null,"Alternatively, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"to_timestamp()")," function in QuestDB to parse\nstring fields with a date format as timestamps. For example, pulling data from\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"blocks")," table using ",(0,o.kt)("inlineCode",{parentName:"p"},"timestamp")," type can be done on-the-fly using this\nquery:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT to_timestamp(timestamp, 'yyyy-MM-dd HH:mm:ss') AS time,\n        number,\n        miner,\n        difficulty,\n        size,\n        gas_limit,\n        gas_used\nFROM (blocks ORDER BY timestamp);\n")),(0,o.kt)("p",null,"Finally, if you are going to stream contracts or token data, you'll need to\nfirst flatten ",(0,o.kt)("inlineCode",{parentName:"p"},"function_sighashes")," as QuestDB does not support ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," types\nnatively yet."),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"We've learned how to stream Ethereum on-chain data from Infura into QuestDB for\ntime series analysis using Python ETL scripts. With this data, you can now\ncalculate popular signals like Network Value to Transaction Ratio or replicate\nanalysis provided on Coin Metrics or Glassnode. As a bonus, you can deploy the\nstreaming application to Kubernetes following the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/blockchain-etl/blockchain-etl-streaming"},"instructions on this GitHub repository"),"."),(0,o.kt)("p",null,"If you like this content, we'd love to know your thoughts! Feel free to share\nyour feedback or come and say hello in the\n",(0,o.kt)("a",{parentName:"p",href:"https://"},"QuestDB Community Slack"),"."))}h.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);