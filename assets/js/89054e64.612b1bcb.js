"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[796],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},1395:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7294),r=n(944),o=n(6010),s="tabItem_vU9c",i="tabItemActive_cw6a";var l=37,c=39;var p=function(e){var t=e.lazy,n=e.block,p=e.defaultValue,u=e.values,d=e.groupId,m=e.className,h=(0,r.Z)(),f=h.tabGroupChoices,T=h.setTabGroupChoices,g=(0,a.useState)(p),y=g[0],b=g[1],v=a.Children.toArray(e.children),w=[];if(null!=d){var k=f[d];null!=k&&k!==y&&u.some((function(e){return e.value===k}))&&b(k)}var E=function(e){var t=e.currentTarget,n=w.indexOf(t),a=u[n].value;b(a),null!=d&&(T(d,a),setTimeout((function(){var e,n,a,r,o,s,l,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,s=window,l=s.innerHeight,c=s.innerWidth,n>=0&&o<=c&&r<=l&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},N=function(e){var t,n;switch(e.keyCode){case c:var a=w.indexOf(e.target)+1;n=w[a]||w[0];break;case l:var r=w.indexOf(e.target)-1;n=w[r]||w[w.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},m)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,className:(0,o.Z)("tabs__item",s,{"tabs__item--active":y===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:N,onFocus:E,onClick:E},n)}))),t?(0,a.cloneElement)(v.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},944:function(e,t,n){var a=n(7294),r=n(9443);t.Z=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},7380:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),s=n(1395),i=n(8215),l=["components"],c={title:"Update data",description:"This page demonstrates how to update time series data in QuestDB from NodeJS, Java, Python and cURL. The examples show how to use the REST and Postgres APIs."},p={unversionedId:"develop/update-data",id:"develop/update-data",isDocsHomePage:!1,title:"Update data",description:"This page demonstrates how to update time series data in QuestDB from NodeJS, Java, Python and cURL. The examples show how to use the REST and Postgres APIs.",source:"@site/docs/develop/update-data.md",sourceDirName:"develop",slug:"/develop/update-data",permalink:"/docs/develop/update-data",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/develop/update-data.md",version:"current",frontMatter:{title:"Update data",description:"This page demonstrates how to update time series data in QuestDB from NodeJS, Java, Python and cURL. The examples show how to use the REST and Postgres APIs."},sidebar:"docs",previous:{title:"Query data",permalink:"/docs/develop/query-data"},next:{title:"Web Console",permalink:"/docs/develop/web-console"}},u=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Postgres compatibility",id:"postgres-compatibility",children:[]},{value:"REST API",id:"rest-api",children:[{value:"<code>/imp</code> endpoint",id:"imp-endpoint",children:[]},{value:"<code>/exec</code> endpoint",id:"exec-endpoint",children:[]}]},{value:"Web Console",id:"web-console",children:[]}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page shows how to update existing data in QuestDB using different programming\nlanguages and tools. There are two main methods for updating data:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#postgres-compatibility"},"Postgres wire")," protocol for compatibility with a\nrange of clients"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#rest-api"},"REST API")," provides access to QuestDB via HTTP")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"This page assumes that QuestDB is running and accessible. QuestDB can be run\nusing either ",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/docker/"},"Docker"),", the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/binaries/"},"Binaries")," or\n",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/homebrew/"},"Homebrew")," for macOS users."),(0,o.kt)("h2",{id:"postgres-compatibility"},"Postgres compatibility"),(0,o.kt)("p",null,"You can query data using the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/postgres/"},"Postgres")," endpoint\nthat QuestDB exposes. This is accessible via port ",(0,o.kt)("inlineCode",{parentName:"p"},"8812")," by default. More\ninformation on the Postgres wire protocol implementation with details on\nsupported features can be found on the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/postgres/"},"Postgres API reference")," page."),(0,o.kt)(s.Z,{defaultValue:"nodejs",values:[{label:"NodeJS",value:"nodejs"},{label:"Java",value:"java"},{label:"Python",value:"python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("p",null,"This example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pg"},(0,o.kt)("inlineCode",{parentName:"a"},"pg")," package")," which\nallows for quickly building queries using Postgres wire protocol. Details on the\nuse of this package can be found on the\n",(0,o.kt)("a",{parentName:"p",href:"https://node-postgres.com/"},"node-postgres documentation"),"."),(0,o.kt)("p",null,"This example uses naive ",(0,o.kt)("inlineCode",{parentName:"p"},"Date.now() * 1000")," inserts for Timestamp types in\nmicrosecond resolution. For accurate microsecond timestamps, the\n",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/process.html#processhrtimebigint"},"process.hrtime.bigint()")," call can be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'"use strict"\n\nconst { Client } = require("pg")\n\nconst start = async () => {\n  const client = new Client({\n    database: "qdb",\n    host: "127.0.0.1",\n    password: "quest",\n    port: 8812,\n    user: "admin",\n    options: "-c statement_timeout=300000"\n  })\n  await client.connect()\n\n  const createTable = await client.query(\n    "CREATE TABLE IF NOT EXISTS trades (ts TIMESTAMP, date DATE, name STRING, value INT) timestamp(ts);"\n  )\n  console.log(createTable)\n\n  for (let rows = 0; rows < 10; rows++) {\n    // Providing a \'name\' field allows for prepared statements / bind variables\n    let now = new Date().toISOString()\n    const query = {\n      name: "insert-values",\n      text: "INSERT INTO trades VALUES($1, $2, $3, $4);",\n      values: [now, now, "node pg prep statement", rows],\n    }\n    await client.query(query)\n  }\n\n  const updateData = await client.query(\n          "UPDATE trades SET name = \'update example\', value = 123 WHERE value > 7;"\n  )\n  console.log(updateData)\n\n  await client.query("COMMIT")\n\n  const readAll = await client.query("SELECT * FROM trades")\n  console.log(readAll.rows)\n\n  await client.end()\n}\n\nstart()\n  .then(() => console.log("Done"))\n  .catch(console.error)\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.myco;\n\nimport java.sql.*;\nimport java.util.Properties;\n\nclass App {\n  public static void main(String[] args) throws SQLException {\n    Properties properties = new Properties();\n    properties.setProperty("user", "admin");\n    properties.setProperty("password", "quest");\n    properties.setProperty("sslmode", "disable");\n    properties.setProperty("options", "-c statement_timeout=300000");\n\n    final Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:8812/qdb", properties);\n    connection.setAutoCommit(false);\n\n    final PreparedStatement statement = connection.prepareStatement("CREATE TABLE IF NOT EXISTS trades (ts TIMESTAMP, date DATE, name STRING, value INT) timestamp(ts);");\n    statement.execute();\n\n    try (PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO trades VALUES (?, ?, ?, ?)")) {\n      preparedStatement.setTimestamp(1, new Timestamp(io.questdb.std.Os.currentTimeMicros()));\n      preparedStatement.setDate(2, new Date(System.currentTimeMillis()));\n      preparedStatement.setString(3, "abc");\n      preparedStatement.setInt(4, 123);\n      preparedStatement.execute();\n    }\n\n    final PreparedStatement statement = connection.prepareStatement("UPDATE trades SET value = value + 1000;");\n    statement.execute();\n\n    System.out.println("Done");\n    connection.close();\n  }\n}\n'))),(0,o.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("p",null,"This example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/psycopg/psycopg2"},"psycopg2")," database\nadapter which does not support prepared statements (bind variables). This\nfunctionality is on the roadmap for the antecedent\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/psycopg/psycopg3/projects/1"},"psychopg3")," adapter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import psycopg2 as pg\nimport datetime as dt\n\ntry:\n    connection = pg.connect(user="admin",\n                            password="quest",\n                            host="127.0.0.1",\n                            port="8812",\n                            database="qdb",\n                            options=\'-c statement_timeout=300000\')\n    cursor = connection.cursor()\n\n    # text-only query\n    cursor.execute("CREATE TABLE IF NOT EXISTS trades (ts TIMESTAMP, date DATE, name STRING, value INT) timestamp(ts);")\n\n    # insert 10 records\n    for x in range(10):\n      now = dt.datetime.utcnow()\n      date = dt.datetime.now().date()\n      cursor.execute("""\n        INSERT INTO trades\n        VALUES (%s, %s, %s, %s);\n        """, (now, date, "python example", x))\n    # commit records\n    connection.commit()\n\n    # update records\n    cursor.execute("UPDATE trades SET value = value + 100;")\n\n    cursor.execute("SELECT * FROM trades;")\n    records = cursor.fetchall()\n    for row in records:\n        print(row)\n\nfinally:\n    if (connection):\n        cursor.close()\n        connection.close()\n        print("Postgres connection is closed")\n')))),(0,o.kt)("h2",{id:"rest-api"},"REST API"),(0,o.kt)("p",null,"QuestDB exposes a REST API for compatibility with a wide range of libraries and\ntools. The REST API is accessible on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9000")," and has the following\nentrypoints:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/imp")," - import data"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"/exec")," - execute an SQL statement")),(0,o.kt)("p",null,"More details on the use of these entrypoints can be found on the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/rest/"},"REST API reference")," page."),(0,o.kt)("h3",{id:"imp-endpoint"},(0,o.kt)("inlineCode",{parentName:"h3"},"/imp")," endpoint"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/imp")," endpoint does not allow for updating data."),(0,o.kt)("h3",{id:"exec-endpoint"},(0,o.kt)("inlineCode",{parentName:"h3"},"/exec")," endpoint"),(0,o.kt)("p",null,"Alternatively, the ",(0,o.kt)("inlineCode",{parentName:"p"},"/exec")," endpoint can be used to create a table and the\n",(0,o.kt)("inlineCode",{parentName:"p"},"INSERT")," statement can be used to populate it with values:"),(0,o.kt)(s.Z,{defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"NodeJS",value:"nodejs"},{label:"Python",value:"python"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"curl",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'# Create Table\ncurl -G \\\n  --data-urlencode "query=CREATE TABLE IF NOT EXISTS trades(name STRING, value INT)" \\\n  http://localhost:9000/exec\n\n# Insert a row\ncurl -G \\\n  --data-urlencode "query=INSERT INTO trades VALUES(\'abc\', 123456)" \\\n  http://localhost:9000/exec\n\n# Update a row\ncurl -G \\\n  --data-urlencode "query=UPDATE trades SET value = 9876 WHERE name = \'abc\'" \\\n  http://localhost:9000/exec\n'))),(0,o.kt)(i.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"node-fetch")," package can be installed using ",(0,o.kt)("inlineCode",{parentName:"p"},"npm i node-fetch"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const fetch = require("node-fetch")\n\nconst HOST = "http://localhost:9000"\n\nasync function createTable() {\n  try {\n    const query = "CREATE TABLE IF NOT EXISTS trades (name STRING, value INT)";\n\n    const response = await fetch(`${HOST}/exec?query=${encodeURIComponent(query)}`)\n    const json = await response.json()\n\n    console.log(json)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nasync function insertData() {\n  try {\n    const query = "INSERT INTO trades VALUES(\'abc\', 123456)"\n\n    const response = await fetch(`${HOST}/exec?query=${encodeURIComponent(query)}`)\n    const json = await response.json()\n\n    console.log(json)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nasync function updateData() {\n  try {\n    const query = "UPDATE trades SET value = 9876 WHERE name = \'abc\'"\n\n    const response = await fetch(`${HOST}/exec?query=${encodeURIComponent(query)}`)\n    const json = await response.json()\n\n    console.log(json)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\ncreateTable().then(insertData).then(updateData)\n'))),(0,o.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nimport json\n\nhost = 'http://localhost:9000'\n\ndef run_query(sql_query):\n  query_params = {'query': sql_query, 'fmt' : 'json'}\n  try:\n    response = requests.get(host + '/exec', params=query_params)\n    json_response = json.loads(response.text)\n    print(json_response)\n  except requests.exceptions.RequestException as e:\n    print(\"Error: %s\" % (e))\n\n# create table\nrun_query(\"CREATE TABLE IF NOT EXISTS trades (name STRING, value INT)\")\n# insert row\nrun_query(\"INSERT INTO trades VALUES('abc', 123456)\")\n# update row\nrun_query(\"UPDATE trades SET value = 9876 WHERE name = 'abc'\")\n")))),(0,o.kt)("h2",{id:"web-console"},"Web Console"),(0,o.kt)("p",null,"By default, QuestDB has an embedded Web Console running at\nhttp://","[server-address]",":9000. When running locally, this is accessible at\n",(0,o.kt)("a",{parentName:"p",href:"http://localhost:9000"},"http://localhost:9000"),". The Web Console can be used to\nexplore table schemas, visualizing query results as tables or graphs, and\nimporting datasets from CSV files. For details on these components, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/web-console/"},"Web Console reference")," page."))}m.isMDXComponent=!0},6010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);