"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5945],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),c=r,m=p["".concat(l,".").concat(c)]||p[c]||h[c]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5548:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=n(46092),s=["components"],l={title:"Sending IoT sensor data from Arduino to QuestDB",author:"David G. Simmons",author_title:"QuestDB Team",author_url:"https://github.com/davidgs",author_image_url:"https://avatars.githubusercontent.com/davidgs",description:"See how to build an IoT application using Arduino, which sends temperature and humidity sensor data to QuestDB.",keywords:["arduino","iot","timeseries","questdb"],tags:["tutorial","iot","arduino"],image:"/img/blog/shared/og-arduino.png"},u={permalink:"/blog/2020/06/05/iot-on-questdb",source:"@site/blog/2020-06-05-iot-on-questdb.mdx",title:"Sending IoT sensor data from Arduino to QuestDB",description:"See how to build an IoT application using Arduino, which sends temperature and humidity sensor data to QuestDB.",date:"2020-06-05T00:00:00.000Z",formattedDate:"June 5, 2020",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"iot",permalink:"/blog/tags/iot"},{label:"arduino",permalink:"/blog/tags/arduino"}],readingTime:6.765,truncated:!0,prevItem:{title:"Querying data in a Jupyter Notebook",permalink:"/blog/2020/06/15/python-questdb-tutorial"},nextItem:{title:"Things we learned about sums",permalink:"/blog/2020/05/12/interesting-things-we-learned-about-sums"}},d=[{value:"The Database Part",id:"the-database-part",children:[]},{value:"The Sensor Part",id:"the-sensor-part",children:[]},{value:"The Code Part",id:"the-code-part",children:[]},{value:"That Pointer",id:"that-pointer",children:[]},{value:"Querying the Data",id:"querying-the-data",children:[]},{value:"What&#39;s Next",id:"whats-next",children:[]}],h={toc:d};function p(e){var t=e.components,l=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{alt:"A dashboard showing several graphs with operational data",height:365,src:"/img/blog/2020-06-05/banner.jpg",width:650,mdxType:"Banner"},"Photo by ",(0,i.kt)("a",{href:"https://unsplash.com/@felishks"},"F\xe9lix Girault")," on"," ",(0,i.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,i.kt)("p",null,"This tutorial covers my first steps of connecting an IoT device to QuestDB to\nexplore the features and functionality. After using InfluxDB as a main data\nstore for sensor data in the past, I'll be looking at the workflow and ease of\nuse from this perspective and showing how simple it is for me to make the switch\nover to QuestDB."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This tutorial uses the UDP receiver, which is deprecated since QuestDB version\n6.5.2. We recommend the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/tcp-receiver/"},"TCP receiver"),"\ninstead."))),(0,i.kt)("h2",{id:"the-database-part"},"The Database Part"),(0,i.kt)("p",null,"The first thing I had to do was to get QuestDB up and running. Luckily, this is\nvery straightforward. There are a few options, the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/get-started/docker"},"Docker")," image for those who want to run without\ninstalling any dependencies, a ",(0,i.kt)("a",{parentName:"p",href:"/docs/get-started/homebrew"},"Homebrew")," install\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"brew install questdb"),", grabbing the ",(0,i.kt)("a",{parentName:"p",href:"/docs/get-started/binaries"},"binaries"),"\ndirectly, and building from source. Since I work here, and I wanted to test out\nthe latest and greatest Web Console, I decided to build using maven:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mvn clean package -DskipTests\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Terminal showing QuestDB being build from its source code",src:n(9475).Z})),(0,i.kt)("p",null,"It builds really quickly due to the lack of external dependencies, so that is\ngreat! Then all that's left to do is to start the server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir qdb\njava -p core/target/questdb-5.0.5-SNAPSHOT.jar -m io.questdb/io.questdb.ServerMain -d qdb\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Terminal showing how to start QuestDB",src:n(29252).Z})),(0,i.kt)("p",null,"That is literally all there is to getting QuestDB built and running. But that's\njust the first part. Now it's time to do something actually useful with it.\nFirst, I'll need to create a table in QuestDB to store my IoT Data (A bit more\non this later, so store a pointer to this)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"create table iot (\n  dev_id symbol index,\n  dev_name symbol index,\n  temperature double,\n  humidity double,\n  timestamp timestamp\n) timestamp(timestamp) partition by MONTH;\n")),(0,i.kt)("p",null,"Remember, we're using standard ANSI SQL here, so there's no new language or\nsyntax to learn. This is a straightforward table that I'm building because I'm\ngoing to be using an ESP8266 with an (honestly not very accurate) DHT11\ntemperature and humidity sensor on it."),(0,i.kt)("h2",{id:"the-sensor-part"},"The Sensor Part"),(0,i.kt)("p",null,"For this, I'm going to use an ESP8266-based WEMOS D1 Mini only because I happen\nto have a giant pile of them lying around. I buy them in bulk because they are a\ndollar or 2 each, easy to use, and largely disposable if I blow one up (which I\ndo with alarming regularity.). The circuit is very simple to put together:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Electrical schema showing how the sensor is wired",src:n(77728).Z})),(0,i.kt)("p",null,"I used an actual WEMOS Shield with the DHT11 on it, so I didn't have to\nbreadboard it, but this schematic gives you an idea of how simple the wiring is.\nIt's literally 3 wires."),(0,i.kt)("h2",{id:"the-code-part"},"The Code Part"),(0,i.kt)("p",null,"Here is where the magic happens. How I actually send the sensor data to the\ndatabase. There is a simple example program included with the Adafruit DHT\nUnified Sensor Library that I recommend starting with to make this a bit easier.\nIt already has all the parts to read from the sensor, so you don't have to write\nthose from scratch. Remember, good developers copy, but great developers paste!"),(0,i.kt)("p",null,"Since I'm using the 8266, and I'll need internet connectivity, I'll need all the\nWiFi bits:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"#include <WiFiServerSecure.h>\n#include <WiFiClientSecure.h>\n#include <WiFiClientSecureBearSSL.h>\n#include <ESP8266WiFi.h>\n#include <ESP8266WiFiMulti.h>\n#include <WiFiUdp.h>\n#include <ESP8266WiFiType.h>\n#include <CertStoreBearSSL.h>\n#include <ESP8266WiFiAP.h>\n#include <WiFiClient.h>\n#include <BearSSLHelpers.h>\n#include <WiFiServer.h>\n#include <ESP8266WiFiScan.h>\n#include <WiFiServerSecureBearSSL.h>\n#include <ESP8266WiFiGeneric.h>\n#include <ESP8266WiFiSTA.h>\n#include <WiFiClientSecureAxTLS.h>\n#include <WiFiServerSecureAxTLS.h>\n")),(0,i.kt)("p",null,"Really all you have to do is go to the 'Sketch' Menu, Choose 'Include Library'\nand select the 'ESP8266WiFi' library, and you get all this stuff imported for\nyou."),(0,i.kt)("p",null,"Here's some boilerplate code you can always use to get your ESP8266 on your\nWiFi:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <Adafruit_Sensor.h>\n#include <DHT.h>\n#include <DHT_U.h>\n#define DHTPIN D4\n\n// Digital pin connected to the DHT sensor\n#define DHTTYPE DHT11 // DHT 11\n#define QUEST_SERVER "10.10.10.10" // use your server\'s IP address!\n#define QUEST_PORT 9009\n#define SENSOR_ID 4343 // I made this up\n#define SENSOR_NAME "DHT11-WEMOS"\n\nconst char* ssid = "your-ssid";\nconst char* password = "your-password";\nDHT_Unified dht(DHTPIN, DHTTYPE);\nuint32_t delayMS;\nWiFiUDP Udp;\n\nvoid setup(){\n  Serial.begin(115200);\n  delay(10);\n  // We start by connecting to a WiFi network\n  Serial.print("Connecting to ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n  Serial.println("");\n  Serial.println("WiFi connected");\n  Serial.println("IP address: ");\n  Serial.println(WiFi.localIP());\n  dht.begin();\n  Udp.begin(QUEST_PORT);\n  Serial.println(F("DHTxx Unified Sensor Example"));\n  // Print temperature sensor details.\n  sensor_t sensor;\n  dht.temperature().getSensor(&sensor);\n  Serial.println(F("------------------------------------"));\n  Serial.println(F("Temperature Sensor"));\n  Serial.print (F("Sensor Type: "));\n  Serial.println(sensor.name);\n  Serial.print (F("Driver Ver: "));\n  Serial.println(sensor.version);\n  Serial.print (F("Unique ID: "));\n  Serial.println(sensor.sensor_id);\n  Serial.print (F("Max Value: "));\n  Serial.print(sensor.max_value);\n  Serial.println(F("\xb0C"));\n  Serial.print (F("Min Value: "));\n  Serial.print(sensor.min_value);\n  Serial.println(F("\xb0C"));\n  Serial.print (F("Resolution: "));\n}\n')),(0,i.kt)("p",null,"That gets the basics set up. Running that should get you a WiFi connection and a\nfully configured DHT11 sensor. We're almost ready to start sending data to the\ndatabase."),(0,i.kt)("p",null,"You might have noticed the UDP stuff I snuck in there. That's because we're\ngoing to make this super easy and use UDP to send our data. And there's\na\xa0",(0,i.kt)("strong",null,"really")," good reason for that: InfluxDB line protocol. You see,\nQuestDB has a built-in InfluxDB line Protocol listener, but (for now) it's only\nlistening on a UDP port. So we're going to use that."),(0,i.kt)("p",null,"Now, to send some data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'void loop() {\n  // Delay between measurements.\n  delay(delayMS);\n  char *buffer;\n  buffer = (char *)malloc(256);\n  // Get temperature event and print its value.\n  double temp = -212;\n  double hum = -1;\n  sensors_event_t event;\n  dht.temperature().getEvent(&event);\n  if (isnan(event.temperature)) {\n    Serial.println(F("Error reading temperature!"));\n  } else {\n    Serial.print(F("Temperature: "));\n    Serial.print(event.temperature);\n    temp = event.temperature;\n    Serial.println(F("\xb0C"));\n  }\n  // Get humidity event and print its value.\n  dht.humidity().getEvent(&event);\n  if (isnan(event.relative_humidity)) {\n    Serial.println(F("Error reading humidity!"));\n  } else {\n    Serial.print(F("Humidity: "));\n    Serial.print(event.relative_humidity);\n    hum = event.relative_humidity;\n    Serial.println(F("%"));\n  }\n  if(temp != -212 && hum != -1){\n    char tTemp[10];\n    char hTemp[10];\n    dtostrf(temp, 4, 2, tTemp);\n    dtostrf(hum, 4, 2, hTemp);\n    sprintf(buffer, "iot,dev_id=%d,dev_name=%s temp_c=%s,humidity=%s", SENSOR_ID, SENSOR_NAME, tTemp, hTemp);\n    Serial.println(buffer);\n    Udp.beginPacket(QUEST_SERVER, QUEST_PORT);\n    Udp.write(buffer);\n    Udp.endPacket();\n  }\n  free(buffer);\n}\n')),(0,i.kt)("p",null,"Yeah, a lot is going on in there, so let's break it down. First, I'm creating a\nbuffer to hold the data I'm going to send, and then I'll do a read of the\nsensor. I set the ",(0,i.kt)("inlineCode",{parentName:"p"},"temp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hum")," variables to values that I know the sensor\nwill never return so that I can check that I got valid readings later to avoid\nsending gibberish to the database."),(0,i.kt)("p",null,"I have to do some shenanigans with the temperature and humidity values in there\nbecause one of the shortcomings of Arduinos is that they don't have ",(0,i.kt)("inlineCode",{parentName:"p"},"sprintf"),"\nsupport for doubles. I know. So I turn them into strings and move on. Once they\narrive at the database, they are interpreted as doubles and life is good. Not\nworth fighting about. I can then construct a buffer with straight line protocol\nand ship it off to QuestDB over UDP."),(0,i.kt)("p",null,"Don't forget to free the memory!"),(0,i.kt)("h2",{id:"that-pointer"},"That Pointer"),(0,i.kt)("p",null,"Remember I told you to set a pointer earlier about creating the database? Well,\nhere's where I come back to that. You don't\xa0",(0,i.kt)("em",null,"actually")," have to create the\ndatabase ahead of time\xa0",(0,i.kt)("em",null,"unless")," you want to do things like set indexes,\netc. If all you want to do is have straight values in there, then guess what?\nSchema-on-write is a thing here. You can start writing data to the database, and\nit will happily store them for you. Pretty cool stuff."),(0,i.kt)("h2",{id:"querying-the-data"},"Querying the Data"),(0,i.kt)("p",null,"Using the QuestDB Console, you can then query the data to make sure you're\ngetting what you expect:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Running a SELECT query on the Web Console. The result is in both a table and a chart",src:n(22448).Z})),(0,i.kt)("p",null,"That's exactly what I expected!"),(0,i.kt)("h2",{id:"whats-next"},"What's Next"),(0,i.kt)("p",null,"Now it's time to start building some dashboards on top of this. I'm currently\nworking on connecting this all up with Node-Red, or making use of the support\nfor Grafana, which will be huge, so stay tuned for that. If you like what you\nsee here, pleases go give us a star on ",(0,i.kt)("a",{parentName:"p",href:"https://"},"GitHub"),", and follow the\nproject if you'd like to get updates!"))}p.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})},9475:function(e,t,n){t.Z=n.p+"assets/images/build-82ea418e9a1c6799a91d63cc78e62a03.gif"},22448:function(e,t,n){t.Z=n.p+"assets/images/queries-698b6f4cae26b1fd444dc992d2959eee.gif"},77728:function(e,t,n){t.Z=n.p+"assets/images/sensor-1ca379b49a8ea16563ae25872f3eb6c1.png"},29252:function(e,t,n){t.Z=n.p+"assets/images/start-d9a110dcbbee7b1f6a444b519441db1c.gif"}}]);