"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[1686],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=a,d=h["".concat(l,".").concat(m)]||h[m]||u[m]||i;return n?o.createElement(d,r(r({ref:t},p),{},{components:n})):o.createElement(d,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},97197:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var o=n(83117),a=n(80102),i=(n(67294),n(3905)),r=n(46092),s=n(72525),l=["components"],c={title:"A low-code bitcoin ticker built with QuestDB and n8n.io",author:"Brian Smith",author_title:"QuestDB Team",author_url:"https://github.com/bsmth",author_image_url:"https://avatars.githubusercontent.com/bsmth",description:"This tutorial shows how to build a bitcoin ticker for ingesting real-time data into QuestDB using n8n.io",keywords:["timeseries","bitcoin","streaming","n8n","lowcode"],tags:["tutorial","low code","bitcoin","market data","streaming","n8n","crypto"],image:"/img/blog/2021-01-18/og.png"},p={permalink:"/blog/2021/01/18/low-code-bitcoin-ticker-workflow-with-time-series-database",source:"@site/blog/2021-01-18-low-code-bitcoin-ticker-workflow-with-time-series-database.mdx",title:"A low-code bitcoin ticker built with QuestDB and n8n.io",description:"This tutorial shows how to build a bitcoin ticker for ingesting real-time data into QuestDB using n8n.io",date:"2021-01-18T00:00:00.000Z",formattedDate:"January 18, 2021",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"low code",permalink:"/blog/tags/low-code"},{label:"bitcoin",permalink:"/blog/tags/bitcoin"},{label:"market data",permalink:"/blog/tags/market-data"},{label:"streaming",permalink:"/blog/tags/streaming"},{label:"n8n",permalink:"/blog/tags/n-8-n"},{label:"crypto",permalink:"/blog/tags/crypto"}],readingTime:5.985,truncated:!0,prevItem:{title:"Stream heart rate data into QuestDB via Google IoT Core",permalink:"/blog/2021/02/05/streaming-heart-rate-data-with-iot-core-and-questdb"},nextItem:{title:"Monitoring the uptime of an application with Python, Nuxt.js and QuestDB",permalink:"/blog/2021/01/13/application-uptime-monitoring-with-python-nuxtjs-questdb"}},u=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"What is a low-code platform",id:"what-is-a-low-code-platform",children:[]},{value:"Setup steps",id:"setup-steps",children:[]},{value:"Import an example workflow",id:"import-an-example-workflow",children:[]},{value:"Connecting to QuestDB",id:"connecting-to-questdb",children:[]},{value:"Activating the workflow",id:"activating-the-workflow",children:[]},{value:"Next steps",id:"next-steps",children:[]}],h={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{alt:"A close-up of a laptop monitor showing a graph of data points over time",height:433,src:"/img/blog/2021-01-18/banner.jpg",width:650,mdxType:"Banner"},"Photo by ",(0,i.kt)("a",{href:"https://unsplash.com/photos/IrRbSND5EUc"},"Markus Winkler")," ","via ",(0,i.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,i.kt)("p",null,"We've had many predictions of the emerging trends of 2020. Three that ended up\nringing very true were the popularity of low-code platforms, the rise of\ntime-series databases, and a digital currency boom. This tutorial combines these\nthree topics into one example workflow automation that stores and analyzes\nBitcoin market prices in QuestDB with a workflow template to get up and running\nquickly."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"This tutorial will use the docker images for both QuestDB and n8n.io so users\nshould ensure that they have the following installed and running on their\nsystem:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker Desktop"))),(0,i.kt)("p",null,"Confirm that this is correctly set up by requesting the version number:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker --version\nDocker version 20.10.2, build 2291f61\n")),(0,i.kt)("h2",{id:"what-is-a-low-code-platform"},"What is a low-code platform"),(0,i.kt)("p",null,"low-code platforms allow for building applications without having to dig deep\ninto code or technical implementation details. Most of the tools in this\ncategory use a visual editor and have drag-and-drop features to allow for\nquickly building systems that would otherwise require more intensive development\nresources. The main benefits are for users who either lack professional\nprogramming experience or don't want to invest time building applications from\nthe ground up and manage rapidly-changing compatibility issues."),(0,i.kt)("p",null,"A great platform that I've been using recently is ",(0,i.kt)("a",{parentName:"p",href:"https://n8n.io/"},"n8n.io"),",\nwhich offers a creative and efficient visual editor for process automation. Over\n200 integrations supported out-of-the-box means you have a lot to choose from if\nyou want to start streaming data into QuestDB from the supported nodes quickly."),(0,i.kt)("p",null,"This tutorial demonstrates how to use an n8n.io workflow that queries Bitcoin\nmarket prices via a REST API and uses QuestDB as a data store for the market\nprices as time series data."),(0,i.kt)("h2",{id:"setup-steps"},"Setup steps"),(0,i.kt)("p",null,"The first step will be to get n8n.io up and running using docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it --rm \\\n  --name n8n \\\n  -p 5678:5678 \\\n  -v ~/.n8n:/home/node/.n8n \\\n  n8nio/n8n\n")),(0,i.kt)("p",null,"This command mounts a volume with ",(0,i.kt)("inlineCode",{parentName:"p"},"-v")," so that user configurations will be saved\nat ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.n8n"),". QuestDB can be started with the following docker command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker run -p 9000:9000 -p 8812:8812 --name questdb-n8n questdb/questdb\n")),(0,i.kt)("p",null,"By giving the container a name with ",(0,i.kt)("inlineCode",{parentName:"p"},"--name questdb"),", we have an easy way to\nrefer to the container created by ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," later on. If we want to re-use the same\ncontainer (and its data!) after it has been stopped, we can use the following\ncommands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"# bring the container up\ndocker start questdb-n8n\n# shut the container down\ndocker stop questdb-n8n\n")),(0,i.kt)("h2",{id:"import-an-example-workflow"},"Import an example workflow"),(0,i.kt)("p",null,"To get started with our example workflow, navigate to\n",(0,i.kt)("a",{parentName:"p",href:"http://localhost:5678/"},"http://localhost:5678/"),". In the left menu, click the\ngreater-than icon ",(0,i.kt)("strong",{parentName:"p"},">")," to expand the menu and reveal a navigation panel. To\nhelp us along with the setup steps, we have a template that can be imported\ndirectly from a URL."),(0,i.kt)("p",null,"Select ",(0,i.kt)("strong",{parentName:"p"},"Workflows")," -> ",(0,i.kt)("strong",{parentName:"p"},"import from URL")," and paste the following URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"https://questdb-docs.s3-eu-west-1.amazonaws.com/QuestDB_BTC_Ticker.json\n")),(0,i.kt)("p",null,"If imported successfully, the workflow will be generated automatically in the\neditor window:"),(0,i.kt)(s.Z,{alt:"Submission form to import an n8n.io workflow from URL",height:284,src:"/img/blog/2021-01-18/imported-workflow.png",title:"Example QuestDB BTC ticker workflow imported from URL",width:650,mdxType:"Screenshot"}),(0,i.kt)("p",null,"Each of the nodes with their configuration can be inspected at any time by\ndouble-clicking and inspecting the ",(0,i.kt)("strong",{parentName:"p"},"Parameters")," and ",(0,i.kt)("strong",{parentName:"p"},"Settings")," panel. From\nleft-to-right we have the following objects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"QuestDB")," node which executes an SQL statement to create our ",(0,i.kt)("inlineCode",{parentName:"li"},"btc")," table"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"cron")," node which is set to a 1 minute interval"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"HTTP Request")," node which makes a ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")," request to a public API with latest\nBTC value in USD"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Set")," node which selects the fields we are interested in from the HTTP\nresponse and assigns them the correct type"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"QuestDB")," node which inserts incoming values from the Set node into a ",(0,i.kt)("inlineCode",{parentName:"li"},"btc"),"\ntable")),(0,i.kt)("h2",{id:"connecting-to-questdb"},"Connecting to QuestDB"),(0,i.kt)("p",null,"Before we activate the workflow, we have to provide connection credentials to\nQuestDB. In the left navigation menu, select ",(0,i.kt)("strong",{parentName:"p"},"Credentials")," -> ",(0,i.kt)("strong",{parentName:"p"},"New")," and\nchoose type ",(0,i.kt)("strong",{parentName:"p"},"QuestDB"),"."),(0,i.kt)("p",null,"The default configuration provides most of the information we need for a QuestDB\ninstances running locally, but we will need to allow the QuestDB node access to\nthese credentials in the ",(0,i.kt)("strong",{parentName:"p"},"Nodes with access")," section."),(0,i.kt)("p",null,"When correctly set up, the credentials configuration should look like the\nfollowing:"),(0,i.kt)(s.Z,{alt:"A credentials submission form for connecting n8n.io to QuestDB",height:284,src:"/img/blog/2021-01-18/questdb-credentials.png",title:"Adding connection parameters for QuestDB",width:650,mdxType:"Screenshot"}),(0,i.kt)("h2",{id:"activating-the-workflow"},"Activating the workflow"),(0,i.kt)("p",null,"To check if the workflow is correctly configured, click the ",(0,i.kt)("strong",{parentName:"p"},"Execute Node"),"\nbutton on the first QuestDB node. On success, we should have a new table ",(0,i.kt)("inlineCode",{parentName:"p"},"btc"),"\nwith a ",(0,i.kt)("inlineCode",{parentName:"p"},"Timestamp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"price")," column. Activating the workflow with the toggle\nin the top-right of the workflow editor will prompt you to save the workflow if\nyou have not done so already. Give the workflow the name ",(0,i.kt)("inlineCode",{parentName:"p"},"QuestDB BTC Ticker"),"\nand click ",(0,i.kt)("strong",{parentName:"p"},"Save"),". If everything is set up correctly, we will have a success\nindicator on each of the nodes which are passing as expected and a notification\nwindow will display the status of the workflow:"),(0,i.kt)(s.Z,{alt:"An active n8n.io workflow writing Bitcoin market price to QuestDB",height:284,src:"/img/blog/2021-01-18/active-btc-ticker.png",title:"The active workflow writing data to QuestDB",width:650,mdxType:"Screenshot"}),(0,i.kt)("p",null,"We can confirm that we are writing data to QuestDB by navigating to\n",(0,i.kt)("a",{parentName:"p",href:"http://localhost:9000/"},"http://localhost:9000/"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"btc")," table is visible in\nthe top-left ",(0,i.kt)("strong",{parentName:"p"},"Tables")," panel and we can query incoming requests by simply\nadding ",(0,i.kt)("inlineCode",{parentName:"p"},"btc")," to the query editor and selecting ",(0,i.kt)("strong",{parentName:"p"},"Run"),". The data will be\nreturned as a table by default, but can easily be graphed by selecting the\n",(0,i.kt)("strong",{parentName:"p"},"Chart")," button and specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"price")," as the series to visualize:"),(0,i.kt)(s.Z,{alt:"Time series data returned by QuestDB graphed as a chart",height:284,src:"/img/blog/2021-01-18/create-chart.png",title:"Graphing our ticker data in QuestDB",width:650,mdxType:"Screenshot"}),(0,i.kt)("p",null,"We can create some aggregate queries if we require specific data points or\ncharts. The following SQL query allows for 5 minute aggregates of our incoming\nBTC pricing data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SELECT count() as entries, Timestamp, avg(price)\nFROM (btc timestamp(Timestamp))\nSAMPLE BY 5m;\n")),(0,i.kt)(s.Z,{alt:"Time series data graphed in QuestDB using five minute aggregates",height:284,src:"/img/blog/2021-01-18/charting-aggregates.png",title:"Graphing 5 minute aggregates of our ticker data in QuestDB",width:650,mdxType:"Screenshot"}),(0,i.kt)("h2",{id:"next-steps"},"Next steps"),(0,i.kt)("p",null,"In this article, we've covered how to get started with n8n.io, a low-code\nworkflow automation platform to query a public REST API, stream data into\nQuestDB, and build some simple data visualizations with QuestDB's built-in\ncharting functionality. Our example uses minimal information we need from the\nREST API, so future changes could be to have more fields or currencies being\ninserted into QuestDB to make more interesting comparisons across multiple\ntables. We are also using the ",(0,i.kt)("strong",{parentName:"p"},"cron")," node with an interval of 1 minute, so\nimprovements would be to use a node that can provide much higher rates of\ningestion to leverage the performance benefits of QuestDB."),(0,i.kt)("p",null,"For inspiration and troubleshooting workflow automations using n8n, take a look\nat the ",(0,i.kt)("a",{parentName:"p",href:"https://community.n8n.io/"},"n8n community")," forum. If you like this\ncontent, we'd love to know your thoughts! Feel free to share your feedback or\njust come and say hello in the ",(0,i.kt)("a",{parentName:"p",href:"https://"},"QuestDB Community Slack"),"."))}m.isMDXComponent=!0},86010:function(e,t,n){function o(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=o(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=o(e))&&(a&&(a+=" "),a+=t);return a}n.d(t,{Z:function(){return a}})}}]);