"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5731],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(h,l(l({ref:n},p),{},{components:t})):r.createElement(h,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},1395:function(e,n,t){t.d(n,{Z:function(){return p}});var r=t(7294),a=t(944),o=t(6010),l="tabItem_vU9c",s="tabItemActive_cw6a";var i=37,c=39;var p=function(e){var n=e.lazy,t=e.block,p=e.defaultValue,u=e.values,d=e.groupId,m=e.className,h=(0,a.Z)(),g=h.tabGroupChoices,f=h.setTabGroupChoices,b=(0,r.useState)(p),y=b[0],k=b[1],v=r.Children.toArray(e.children),N=[];if(null!=d){var w=g[d];null!=w&&w!==y&&u.some((function(e){return e.value===w}))&&k(w)}var q=function(e){var n=e.currentTarget,t=N.indexOf(n),r=u[t].value;k(r),null!=d&&(f(d,r),setTimeout((function(){var e,t,r,a,o,l,i,c;(e=n.getBoundingClientRect(),t=e.top,r=e.left,a=e.bottom,o=e.right,l=window,i=l.innerHeight,c=l.innerWidth,t>=0&&o<=c&&a<=i&&r>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(s),setTimeout((function(){return n.classList.remove(s)}),2e3))}),150))},x=function(e){var n,t;switch(e.keyCode){case c:var r=N.indexOf(e.target)+1;t=N[r]||N[0];break;case i:var a=N.indexOf(e.target)-1;t=N[a]||N[N.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},m)},u.map((function(e){var n=e.value,t=e.label;return r.createElement("li",{role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":y===n}),key:n,ref:function(e){return N.push(e)},onKeyDown:x,onFocus:q,onClick:q},t)}))),n?(0,r.cloneElement)(v.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},v.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}},9443:function(e,n,t){var r=(0,t(7294).createContext)(void 0);n.Z=r},944:function(e,n,t){var r=t(7294),a=t(9443);n.Z=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},7276:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return h}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),l=t(1395),s=t(8215),i=t(2525),c=["components"],p={},u={unversionedId:"develop/query-data",id:"develop/query-data",isDocsHomePage:!1,title:"Query data",description:"This page describes how to query data from QuestDB using different programming",source:"@site/docs/develop/query-data.md",sourceDirName:"develop",slug:"/develop/query-data",permalink:"/docs/develop/query-data",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/develop/query-data.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Insert data",permalink:"/docs/develop/insert-data"},next:{title:"Update data",permalink:"/docs/develop/update-data"}},d=[{value:"Web Console",id:"web-console",children:[]},{value:"PostgreSQL wire protocol",id:"postgresql-wire-protocol",children:[]},{value:"HTTP REST API",id:"http-rest-api",children:[{value:"<code>/exp</code>: SQL Query to CSV",id:"exp-sql-query-to-csv",children:[]},{value:"<code>/exec</code>: SQL Query to JSON",id:"exec-sql-query-to-json",children:[]},{value:"Querying Data",id:"querying-data",children:[]}]}],m={toc:d};function h(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page describes how to query data from QuestDB using different programming\nlanguages and tools."),(0,o.kt)("p",null,"For ad-hoc SQL queries, including CSV download and charting use the web console.\nApplications can choose between the HTTP REST API which returns JSON or use\nthe PostgreSQL wire protocol."),(0,o.kt)("p",null,"Here are all your options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#web-console"},"Web Console"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"SELECT")," statements."),(0,o.kt)("li",{parentName:"ul"},"Download query results as CSV."),(0,o.kt)("li",{parentName:"ul"},"Chart query results."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#postgresql-wire-protocol"},"PostgreSQL wire protocol"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"SELECT")," statements."),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"psql")," on the command line."),(0,o.kt)("li",{parentName:"ul"},"Interoperability with third-party tools and libraries."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#http-rest-api"},"HTTP REST API"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"SQL ",(0,o.kt)("inlineCode",{parentName:"li"},"SELECT")," statements as JSON or CSV."),(0,o.kt)("li",{parentName:"ul"},"Result paging.")))),(0,o.kt)("h2",{id:"web-console"},"Web Console"),(0,o.kt)("p",null,"QuestDB ships with an embedded Web Console running by default on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9000"),"."),(0,o.kt)("a",{href:"web-console"},(0,o.kt)(i.Z,{alt:"Screenshot of the Web Console",height:375,small:!0,src:"/img/docs/console/overview.png",width:500,mdxType:"Screenshot"})),(0,o.kt)("p",null,"To query data from the web console, SQL statements can be written in the code\neditor and executed by clicking the ",(0,o.kt)("strong",{parentName:"p"},"Run")," button."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:"title='Listing tables and querying a table'",title:"'Listing",tables:!0,and:!0,querying:!0,a:!0,"table'":!0},"SHOW TABLES;\nSELECT * FROM my_table;\n\n--Note that `SELECT * FROM` is optional\nmy_table;\n")),(0,o.kt)("p",null,"Aside from the Code Editor, the Web Console includes a data visualization panel\nfor viewing query results as tables or graphs and an Import tab for uploading\ndatasets as CSV files. For more details on these components and general use of\nthe console, see the ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/web-console"},"Web Console")," page."),(0,o.kt)("h2",{id:"postgresql-wire-protocol"},"PostgreSQL wire protocol"),(0,o.kt)("p",null,"You can query data using the Postgres endpoint\nthat QuestDB exposes which is accessible by default via port ",(0,o.kt)("inlineCode",{parentName:"p"},"8812"),". Examples in\nmultiple languages are shown below. To learn more, check out our docs about\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/postgres"},"Postgres compatibility and tools"),"."),(0,o.kt)(l.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"NodeJS",value:"nodejs"},{label:"Go",value:"go"},{label:"C#",value:"csharp"},{label:"C",value:"c"},{label:"Ruby",value:"ruby"},{label:"PHP",value:"php"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import psycopg2\n\nconnection = None\ncursor = None\ntry:\n    connection = psycopg2.connect(\n        user='admin',\n        password='quest',\n        host='127.0.0.1',\n        port='8812',\n        database='qdb')\n    cursor = connection.cursor()\n    postgreSQL_select_Query = 'SELECT x FROM long_sequence(5);'\n    cursor.execute(postgreSQL_select_Query)\n    print('Selecting rows from test table using cursor.fetchall')\n    mobile_records = cursor.fetchall()\n\n    print(\"Print each row and it's columns values\")\n    for row in mobile_records:\n        print(\"y = \", row[0], \"\\n\")\nexcept (Exception, psycopg2.Error) as error:\n    print(\"Error while fetching data from PostgreSQL\", error)\nfinally:\n    if cursor:\n        cursor.close()\n    if connection:\n        connection.close()\n    print(\"PostgreSQL connection is closed\")\n"))),(0,o.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.myco;\n\nimport java.sql.*;\nimport java.util.Properties;\n\npublic class App {\n    public static void main(String[] args) throws SQLException {\n        Properties properties = new Properties();\n        properties.setProperty("user", "admin");\n        properties.setProperty("password", "quest");\n        properties.setProperty("sslmode", "disable");\n\n        final Connection connection = DriverManager.getConnection(\n            "jdbc:postgresql://localhost:8812/qdb", properties);\n        try (PreparedStatement preparedStatement = connection.prepareStatement(\n                "SELECT x FROM long_sequence(5);")) {\n            try (ResultSet rs = preparedStatement.executeQuery()) {\n                while (rs.next()) {\n                    System.out.println(rs.getLong(1));\n                }\n            }\n        }\n        connection.close();\n    }\n}\n\n'))),(0,o.kt)(s.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'"use strict"\n\nconst { Client } = require("pg")\n\nconst start = async () => {\n  const client = new Client({\n    database: "qdb",\n    host: "127.0.0.1",\n    password: "quest",\n    port: 8812,\n    user: "admin",\n  })\n  await client.connect()\n\n  const res = await client.query("SELECT x FROM long_sequence(5);")\n\n  console.log(res.rows)\n\n  await client.end()\n}\n\nstart().catch(console.error)\n'))),(0,o.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "database/sql"\n  "fmt"\n\n  _ "github.com/lib/pq"\n)\n\nconst (\n  host     = "localhost"\n  port     = 8812\n  user     = "admin"\n  password = "quest"\n  dbname   = "qdb"\n)\n\nfunc main() {\n  connStr := fmt.Sprintf(\n    "host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",\n    host, port, user, password, dbname)\n  db, err := sql.Open("postgres", connStr)\n  checkErr(err)\n  defer db.Close()\n\n  // Currently, we do not support queries with bind parameters in Go\n  rows, err := db.Query("SELECT x FROM long_sequence(5);")\n  checkErr(err)\n  defer rows.Close()\n\n  for rows.Next() {\n    var num string\n    err = rows.Scan(&num)\n    checkErr(err)\n    fmt.Println(num)\n  }\n\n  err = rows.Err()\n  checkErr(err)\n}\n\nfunc checkErr(err error) {\n  if err != nil {\n    panic(err)\n  }\n}\n\n'))),(0,o.kt)(s.Z,{value:"c",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'// compile with\n// g++ libpq_example.c -o libpq_example.exe  -I pgsql\\include -L dev\\pgsql\\lib\n// -std=c++17  -lpthread -lpq\n#include <libpq-fe.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid do_exit(PGconn *conn) {\n  PQfinish(conn);\n  exit(1);\n}\n\nint main() {\n  PGconn *conn = PQconnectdb(\n      "host=localhost user=admin password=quest port=8812 dbname=testdb");\n  if (PQstatus(conn) == CONNECTION_BAD) {\n    fprintf(stderr, "Connection to database failed: %s\\n",\n            PQerrorMessage(conn));\n    do_exit(conn);\n  }\n  PGresult *res = PQexec(conn, "SELECT x FROM long_sequence(5);");\n  if (PQresultStatus(res) != PGRES_TUPLES_OK) {\n    printf("No data retrieved\\n");\n    PQclear(res);\n    do_exit(conn);\n  }\n  int rows = PQntuples(res);\n  for (int i = 0; i < rows; i++) {\n    printf("%s\\n", PQgetvalue(res, i, 0));\n  }\n  PQclear(res);\n  PQfinish(conn);\n  return 0;\n}\n'))),(0,o.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using Npgsql;\nstring username = "admin";\nstring password = "quest";\nstring database = "qdb";\nint port = 8812;\nvar connectionString = $@"host=localhost;port={port};username={username};password={password};\ndatabase={database};ServerCompatibilityMode=NoTypeLoading;";\nawait using NpgsqlConnection connection = new NpgsqlConnection(connectionString);\nawait connection.OpenAsync();\n\nvar sql = "SELECT x FROM long_sequence(5);";\n\nawait using NpgsqlCommand command = new NpgsqlCommand(sql, connection);\nawait using (var reader = await command.ExecuteReaderAsync()) {\n    while (await reader.ReadAsync())\n    {\n        var station = reader.GetString(0);\n        var height = double.Parse(reader.GetString(1));\n        var timestamp = reader.GetString(2);\n    }\n}\n'))),(0,o.kt)(s.Z,{value:"ruby",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"require 'pg'\nbegin\n    conn =PG.connect( host: \"127.0.0.1\", port: 8812, dbname: 'qdb', \n                      user: 'admin', password: 'quest' )\n    rows = conn.exec 'SELECT x FROM long_sequence(5);'\n    rows.each do |row|\n        puts row\n    end\nrescue PG::Error => e\n     puts e.message\nensure\n    conn.close if conn\nend\n"))),(0,o.kt)(s.Z,{value:"php",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nfunction exceptions_error_handler($severity, $message, $filename, $lineno) {\n    throw new ErrorException($message, 0, $severity, $filename, $lineno);\n}\n\nset_error_handler('exceptions_error_handler');\n$db_conn = null;\n\ntry {\n        $db_conn = pg_connect(\" host = 'localhost' port=8812 dbname = 'qdb' user = 'admin'  password = 'quest' \");\n        $result = pg_query($db_conn, 'SELECT x FROM long_sequence(5);' );\n        while ($row = pg_fetch_assoc($result) ){\n                print_r($row);\n                }\n        pg_free_result($result);\n} catch (Exception $e) {\n    echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n} finally {\n        if (!is_null($db_conn)) {\n                pg_close($db_conn);\n        }\n}\n\n?>\n")))),(0,o.kt)("h2",{id:"http-rest-api"},"HTTP REST API"),(0,o.kt)("p",null,"QuestDB exposes a REST API for compatibility with a wide range of libraries and\ntools. The REST API is accessible on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9000")," and has the following\nquery-capable entrypoints:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Entrypoint"),(0,o.kt)("th",{parentName:"tr",align:"left"},"HTTP Method"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,o.kt)("th",{parentName:"tr",align:"left"},"API Docs"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"#exp-sql-query-to-csv"},(0,o.kt)("inlineCode",{parentName:"a"},"/exp?query=.."))),(0,o.kt)("td",{parentName:"tr",align:"left"},"GET"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Export SQL Query as CSV"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/reference/api/rest#exp---export-data"},"Reference"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"#exec-sql-query-to-json"},(0,o.kt)("inlineCode",{parentName:"a"},"/exec?query=.."))),(0,o.kt)("td",{parentName:"tr",align:"left"},"GET"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Run SQL Query returning JSON result set"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("a",{parentName:"td",href:"/docs/reference/api/rest#exec---execute-queries"},"Reference"))))),(0,o.kt)("p",null,"For details such as content type, query parameters and more, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/rest"},"REST API")," docs."),(0,o.kt)("h3",{id:"exp-sql-query-to-csv"},(0,o.kt)("inlineCode",{parentName:"h3"},"/exp"),": SQL Query to CSV"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/exp")," entrypoint allows querying the database with a SQL select query and\nobtaining the results as CSV."),(0,o.kt)("p",null,"For obtaining results in JSON, use ",(0,o.kt)("inlineCode",{parentName:"p"},"/exec")," instead, documented next."),(0,o.kt)(l.Z,{defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"Python",value:"python"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"curl",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -G --data-urlencode \\\n    "query=SELECT * FROM example_table2 LIMIT 3" \\\n    http://localhost:9000/exp\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},'"col1","col2","col3"\n"a",10.5,true\n"b",100.0,false\n"c",,true\n'))),(0,o.kt)(s.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\nresp = requests.get(\n    'http://localhost:9000/exp',\n    {\n        'query': 'SELECT * FROM example_table2',\n        'limit': '3,6'   # Rows 3, 4, 5\n    })\nprint(resp.text)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csv"},'"col1","col2","col3"\n"d",20.5,true\n"e",200.0,false\n"f",,true\n')))),(0,o.kt)("h3",{id:"exec-sql-query-to-json"},(0,o.kt)("inlineCode",{parentName:"h3"},"/exec"),": SQL Query to JSON"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/exec")," entrypoint takes a SQL query and returns results as JSON."),(0,o.kt)("p",null,"This is similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/exec")," entry point which returns results as CSV."),(0,o.kt)("h3",{id:"querying-data"},"Querying Data"),(0,o.kt)(l.Z,{defaultValue:"curl",values:[{label:"cURL",value:"curl"},{label:"Python",value:"python"},{label:"NodeJS",value:"nodejs"},{label:"Go",value:"go"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"curl",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'curl -G \\\n  --data-urlencode "query=SELECT x FROM long_sequence(5);" \\\n  http://localhost:9000/exec\n')),(0,o.kt)("p",null,"The JSON response contains the original query, a ",(0,o.kt)("inlineCode",{parentName:"p"},'"columns"')," key with the schema\nof the results, a ",(0,o.kt)("inlineCode",{parentName:"p"},'"count"')," number of rows and a ",(0,o.kt)("inlineCode",{parentName:"p"},'"dataset"')," with the results."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "query": "SELECT x FROM long_sequence(5);",\n    "columns": [\n        {"name": "x", "type": "LONG"}],\n    "dataset": [\n        [1],\n        [2],\n        [3],\n        [4],\n        [5]],\n    "count": 5\n}\n'))),(0,o.kt)(s.Z,{value:"python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nimport requests\n\nhost = 'http://localhost:9000'\n\nsql_query = \"select * from long_sequence(10)\"\n\ntry:\n    response = requests.get(\n        host + '/exec',\n        params={'query': sql_query}).json()\n    for row in response['dataset']:\n        print(row[0])\nexcept requests.exceptions.RequestException as e:\n    print(f'Error: {e}', file=sys.stderr)\n"))),(0,o.kt)(s.Z,{value:"nodejs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const fetch = require("node-fetch")\n\nconst HOST = "http://localhost:9000"\n\nasync function run() {\n  try {\n    const query = "SELECT x FROM long_sequence(5);"\n\n    const response = await fetch(`${HOST}/exec?query=${encodeURIComponent(query)}`)\n    const json = await response.json()\n\n    console.log(json)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nrun()\n'))),(0,o.kt)(s.Z,{value:"go",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "fmt"\n  "io/ioutil"\n  "log"\n  "net/http"\n  "net/url"\n)\n\nfunc main() {\n  u, err := url.Parse("http://localhost:9000")\n  checkErr(err)\n\n  u.Path += "exec"\n  params := url.Values{}\n  params.Add("query", "SELECT x FROM long_sequence(5);")\n  u.RawQuery = params.Encode()\n  url := fmt.Sprintf("%v", u)\n\n  res, err := http.Get(url)\n  checkErr(err)\n\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  checkErr(err)\n\n  log.Println(string(body))\n}\n\nfunc checkErr(err error) {\n  if err != nil {\n    panic(err)\n  }\n}\n')))))}h.isMDXComponent=!0},6010:function(e,n,t){function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{Z:function(){return a}})}}]);