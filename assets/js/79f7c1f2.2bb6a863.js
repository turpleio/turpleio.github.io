"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5482],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(a),h=o,m=d["".concat(i,".").concat(h)]||d[h]||c[h]||r;return a?n.createElement(m,s(s({ref:t},p),{},{components:a})):n.createElement(m,s({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var u=2;u<r;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},19140:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var n=a(83117),o=a(80102),r=(a(67294),a(3905)),s=a(72525),l=a(46092),i=["components"],u={title:"Using Prometheus, Loki, and Grafana to monitor QuestDB in Kubernetes",author:"Steve Sklar",author_title:"QuestDB Team",author_url:"https://github.com/sklarsa",author_image_url:"https://avatars.githubusercontent.com/sklarsa",description:"How to monitor a QuestDB instance using Loki and Prometheus",keywords:["kubernetes","database","open source","tutorial","monitoring","observability","grafana","loki","prometheus"],image:"/img/blog/2022-12-13/banner.png",tags:["kubernetes","database","monitoring","tutorial","observability","grafana","loki","prometheus"]},p={permalink:"/blog/2022/12/13/using-prometheus-loki-grafana-monitor-questdb-kubernetes",source:"@site/blog/2022-12-13-using-prometheus-loki-grafana-monitor-questdb-kubernetes.mdx",title:"Using Prometheus, Loki, and Grafana to monitor QuestDB in Kubernetes",description:"How to monitor a QuestDB instance using Loki and Prometheus",date:"2022-12-13T00:00:00.000Z",formattedDate:"December 13, 2022",tags:[{label:"kubernetes",permalink:"/blog/tags/kubernetes"},{label:"database",permalink:"/blog/tags/database"},{label:"monitoring",permalink:"/blog/tags/monitoring"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"observability",permalink:"/blog/tags/observability"},{label:"grafana",permalink:"/blog/tags/grafana"},{label:"loki",permalink:"/blog/tags/loki"},{label:"prometheus",permalink:"/blog/tags/prometheus"}],readingTime:9.495,truncated:!0,prevItem:{title:"Merry Questmas! Here are your gifts for 2023...",permalink:"/blog/2022/12/19/merry-questmas-gifts-2023"},nextItem:{title:"Listen to Your CPU - Full-table Scans Are Fast",permalink:"/blog/2022/11/30/full-table-scan-are-fast"}},c=[{value:"Monitoring QuestDB in Kubernetes",id:"monitoring-questdb-in-kubernetes",children:[]},{value:"Components",id:"components",children:[]},{value:"Prerequisites",id:"prerequisites",children:[{value:"Getting started",id:"getting-started",children:[]}]},{value:"QuestDB",id:"questdb",children:[{value:"QuestDB endpoint",id:"questdb-endpoint",children:[]},{value:"Helm installation",id:"helm-installation",children:[]}]},{value:"Prometheus",id:"prometheus",children:[{value:"Helm installation",id:"helm-installation-1",children:[]},{value:"Configuration",id:"configuration",children:[]}]},{value:"Loki",id:"loki",children:[{value:"Helm installation",id:"helm-installation-2",children:[]}]},{value:"Grafana",id:"grafana",children:[{value:"Helm Installation",id:"helm-installation-3",children:[]},{value:"Configuration",id:"configuration-1",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],d={toc:c};function h(e){var t=e.components,u=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},d,u,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{alt:"A High-level diagram of the components used to monitor QuestDB.",height:467,src:"/img/blog/2022-12-13/banner.png",width:650,mdxType:"Banner"},"Photo by ",(0,r.kt)("a",{href:"https://unsplash.com/@chrisliverani"},"Chris Liverani")," via"," ",(0,r.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,r.kt)("p",null,"One of our Cloud engineers, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sklarsa"},"Steve Sklar"),", shares\nwith us how to use some of the most popular tools in the Kubernetes ecosystem to\nbuild monitoring infrastructure for your QuestDB instances."),(0,r.kt)("h2",{id:"monitoring-questdb-in-kubernetes"},"Monitoring QuestDB in Kubernetes"),(0,r.kt)("p",null,"As any experienced infrastructure operator will tell you, monitoring and\nobservability tools are critical for supporting production cloud services.\nReal-time analytics and logs help to detect anomalies and aid in debugging,\nultimately improving the ability of a team to recover from (and even prevent)\nincidents. Since container technologies are drastically changing the\ninfrastructure world, new tools are constantly emerging to help solve these\nproblems. Kubernetes and its ecosystem have addressed the need for\ninfrastructure monitoring with a variety of newly emerging solutions. Thanks to\nthe orchestration benefits that Kubernetes provides, these tools are easy to\ninstall, maintain, and use."),(0,r.kt)("p",null,"Luckily, QuestDB is built with these concerns in mind. From the presence of core\ndatabase features to the support for orchestration tooling, QuestDB is easy to deploy\non containerized infrastructure. This tutorial will describe how to use today's\nmost popular open source tooling to monitor your QuestDB instance running in a\nKubernetes cluster."),(0,r.kt)("h2",{id:"components"},"Components"),(0,r.kt)("p",null,"Our goal is to deploy a QuestDB instance on a Kubernetes cluster while also\nconnecting it to centralized metrics and logging systems. We will be installing\nthe following components in our cluster:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"https://questdb.io/"},"QuestDB")," database server"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://prometheus.io/"},"Prometheus")," to collect and store QuestDB metrics"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://grafana.com/oss/loki/"},"Loki")," to store logs from QuestDB"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://grafana.com/docs/loki/latest/clients/promtail/"},"Promtail")," to ship\nlogs to Loki"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://grafana.com/oss/grafana"},"Grafana")," to build dashboards with data from\nPrometheus and Loki")),(0,r.kt)("p",null,"These components work together as illustrated in the diagram below:"),(0,r.kt)(s.Z,{alt:"Diagram showing how components work together",title:"Overview of the architecture",height:360,src:"/img/blog/2022-12-13/overview.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"To follow this tutorial, we will need the following tools. For our Kubernetes\ncluster, we will be using ",(0,r.kt)("a",{parentName:"p",href:"https://kind.sigs.k8s.io/"},"kind")," (Kubernetes In\nDocker) to test the installation and components in an isolated sandbox, although\nyou are free to use any Kubernetes flavor to follow along."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"docker")," or ",(0,r.kt)("a",{parentName:"li",href:"https://podman.io/"},"podman")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kind.sigs.k8s.io/"},"kind")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/reference/kubectl/"},"kubectl")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/"},"jq")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://curl.se/"},"curl"))),(0,r.kt)("h3",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"Once you've\n",(0,r.kt)("a",{parentName:"p",href:"https://kind.sigs.k8s.io/docs/user/quick-start/#installation"},"installed kind"),",\nyou can create a Kubernetes cluster with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kind create cluster\n")),(0,r.kt)("p",null,"This will spin up a single-node Kubernetes cluster inside a Docker container and\nalso modify your current ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," context to point ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl")," to the\ncluster's API server."),(0,r.kt)("h2",{id:"questdb"},"QuestDB"),(0,r.kt)("h3",{id:"questdb-endpoint"},"QuestDB endpoint"),(0,r.kt)("p",null,"QuestDB exposes an HTTP metrics endpoint that can be scraped by Prometheus. This\nendpoint, on port ",(0,r.kt)("inlineCode",{parentName:"p"},"9003"),", will return a wide variety of QuestDB-specific metrics\nincluding query, memory usage, and performance statistics. A full list of\nmetrics can be found ",(0,r.kt)("a",{parentName:"p",href:"/docs/third-party-tools/prometheus/"},"in the QuestDB docs"),"."),(0,r.kt)("h3",{id:"helm-installation"},"Helm installation"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/get-questdb/"},"QuestDB")," can be installed using ",(0,r.kt)("a",{parentName:"p",href:"https://helm.sh/"},"Helm"),". You\ncan add the official Helm repo to your registry by running the following\ncommands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add questdb https://helm.questdb.io/\nhelm repo update\n")),(0,r.kt)("p",null,"This is only compatible with the Helm chart version 0.25.0 and higher. To\nconfirm your QuestDB chart version, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm search repo questdb\n")),(0,r.kt)("p",null,"Before installing QuestDB, we need to enable the metrics endpoint. To do this,\nwe can override the QuestDB server configuration in a ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"<<EOF > questdb-values.yaml\n---\nmetrics:\n  enabled: true\nEOF\n")),(0,r.kt)("p",null,"Once you've added the repo, you can install QuestDB in the default namespace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm install -f questdb-values.yaml questdb questdb/questdb\n")),(0,r.kt)("p",null,"To test the installation, you can make an HTTP request to the metrics endpoint.\nFirst, you need to create a Kubernetes port forward from the QuestDB pod to your\nlocalhost:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export QUESTDB_POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=questdb,app.kubernetes.io/instance=questdb" -o jsonpath="{.items[0].metadata.name}")\nkubectl --namespace default port-forward $QUESTDB_POD_NAME 9003:9003\n')),(0,r.kt)("p",null,"Next, make a request to the metrics endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:9003/metrics\n")),(0,r.kt)("p",null,"You should see a variety of Prometheus metrics in the response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# TYPE questdb_json_queries_total counter\nquestdb_json_queries_total 0\n\n# TYPE questdb_json_queries_completed_total counter\nquestdb_json_queries_completed_total 0\n\n...\n")),(0,r.kt)("h2",{id:"prometheus"},"Prometheus"),(0,r.kt)("p",null,"Now that we've exposed our metrics HTTP endpoint, we can deploy a\n",(0,r.kt)("a",{parentName:"p",href:"https://prometheus.io/"},"Prometheus")," instance to scrape the endpoint and store\nhistorical data for querying."),(0,r.kt)("h3",{id:"helm-installation-1"},"Helm installation"),(0,r.kt)("p",null,"Currently, the recommended way of installing Prometheus is using the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/prometheus-community/helm-charts"},"official Helm chart"),". You\ncan add the Prometheus chart to your local registry in the same way that we\nadded the QuestDB registry above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n")),(0,r.kt)("p",null,"As of this writing, we are using the Prometheus chart version ",(0,r.kt)("inlineCode",{parentName:"p"},"19.0.1")," and app\nversion ",(0,r.kt)("inlineCode",{parentName:"p"},"v2.40.5")),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"Before installing the chart, we need to configure Prometheus to scrape the\nQuestDB metrics endpoint. To do this, we will need to add our additional scrape\nconfigs to a ",(0,r.kt)("inlineCode",{parentName:"p"},"prom-values.yaml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"<<EOF > prom-values.yaml\n---\nextraScrapeConfigs: |\n  - job_name: questdb\n    metrics_path: /metrics\n    scrape_interval: 15s\n    scrape_timeout: 5s\n    static_configs:\n      - targets:\n        - questdb.default.svc.cluster.local:9003\nEOF\n")),(0,r.kt)("p",null,"This config will make Prometheus scrape our QuestDB metrics endpoint every 15\nseconds. Note that we are using the internal\n",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#namespaces-of-services"},"service URL"),"\nprovided to us by Kubernetes, which is only available to resources inside the\ncluster."),(0,r.kt)("p",null,"We're now ready to install the Prometheus chart. To do so, you can run the\nfollowing command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm install -f prom-values.yaml prometheus prometheus-community/prometheus\n")),(0,r.kt)("p",null,"It may take around a minute for the application to become responsive as it sets\nitself up inside the cluster. To validate that the server is scraping the\nQuestDB metrics, we can query the Prometheus server for a metric. First, we need\nto open up another port forward:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export PROM_POD_NAME=$(kubectl get pods --namespace default -l "app=prometheus,component=server" -o jsonpath="{.items[0].metadata.name}")\nkubectl --namespace default port-forward $PROM_POD_NAME 9090\n')),(0,r.kt)("p",null,"Now we can run a query for available metrics after waiting for a minute or so.\nWe are using ",(0,r.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"jq")," to filter the output to only\nthe QuestDB metrics:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -s http://localhost:9090/api/v1/label/__name__/values | jq -r '.data[] | select( . | contains(\"questdb_\"))'\n")),(0,r.kt)("p",null,"You should see a list of QuestDB metrics returned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"questdb_commits_total\nquestdb_committed_rows_total\n...\n")),(0,r.kt)("h2",{id:"loki"},"Loki"),(0,r.kt)("p",null,"Metrics are only part of the application support story. We still need a way to\naggregate and access application logs for better insight into QuestDB's\nperformance and behavior. While ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl logs")," is fine for local development and\ndebugging, we will eventually need a production-ready solution that does not\nrequire the use of admin tooling. We will use Grafana's\n",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/oss/loki/"},"Loki"),", a scalable open-source solution that has\ntight Kubernetes integration."),(0,r.kt)("h3",{id:"helm-installation-2"},"Helm installation"),(0,r.kt)("p",null,"Like the other components we worked with, we will also be installing Loki using\nan official Helm chart,\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grafana/helm-charts/tree/main/charts/loki-stack"},"loki-stack"),".\nThe loki-stack helm chart includes Loki, used as the log database, and\n",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/loki/latest/clients/promtail/"},"Promtail"),", a log\nshipper that is used to populate the Loki database."),(0,r.kt)("p",null,"First, lets add the chart to our registry:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add grafana https://grafana.github.io/helm-charts\nhelm repo update\n")),(0,r.kt)("p",null,"Loki and Promtail are both enabled out of the box, so all we have to do is\ninstall the Helm chart without even supplying our own ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm install loki grafana/loki-stack\n")),(0,r.kt)("p",null,"After around a minute or two, the application should be ready to go. To test\nthat Promtail is shipping QuestDB logs to Loki, we first need to generate a few\nlogs on our QuestDB instance. We can do this by ",(0,r.kt)("inlineCode",{parentName:"p"},"curl"),"ing the QuestDB HTTP\nfrontend to generate a few ",(0,r.kt)("inlineCode",{parentName:"p"},"INFO"),"-level logs. This is exposed on a different\nport than the metrics endpoint, so we need to open up another port forward\nfirst."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Open up the port forward\nexport QUESTDB_POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=questdb,app.kubernetes.io/instance=questdb" -o jsonpath="{.items[0].metadata.name}")\nkubectl --namespace default port-forward $QUESTDB_POD_NAME 9000:9000\n')),(0,r.kt)("p",null,"Now navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:9000"},"http://localhost:9000"),", which should point to the QuestDB HTTP frontend.  Your browser should make a request\nthat causes QuestDB to emit a few INFO-level logs."),(0,r.kt)("p",null,"You can query Loki to check if Promtail picked up and shipped those logs. Like the other components, we need to set up a port forward to access the\nLoki REST API before running the query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export LOKI_POD=$(kubectl get pods --namespace default -l "name=loki,app=loki" -o jsonpath="{.items[0].metadata.name}")\n kubectl --namespace default port-forward $LOKI_POD 3100:3100\n')),(0,r.kt)("p",null,"Now, you can run the following\n",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/loki/latest/logql/"},"LogQL")," query against the Loki\nserver to return these logs. By default, Loki will look for logs at most an hour\nold. We will also be using ",(0,r.kt)("inlineCode",{parentName:"p"},"jq")," to filter the response data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -s -G --data-urlencode 'query={pod=\"questdb-0\"}' http://localhost:3100/loki/api/v1/query_range | jq '.data.result[0].values'\n")),(0,r.kt)("p",null,"You should see a list of logs with timestamps that correspond to the logs from\nthe above sample:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[\n  [\n    "1670359425100049380",\n    "2022-12-13T20:43:45.099494Z I http-server disconnected [ip=127.0.0.1, fd=23, src=queue]"\n  ],\n  [\n    "1670359425099842047",\n    "2022-12-13T20:43:45.099278Z I http-server scheduling disconnect [fd=23, reason=12]"\n  ],\n  ...\n')),(0,r.kt)("h2",{id:"grafana"},"Grafana"),(0,r.kt)("p",null,"Now that we have all of our observability components set up, we need an easy way\nto aggregate our metrics and logs into meaningful and actionable dashboards. We\nwill install and configure ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/oss/grafana/"},"Grafana")," inside\nyour cluster to visualize your metrics and logs in one easy-to-use place."),(0,r.kt)("h3",{id:"helm-installation-3"},"Helm Installation"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"loki-stack")," chart makes this very easy for us to do. We just need to enable\nGrafana by customizing the chart's ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," and upgrading it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"<<EOF > loki-values.yaml\n---\ngrafana:\n  enabled: true\nEOF\n")),(0,r.kt)("p",null,"With this setting enabled, not only are we installing Grafana, but we are also\nregistering Loki as a data source in Grafana to save us the extra work."),(0,r.kt)("p",null,"Now we can upgrade our Loki stack to include Grafana:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade -f loki-values.yaml loki grafana/loki-stack\n")),(0,r.kt)("p",null,"To get the admin password for Grafana, you can run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl get secret --namespace default loki-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo\n')),(0,r.kt)("p",null,"And to access the Grafana frontend, you can use a port forward:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl port-forward --namespace default service/loki-grafana 3000:80\n")),(0,r.kt)("h3",{id:"configuration-1"},"Configuration"),(0,r.kt)("p",null,"First navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," in your browser. You can log in using\nthe username ",(0,r.kt)("inlineCode",{parentName:"p"},"admin")," and the password that you obtained in the previous step."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana login",src:a(23361).Z})),(0,r.kt)("p",null,'Once you\'ve logged in, use the sidebar to navigate to the "data sources" tab:'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:a(12984).Z})),(0,r.kt)("p",null,"Here, you can see that the Loki data source is already registered for us:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana data sources",src:a(89171).Z})),(0,r.kt)("p",null,"We still need to add our Prometheus data source. Luckily, Grafana makes this\neasy for us."),(0,r.kt)("p",null,'Click "Add Data Source" in the upper right and select "Prometheus". From here,\nthe only thing you need to do is enter the internal cluster URL of your\nPrometheus server\'s Service:\n',(0,r.kt)("inlineCode",{parentName:"p"},"http://prometheus-server.default.svc.cluster.local"),'. Scroll down to the bottom,\nclick "Save & test", and wait for the green checkmark popup in the right corner.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana data source config",src:a(67163).Z})),(0,r.kt)("p",null,"Now you're ready to create dashboards with QuestDB metrics and logs!"),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"I have provided a step-by-step tutorial to install and deploy QuestDB with a\nmonitoring infrastructure in a Kubernetes cluster. While there may be additional\nconsiderations to make if you want to improve the reliability of the monitoring\ncomponents, you can get very far with a setup just like this one. Here are a few\nideas:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add alerting to a number of targets using\n",(0,r.kt)("a",{parentName:"li",href:"https://prometheus.io/docs/alerting/latest/alertmanager/"},"Alertmanager")),(0,r.kt)("li",{parentName:"ul"},"Build interactive dashboards that combine metrics and logs using\n",(0,r.kt)("a",{parentName:"li",href:"https://grafana.com/docs/grafana/latest/dashboards/variables/"},"Grafana variables")),(0,r.kt)("li",{parentName:"ul"},"Configure Loki to use\n",(0,r.kt)("a",{parentName:"li",href:"https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/"},"alternative deployment modes"),"\nto improve reliability and scalability"),(0,r.kt)("li",{parentName:"ul"},"Leverage ",(0,r.kt)("a",{parentName:"li",href:"https://thanos.io/"},"Thanos")," incorporate high availability into your\nPrometheus deployment")),(0,r.kt)("p",null,"If you like this content, we'd love to know your thoughts! Feel free to share\nyour feedback or just come and say hello in the\n",(0,r.kt)("a",{parentName:"p",href:"https://slack.questdb.io/"},"QuestDB Community Slack"),"."))}h.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(o&&(o+=" "),o+=a);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,a=0,o="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(o&&(o+=" "),o+=t);return o}a.d(t,{Z:function(){return o}})},67163:function(e,t,a){t.Z=a.p+"assets/images/grafana-data-source-config-de57287384b70acf6f07cd8ef3f57934.png"},89171:function(e,t,a){t.Z=a.p+"assets/images/grafana-data-sources-e8354a2d4522dba901d40608555b6911.png"},23361:function(e,t,a){t.Z=a.p+"assets/images/grafana-login-390bfc982cf22c98aacab9648e315dd0.png"},12984:function(e,t,a){t.Z=a.p+"assets/images/grafana-main-page-c4aead0951d4f2889043045fa1581ef9.png"}}]);