"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[179],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94703:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var a=n(83117),r=n(80102),l=(n(67294),n(3905)),i=["components"],o={title:"REST API",sidebar_label:"REST",description:"REST API reference documentation."},p={unversionedId:"reference/api/rest",id:"reference/api/rest",isDocsHomePage:!1,title:"REST API",description:"REST API reference documentation.",source:"@site/docs/reference/api/rest.md",sourceDirName:"reference/api",slug:"/reference/api/rest",permalink:"/docs/reference/api/rest",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/api/rest.md",version:"current",sidebar_label:"REST",frontMatter:{title:"REST API",sidebar_label:"REST",description:"REST API reference documentation."},sidebar:"docs",previous:{title:"Root directory structure",permalink:"/docs/concept/root-directory-structure"},next:{title:"Postgres",permalink:"/docs/reference/api/postgres"}},s=[{value:"Examples",id:"examples",children:[]},{value:"/imp - Import data",id:"imp---import-data",children:[{value:"URL parameters",id:"url-parameters",children:[]},{value:"Names",id:"names",children:[]},{value:"Consistency guarantees",id:"consistency-guarantees",children:[]},{value:"Examples",id:"examples-1",children:[]}]},{value:"/exec - Execute queries",id:"exec---execute-queries",children:[{value:"Overview",id:"overview",children:[]},{value:"Examples",id:"examples-2",children:[]}]},{value:"/exp - Export data",id:"exp---export-data",children:[{value:"Overview",id:"overview-1",children:[]},{value:"Examples",id:"examples-3",children:[]}]},{value:"Error responses",id:"error-responses",children:[{value:"Malformed queries",id:"malformed-queries",children:[]}]}],d={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The QuestDB REST API is based on standard HTTP features and is understood by\noff-the-shelf HTTP clients. It provides a simple way to interact with QuestDB\nand is compatible with most programming languages. API functions are fully keyed\non the URL and they use query parameters as their arguments."),(0,l.kt)("p",null,"The Web Console is the official Web client relying on the REST API. Find out\nmore in the section ",(0,l.kt)("a",{parentName:"p",href:"/docs/develop/web-console"},"using the Web Console"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Available methods")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#imp---import-data"},(0,l.kt)("inlineCode",{parentName:"a"},"/imp"))," for importing data from ",(0,l.kt)("inlineCode",{parentName:"li"},".CSV")," files"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#exec---execute-queries"},(0,l.kt)("inlineCode",{parentName:"a"},"/exec"))," to execute a SQL statement"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#exp---export-data"},(0,l.kt)("inlineCode",{parentName:"a"},"/exp"))," to export data")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("p",null,'We provide examples in a number of programming languages. See our "develop" docs\nfor:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/develop/insert-data#http-rest-api"},"Inserting")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/develop/query-data#http-rest-api"},"Querying"))),(0,l.kt)("h2",{id:"imp---import-data"},"/imp - Import data"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/imp")," streams tabular text data directly into a table. It supports CSV, TAB and\npipe (",(0,l.kt)("inlineCode",{parentName:"p"},"|"),") delimited inputs with optional headers. There are no restrictions on\ndata size. Data types and structures are detected automatically, without\nadditional configuration. In some cases, additional configuration can be\nprovided to improve the automatic detection as described in\n",(0,l.kt)("a",{parentName:"p",href:"#user-defined-schema"},"user-defined schema"),"."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The structure detection algorithm analyses the chunk in the beginning of the\nfile and relies on relative uniformity of data. When the first chunk is\nnon-representative of the rest of the data, automatic imports can yield errors."),(0,l.kt)("p",{parentName:"div"},"If the data follows a uniform pattern, the number of lines which are analyzed\nfor schema detection can be reduced to improve performance during uploads using\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"http.text.analysis.max.lines")," key. Usage of this setting is described in\nthe\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/configuration#minimal-http-server"},"HTTP server configuration"),"\ndocumentation."))),(0,l.kt)("h3",{id:"url-parameters"},"URL parameters"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/imp")," is expecting an HTTP POST request using the ",(0,l.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),"\nContent-Type with following optional URL parameters which must be URL encoded:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"atomicity")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"1")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),". Behaviour when an error is detected in the data. ",(0,l.kt)("inlineCode",{parentName:"td"},"0"),": the entire file will be skipped. ",(0,l.kt)("inlineCode",{parentName:"td"},"1"),": the row is skipped. ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),": the column is skipped.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"delimiter")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"URL encoded delimiter character. When set, import will try to detect the delimiter automatically. Since automatic delimiter detection requires at least two lines (rows) to be present in the file, this parameter may be used to allow single line file import.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"durable")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", import will be resilient against OS errors or power losses by forcing the data to be fully persisted before sending a response back to the user.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"fmt")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tabular")),(0,l.kt)("td",{parentName:"tr",align:null},"Can be set to ",(0,l.kt)("inlineCode",{parentName:"td"},"json")," to get the response formatted as such.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"forceHeader")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". When ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),", QuestDB will try to infer if the first line of the file is the header line. When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", QuestDB will expect that line to be the header line.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the file"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the table to create, ",(0,l.kt)("a",{parentName:"td",href:"/docs/reference/api/rest#names"},"see below"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"overwrite")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". When set to true, any existing data or structure will be overwritten.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"partitionBy")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NONE")),(0,l.kt)("td",{parentName:"tr",align:null},"See ",(0,l.kt)("a",{parentName:"td",href:"/docs/concept/partitions#properties"},"partitions"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"skipLev")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". Skip \u201cLine Extra Values\u201d, when set to true, the parser will ignore those extra values rather than ignoring entire line. An extra value is something in addition to what is defined by the header.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timestamp")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the column that will be used as a ",(0,l.kt)("a",{parentName:"td",href:"/docs/concept/designated-timestamp"},"designated timestamp"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Example usage"',title:'"Example','usage"':!0},"curl -F data=@weather.csv \\\n'http://localhost:9000/imp?overwrite=true&name=new_table&timestamp=ts&partitionBy=MONTH'\n")),(0,l.kt)("p",null,"Further example queries with context on the source CSV file contents relative\nand the generated tables are provided in the ",(0,l.kt)("a",{parentName:"p",href:"#examples"},"examples section"),"\nbelow."),(0,l.kt)("h3",{id:"names"},"Names"),(0,l.kt)("p",null,"Table and column names are subject to restrictions, the following list of\ncharacters are automatically removed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-plain"},"[whitespace]\n.\n?\n,\n:\n\\\n/\n\\\\\n\\0\n)\n(\n_\n+\n-\n*\n~\n%\n")),(0,l.kt)("p",null,"When the header row is missing, column names are generated automatically."),(0,l.kt)("h3",{id:"consistency-guarantees"},"Consistency guarantees"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/imp")," benefits from the properties of the QuestDB\n",(0,l.kt)("a",{parentName:"p",href:"/docs/concept/storage-model#consistency-and-durability"},"storage model"),",\nalthough Atomicity and Durability can be relaxed to meet convenience and\nperformance demands."),(0,l.kt)("h4",{id:"atomicity"},"Atomicity"),(0,l.kt)("p",null,"QuestDB is fully insured against any connection problems. If the server detects\nclosed socket(s), the entire request is rolled back instantly and transparently\nfor any existing readers. The only time data can be partially imported is when\natomicity is in ",(0,l.kt)("inlineCode",{parentName:"p"},"relaxed"),' mode and data cannot be converted to column type. In\nthis scenario, any "defective" row of data is discarded and ',(0,l.kt)("inlineCode",{parentName:"p"},"/imp")," continues to\nstream request data into table."),(0,l.kt)("h4",{id:"consistency"},"Consistency"),(0,l.kt)("p",null,"This property is guaranteed by consistency of append transactions against\nQuestDB storage engine."),(0,l.kt)("h4",{id:"isolation"},"Isolation"),(0,l.kt)("p",null,"Data is committed to QuestDB storage engine at end of request. Uncommitted\ntransactions are not visible to readers."),(0,l.kt)("h4",{id:"durability"},"Durability"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/imp")," streams data from network socket buffer directly into memory mapped\nfiles. At this point data is handed over to the OS and is resilient against\nQuestDB internal errors and unlikely but hypothetically possible crashes. This\nis default method of appending data and it is chosen for its performance\ncharacteristics."),(0,l.kt)("h3",{id:"examples-1"},"Examples"),(0,l.kt)("h4",{id:"automatic-schema-detection"},"Automatic schema detection"),(0,l.kt)("p",null,"The following example uploads a file ",(0,l.kt)("inlineCode",{parentName:"p"},"ratings.csv")," which has the following\ncontents:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"ts"),(0,l.kt)("th",{parentName:"tr",align:null},"visMiles"),(0,l.kt)("th",{parentName:"tr",align:null},"tempF"),(0,l.kt)("th",{parentName:"tr",align:null},"dewpF"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01T00:00:00.000000Z"),(0,l.kt)("td",{parentName:"tr",align:null},"8.8"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01T00:51:00.000000Z"),(0,l.kt)("td",{parentName:"tr",align:null},"9.100000000000"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01T01:36:00.000000Z"),(0,l.kt)("td",{parentName:"tr",align:null},"8.0"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))),(0,l.kt)("p",null,"An import can be performed with automatic schema detection with the following\nrequest:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"curl -F data=@weather.csv 'http://localhost:9000/imp'\n")),(0,l.kt)("p",null,"A HTTP status code of ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," will be returned and the response will be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"+-------------------------------------------------------------------------------+\n|      Location:  |     weather.csv  |        Pattern  | Locale  |      Errors  |\n|   Partition by  |            NONE  |                 |         |              |\n|      Timestamp  |            NONE  |                 |         |              |\n+-------------------------------------------------------------------------------+\n|   Rows handled  |           49976  |                 |         |              |\n|  Rows imported  |           49976  |                 |         |              |\n+-------------------------------------------------------------------------------+\n|              0  |              ts  |                TIMESTAMP  |           0  |\n|              1  |        visMiles  |                   DOUBLE  |           0  |\n|              2  |           tempF  |                      INT  |           0  |\n|              3  |           dewpF  |                      INT  |           0  |\n+-------------------------------------------------------------------------------+\n")),(0,l.kt)("h4",{id:"user-defined-schema"},"User-defined schema"),(0,l.kt)("p",null,"To specify the schema of a table, a schema object can be provided:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n-F schema=\'[{"name":"dewpF", "type": "STRING"}]\' \\\n-F data=@weather.csv \'http://localhost:9000/imp\'\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Response"',title:'"Response"'},"+------------------------------------------------------------------------------+\n|      Location:  |    weather.csv  |        Pattern  | Locale  |      Errors  |\n|   Partition by  |           NONE  |                 |         |              |\n|      Timestamp  |           NONE  |                 |         |              |\n+------------------------------------------------------------------------------+\n|   Rows handled  |          49976  |                 |         |              |\n|  Rows imported  |          49976  |                 |         |              |\n+------------------------------------------------------------------------------+\n|              0  |             ts  |                TIMESTAMP  |           0  |\n|              1  |       visMiles  |                   DOUBLE  |           0  |\n|              2  |          tempF  |                      INT  |           0  |\n|              3  |          dewpF  |                   STRING  |           0  |\n+------------------------------------------------------------------------------+\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Non-standard timestamp formats")),(0,l.kt)("p",null,"Given a file ",(0,l.kt)("inlineCode",{parentName:"p"},"weather.csv")," with the following contents which contains a\ntimestamp with a non-standard format:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"ts"),(0,l.kt)("th",{parentName:"tr",align:null},"visMiles"),(0,l.kt)("th",{parentName:"tr",align:null},"tempF"),(0,l.kt)("th",{parentName:"tr",align:null},"dewpF"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 - 00:00:00"),(0,l.kt)("td",{parentName:"tr",align:null},"8.8"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 - 00:51:00"),(0,l.kt)("td",{parentName:"tr",align:null},"9.100000000000"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2010-01-01 - 01:36:00"),(0,l.kt)("td",{parentName:"tr",align:null},"8.0"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"30")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))),(0,l.kt)("p",null,"The file can be imported as usual with the following request:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Importing CSV with non-standard timestamp"',title:'"Importing',CSV:!0,with:!0,"non-standard":!0,'timestamp"':!0},"curl -F data=@weather.csv 'http://localhost:9000/imp'\n")),(0,l.kt)("p",null,"A HTTP status code of ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," will be returned and the import will be successful,\nbut the timestamp column is detected as a ",(0,l.kt)("inlineCode",{parentName:"p"},"STRING")," type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Response with timestamp as STRING type"',title:'"Response',with:!0,timestamp:!0,as:!0,STRING:!0,'type"':!0},"+-------------------------------------------------------------------------------+\n|      Location:  |     weather.csv  |        Pattern  | Locale  |      Errors  |\n|   Partition by  |            NONE  |                 |         |              |\n|      Timestamp  |            NONE  |                 |         |              |\n+-------------------------------------------------------------------------------+\n|   Rows handled  |           49976  |                 |         |              |\n|  Rows imported  |           49976  |                 |         |              |\n+-------------------------------------------------------------------------------+\n|              0  |              ts  |                   STRING  |           0  |\n|              1  |        visMiles  |                   DOUBLE  |           0  |\n|              2  |           tempF  |                      INT  |           0  |\n|              3  |           dewpF  |                      INT  |           0  |\n+-------------------------------------------------------------------------------+\n")),(0,l.kt)("p",null,"To amend the timestamp column type, this example curl can be used which has a\n",(0,l.kt)("inlineCode",{parentName:"p"},"schema")," JSON object to specify that the ",(0,l.kt)("inlineCode",{parentName:"p"},"ts")," column is of ",(0,l.kt)("inlineCode",{parentName:"p"},"TIMESTAMP")," type with\nthe pattern ",(0,l.kt)("inlineCode",{parentName:"p"},"yyyy-MM-dd - HH:mm:ss")),(0,l.kt)("p",null,"Additionally, URL parameters are provided:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"overwrite=true")," to overwrite the existing table"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp=ts")," to specify that the ",(0,l.kt)("inlineCode",{parentName:"li"},"ts")," column is the designated timestamp\ncolumn for this table"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"partitionBy=MONTH")," to set a\n",(0,l.kt)("a",{parentName:"li",href:"/docs/operations/data-retention"},"partitioning strategy")," on the table by\n",(0,l.kt)("inlineCode",{parentName:"li"},"MONTH"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Providing a user-defined schema"',title:'"Providing',a:!0,"user-defined":!0,'schema"':!0},'curl \\\n-F schema=\'[{"name":"ts", "type": "TIMESTAMP", "pattern": "yyyy-MM-dd - HH:mm:ss"}]\' \\\n-F data=@weather.csv \\\n\'http://localhost:9000/imp?overwrite=true&timestamp=ts&partitionBy=MONTH\'\n')),(0,l.kt)("p",null,"The HTTP status code will be set to ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," and the response will show ",(0,l.kt)("inlineCode",{parentName:"p"},"0")," errors\nparsing the timestamp column:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"+------------------------------------------------------------------------------+\n|      Location:  |    weather.csv  |        Pattern  | Locale  |      Errors  |\n|   Partition by  |          MONTH  |                 |         |              |\n|      Timestamp  |             ts  |                 |         |              |\n+------------------------------------------------------------------------------+\n|   Rows handled  |          49976  |                 |         |              |\n|  Rows imported  |          49976  |                 |         |              |\n+------------------------------------------------------------------------------+\n|              0  |             ts  |                TIMESTAMP  |           0  |\n|              1  |       visMiles  |                   DOUBLE  |           0  |\n|              2  |          tempF  |                      INT  |           0  |\n|              3  |          dewpF  |                      INT  |           0  |\n+------------------------------------------------------------------------------+\n")),(0,l.kt)("h4",{id:"json-response"},"JSON response"),(0,l.kt)("p",null,"If you intend to upload CSV programmatically, it's easier to parse the response\nas JSON. Set ",(0,l.kt)("inlineCode",{parentName:"p"},"fmt=json")," query argument on the request."),(0,l.kt)("p",null,"Here's an example of a successful response:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": "OK",\n  "location": "example_table",\n  "rowsRejected": 0,\n  "rowsImported": 3,\n  "header": false,\n  "columns": [\n    { "name": "col1", "type": "SYMBOL", "size": 4, "errors": 0 },\n    { "name": "col2", "type": "DOUBLE", "size": 8, "errors": 0 },\n    { "name": "col3", "type": "BOOLEAN", "size": 1, "errors": 0 }\n  ]\n}\n')),(0,l.kt)("p",null,"Here is an example with request-level errors:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": "not enough lines [table=example_table]"\n}\n')),(0,l.kt)("p",null,"Here is an example with column-level errors due to unsuccessful casts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": "OK",\n  "location": "example_table2",\n  "rowsRejected": 0,\n  "rowsImported": 3,\n  "header": false,\n  "columns": [\n    { "name": "col1", "type": "DOUBLE", "size": 8, "errors": 3 },\n    { "name": "col2", "type": "SYMBOL", "size": 4, "errors": 0 },\n    { "name": "col3", "type": "BOOLEAN", "size": 1, "errors": 0 }\n  ]\n}\n')),(0,l.kt)("h4",{id:"out-of-order-import"},"Out-of-order import"),(0,l.kt)("p",null,"The following example imports a file which contains out-of-order records. The\n",(0,l.kt)("inlineCode",{parentName:"p"},"timestamp")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"partitionBy")," parameters ",(0,l.kt)("strong",{parentName:"p"},"must be provided")," for commit lag and\nmax uncommitted rows to have any effect. For more information on these\nparameters, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/out-of-order-commit-lag"},"the commit lag guide"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"curl -F data=@weather.csv \\\n'http://localhost:9000/imp?&timestamp=ts&partitionBy=DAY&commitLag=120000000&maxUncommittedRows=10000'\n")),(0,l.kt)("h2",{id:"exec---execute-queries"},"/exec - Execute queries"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/exec")," compiles and executes the SQL query supplied as a parameter and returns\na JSON response."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"The query execution terminates automatically when the socket connection is\nclosed."))),(0,l.kt)("h3",{id:"overview"},"Overview"),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/exec")," is expecting an HTTP GET request with following query parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"count")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". Counts the number of rows and returns this value.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"limit")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"Allows limiting the number of rows to return. ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=10")," will return the first 10 rows (equivalent to ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=1,10"),"), ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=10,20")," will return row numbers 10 through to 20 inclusive.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nm")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". Skips the metadata section of the response when set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"query")),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"URL encoded query text. It can be multi-line.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"timings")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", QuestDB will also include a ",(0,l.kt)("inlineCode",{parentName:"td"},"timings")," property in the response which gives details about the execution times.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"explain")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", QuestDB will also include an ",(0,l.kt)("inlineCode",{parentName:"td"},"explain")," property in the response which gives details about the execution plan.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"quoteLargeNum")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),". When set to ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", QuestDB will surround ",(0,l.kt)("inlineCode",{parentName:"td"},"LONG")," type numbers with double quotation marks that will make them parsed as strings.")))),(0,l.kt)("p",null,"The parameters must be URL encoded."),(0,l.kt)("h4",{id:"headers"},"Headers"),(0,l.kt)("p",null,"Supported HTTP headers:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Header"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Statement-Timeout")),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Query timeout in milliseconds, overrides default timeout from server.conf")))),(0,l.kt)("h3",{id:"examples-2"},"Examples"),(0,l.kt)("h4",{id:"select-query-example"},"SELECT query example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -G \\\n  --data-urlencode "query=SELECT timestamp, tempF FROM weather LIMIT 2;" \\\n  --data-urlencode "count=true" \\\n  http://localhost:9000/exec\n')),(0,l.kt)("p",null,"A HTTP status code of ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," is returned with the following response body:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "SELECT timestamp, tempF FROM weather LIMIT 2;",\n  "columns": [\n    {\n      "name": "timestamp",\n      "type": "TIMESTAMP"\n    },\n    {\n      "name": "tempF",\n      "type": "INT"\n    }\n  ],\n  "dataset": [\n    ["2010-01-01T00:00:00.000000Z", 34],\n    ["2010-01-01T00:51:00.000000Z", 34]\n  ],\n  "count": 2\n}\n')),(0,l.kt)("p",null,"SELECT query returns response in the following format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": string,\n  "columns": Array<{ "name": string, "type": string }>\n  "dataset": Array<Array<Value for Column1, Value for Column2>>,\n  "count": Optional<number>,\n  "timings": Optional<{ compiler: number, count: number, execute: number }>,\n  "explain": Optional<{ jitCompiled: boolean }>\n}\n')),(0,l.kt)("p",null,"You can find the exact list of types in the\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/datatypes"},"dedicated page"),"."),(0,l.kt)("h4",{id:"update-query-example"},"UPDATE query example:"),(0,l.kt)("p",null,"This request executes an update of table ",(0,l.kt)("inlineCode",{parentName:"p"},"weather")," setting 2 minutes query\ntimeout"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -G \\\n  -H "Statement-Timeout: 120000" \\\n  --data-urlencode "query=UPDATE weather SET tempF = tempF + 0.12 WHERE tempF > 60" \\\n  http://localhost:9000/exec\n')),(0,l.kt)("p",null,"A HTTP status code of ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," is returned with the following response body:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ddl": "OK",\n  "updated": 34\n}\n')),(0,l.kt)("h2",{id:"exp---export-data"},"/exp - Export data"),(0,l.kt)("p",null,"This endpoint allows you to pass url-encoded queries but the request body is\nreturned in a tabular form to be saved and reused as opposed to JSON."),(0,l.kt)("h3",{id:"overview-1"},"Overview"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"/exp")," is expecting an HTTP GET request with following parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"limit")),(0,l.kt)("td",{parentName:"tr",align:"left"},"No"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Paging opp parameter. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=10,20")," will return row numbers 10 through to 20 inclusive and ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=20")," will return first 20 rows, which is equivalent to ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=0,20"),". ",(0,l.kt)("inlineCode",{parentName:"td"},"limit=-20")," will return the last 20 rows.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"query")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Yes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"URL encoded query text. It can be multi-line.")))),(0,l.kt)("p",null,"The parameters must be URL encoded."),(0,l.kt)("h3",{id:"examples-3"},"Examples"),(0,l.kt)("p",null,"Considering the query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -G \\\n  --data-urlencode "query=SELECT AccidentIndex2, Date, Time FROM \'Accidents0514.csv\'" \\\n  --data-urlencode "limit=5" \\\n  http://localhost:9000/exp\n')),(0,l.kt)("p",null,"A HTTP status code of ",(0,l.kt)("inlineCode",{parentName:"p"},"200")," is returned with the following response body:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'"AccidentIndex","Date","Time"\n200501BS00001,"2005-01-04T00:00:00.000Z",17:42\n200501BS00002,"2005-01-05T00:00:00.000Z",17:36\n200501BS00003,"2005-01-06T00:00:00.000Z",00:15\n200501BS00004,"2005-01-07T00:00:00.000Z",10:35\n200501BS00005,"2005-01-10T00:00:00.000Z",21:13\n')),(0,l.kt)("h2",{id:"error-responses"},"Error responses"),(0,l.kt)("h3",{id:"malformed-queries"},"Malformed queries"),(0,l.kt)("p",null,"A successful call to ",(0,l.kt)("inlineCode",{parentName:"p"},"/exec")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"/exp")," which also contains a malformed query\nwill return response bodies with the following format:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": string,\n  "error": string,\n  "position": number\n}\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"position")," field is the character number from the beginning of the string\nwhere the error was found."),(0,l.kt)("p",null,"Considering the query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'curl -G \\\n  --data-urlencode "query=SELECT * FROM table;" \\\n  http://localhost:9000/exp\n')),(0,l.kt)("p",null,"A HTTP status code of ",(0,l.kt)("inlineCode",{parentName:"p"},"400")," is returned with the following response body:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "SELECT * FROM table;",\n  "error": "function, literal or constant is expected",\n  "position": 8\n}\n')))}m.isMDXComponent=!0}}]);