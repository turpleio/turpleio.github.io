"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[9787],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(r),m=o,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||a;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},57133:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=r(83117),o=r(80102),a=(r(67294),r(3905)),i=["components"],l={title:"SQL execution order",sidebar_label:"SQL execution order",description:"Execution order for SQL clauses in QuestDB. This covers the SQL keywords you may already be familiar with as well as extensions to the language that are unique to QuestDB."},s={unversionedId:"concept/sql-execution-order",id:"concept/sql-execution-order",isDocsHomePage:!1,title:"SQL execution order",description:"Execution order for SQL clauses in QuestDB. This covers the SQL keywords you may already be familiar with as well as extensions to the language that are unique to QuestDB.",source:"@site/docs/concept/sql-execution-order.md",sourceDirName:"concept",slug:"/concept/sql-execution-order",permalink:"/docs/concept/sql-execution-order",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/concept/sql-execution-order.md",version:"current",sidebar_label:"SQL execution order",frontMatter:{title:"SQL execution order",sidebar_label:"SQL execution order",description:"Execution order for SQL clauses in QuestDB. This covers the SQL keywords you may already be familiar with as well as extensions to the language that are unique to QuestDB."},sidebar:"docs",previous:{title:"Spatial operators",permalink:"/docs/reference/operators/spatial"},next:{title:"ALTER TABLE ADD COLUMN",permalink:"/docs/reference/sql/alter-table-add-column"}},c=[],u={toc:c};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"QuestDB attempts to implement standard ANSI SQL. We also try to be compatible\nwith PostgreSQL, although parts of this are a work in progress. QuestDB\nimplements these clauses which have the following execution order:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/select"},"FROM")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/join"},"ON")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/join"},"JOIN")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/where"},"WHERE")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/latest-on"},"LATEST ON")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/group-by"},"GROUP BY")," (optional)"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/with"},"WITH")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/concept/sql-extensions#implicit-having"},"HAVING")," (implicit)"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/select"},"SELECT")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/distinct"},"DISTINCT")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/order-by"},"ORDER BY")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/reference/sql/limit"},"LIMIT"))),(0,a.kt)("p",null,"We have also implemented sub-queries that users may execute at any part of a\nquery that mentions a table name. The sub-query implementation adds almost zero\nexecution cost to SQL. We encourage the use of sub-queries as they add flavors\nof functional language features to traditional SQL."),(0,a.kt)("p",null,"For more information on the SQL extensions in QuestDB which deviate from ANSI\nSQL and PostgreSQL, see the\n",(0,a.kt)("a",{parentName:"p",href:"/docs/concept/sql-extensions"},"SQL extensions documentation"),"."))}p.isMDXComponent=!0}}]);