"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[2272],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3618:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var a=n(3117),r=n(102),s=(n(7294),n(3905)),i=["components"],o={title:"SQL extensions",description:"QuestDB attempts to implement standard ANSI SQL with time-based extensions for convenience. This document describes SQL extensions in QuestDB and how users can benefit from them."},l={unversionedId:"concept/sql-extensions",id:"concept/sql-extensions",isDocsHomePage:!1,title:"SQL extensions",description:"QuestDB attempts to implement standard ANSI SQL with time-based extensions for convenience. This document describes SQL extensions in QuestDB and how users can benefit from them.",source:"@site/docs/concept/sql-extensions.md",sourceDirName:"concept",slug:"/concept/sql-extensions",permalink:"/docs/concept/sql-extensions",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/concept/sql-extensions.md",version:"current",frontMatter:{title:"SQL extensions",description:"QuestDB attempts to implement standard ANSI SQL with time-based extensions for convenience. This document describes SQL extensions in QuestDB and how users can benefit from them."},sidebar:"docs",previous:{title:"Designated timestamp",permalink:"/docs/concept/designated-timestamp"},next:{title:"JIT compiler",permalink:"/docs/concept/jit-compiler"}},c=[{value:"SQL extensions",id:"sql-extensions",children:[{value:"LATEST ON",id:"latest-on",children:[]},{value:"SAMPLE BY",id:"sample-by",children:[]},{value:"Timestamp search",id:"timestamp-search",children:[]}]},{value:"Differences from standard SQL",id:"differences-from-standard-sql",children:[{value:"SELECT * FROM is optional",id:"select--from-is-optional",children:[]},{value:"GROUP BY is optional",id:"group-by-is-optional",children:[]},{value:"Implicit HAVING",id:"implicit-having",children:[]}]}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"QuestDB attempts to implement standard ANSI SQL. We also try to be compatible\nwith PostgreSQL, although parts of this are a work in progress. This page\npresents the main extensions we bring to SQL and the main differences that one\nmight find in SQL but not in QuestDB's dialect."),(0,s.kt)("h2",{id:"sql-extensions"},"SQL extensions"),(0,s.kt)("p",null,"We have extended SQL to support our data storage model and simplify semantics of\ntime series analytics."),(0,s.kt)("h3",{id:"latest-on"},"LATEST ON"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/reference/sql/latest-on"},"LATEST ON")," is a clause introduced to help find\nthe latest entry by timestamp for a given key or combination of keys as part of\na ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," statement."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="LATEST ON customer ID and currency"',title:'"LATEST',ON:!0,customer:!0,ID:!0,and:!0,'currency"':!0},"SELECT * FROM balances\nWHERE balance > 800\nLATEST ON ts PARTITION BY customer_id, currency;\n")),(0,s.kt)("h3",{id:"sample-by"},"SAMPLE BY"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/reference/sql/select#sample-by"},"SAMPLE BY")," is used for time-based\n",(0,s.kt)("a",{parentName:"p",href:"/docs/reference/function/aggregation"},"aggregations")," with an efficient syntax.\nThe short query below will return the simple average balance from a list of\naccounts by one month buckets."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="SAMPLE BY one month buckets"',title:'"SAMPLE',BY:!0,one:!0,month:!0,'buckets"':!0},"SELECT avg(balance) FROM accounts SAMPLE BY 1M\n")),(0,s.kt)("h3",{id:"timestamp-search"},"Timestamp search"),(0,s.kt)("p",null,"Timestamp search can be performed with regular operators, e.g ",(0,s.kt)("inlineCode",{parentName:"p"},">"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"<=")," etc.\nHowever, QuestDB provides a\n",(0,s.kt)("a",{parentName:"p",href:"/docs/reference/sql/where#timestamp-and-date"},"native notation")," which is faster\nand less verbose."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Results in a given year"',title:'"Results',in:!0,a:!0,given:!0,'year"':!0},"SELECT * FROM scores WHERE ts IN '2018';\n")),(0,s.kt)("h2",{id:"differences-from-standard-sql"},"Differences from standard SQL"),(0,s.kt)("h3",{id:"select--from-is-optional"},"SELECT ","*"," FROM is optional"),(0,s.kt)("p",null,"In QuestDB, using ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT * FROM")," is optional, so ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT * FROM my_table;")," will\nreturn the same result as ",(0,s.kt)("inlineCode",{parentName:"p"},"my_table;"),". While adding ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT * FROM")," makes SQL\nlook more complete, there are examples where omitting these keywords makes\nqueries a lot easier to read."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Optional use of SELECT * FROM"',title:'"Optional',use:!0,of:!0,SELECT:!0,"*":!0,'FROM"':!0},"my_table;\n-- equivalent to:\nSELECT * FROM my_table;\n")),(0,s.kt)("h3",{id:"group-by-is-optional"},"GROUP BY is optional"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clause is optional and can be omitted as the QuestDB optimizer\nderives group-by implementation from the ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," clause. In standard SQL, users\nmight write a query like the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT a, b, c, d, sum(e) FROM tab GROUP BY a, b, c, d;\n")),(0,s.kt)("p",null,"However, enumerating a subset of ",(0,s.kt)("inlineCode",{parentName:"p"},"SELECT")," columns in the ",(0,s.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clause is\nredundant and therefore unnecessary. The same SQL in QuestDB SQL-dialect can be\nwritten as:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT a, b, c, d, sum(e) FROM tab;\n")),(0,s.kt)("h3",{id:"implicit-having"},"Implicit HAVING"),(0,s.kt)("p",null,"Let's look at another more complex example using ",(0,s.kt)("inlineCode",{parentName:"p"},"HAVING")," in standard SQL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT a, b, c, d, sum(e)\nFROM tab\nGROUP BY a, b, c, d\nHAVING sum(e) > 100;\n")),(0,s.kt)("p",null,"In QuestDB's dialect, featherweight sub-queries come to the rescue to create a\nsmaller, more readable query, without unnecessary repetitive aggregations.\n",(0,s.kt)("inlineCode",{parentName:"p"},"HAVING")," functionality can be obtained implicitly as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"(SELECT a, b, c, d, sum(e) s FROM tab) WHERE s > 100;\n")))}u.isMDXComponent=!0}}]);