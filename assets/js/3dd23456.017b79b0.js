"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[6489],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(a),h=r,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},79389:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var n=a(83117),r=a(80102),o=(a(67294),a(3905)),i=a(46092),s=["components"],l={title:"Data Lifecycle with QuestDB",author:"Yitaek Hwang",author_title:"Guest",author_url:"https://github.com/Yitaek",author_image_url:"https://avatars.githubusercontent.com/Yitaek",description:"This tutorial shows ways to downsample data and detach or drop partitions when old data is no longer necessary using QuestDB.",keywords:["timeseries","data lifecycle"],tags:["tutorial","data lifecycle"],image:"/img/blog/2022-11-02/banner.png"},d={permalink:"/blog/2022/11/02/data-lifecycle-questdb",source:"@site/blog/2022-11-02-data-lifecycle-questdb.md",title:"Data Lifecycle with QuestDB",description:"This tutorial shows ways to downsample data and detach or drop partitions when old data is no longer necessary using QuestDB.",date:"2022-11-02T00:00:00.000Z",formattedDate:"November 2, 2022",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"data lifecycle",permalink:"/blog/tags/data-lifecycle"}],readingTime:4.84,truncated:!0,prevItem:{title:"QuestDB at Devoxx Belgium 2022",permalink:"/blog/2022/11/08/questdb-devoxx-belgium-2022"},nextItem:{title:"QuestDB 6.5.4 Release - Hacktoberfest",permalink:"/blog/2022/10/25/questdb-release-6.5.4"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Populating heart rate data",id:"populating-heart-rate-data",children:[]},{value:"Downsampling the data",id:"downsampling-the-data",children:[]},{value:"Data retention strategy",id:"data-retention-strategy",children:[]}],c={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{alt:"A screenshot showing data monitoring",height:500,src:"/img/blog/2022-11-02/banner.png",width:692,mdxType:"Banner"}),(0,o.kt)("p",null,"In this tutorial, our community contributor,\n",(0,o.kt)("a",{parentName:"p",href:"https://yitaek.medium.com/"},"Yitaek Hwang"),", shows us ways to downsample data and\ndetach or drop partitions when old data is no longer necessary using QuestDB."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"For most applications dealing with time series data, the value of each data\npoint diminishes over time as the granularity of the dataset loses relevance as\nit gets stale. For example, when applying a real-time anomaly detection model,\nmore granular data (e.g., data collected at second resolution), would yield\nbetter results. However, to train forecasting models afterwards, recording data\nat such high frequency may not be needed and would be costly in terms of storage\nand compute."),(0,o.kt)("p",null,"When I was working for an IoT company, to combat this issue, we stored data in\nthree separate databases. To show the most up to date value, latest updates were\npushed to a NoSQL realtime database. Simultaneously, all the data was appended\nto both a time series database storing up to 3 months of data for quick analysis\nand to an OLAP database for long-term storage. To stop the time series database\nfrom exploding in size, we also ran a nightly job to delete old data. As the\nsize of the data grew exponentially with IoT devices, this design caused\noperational issues with maintaining three different databases."),(0,o.kt)("p",null,"QuestDB solves this by providing easy ways to downsample the data and also\ndetach or drop partitions when old data is no longer necessary. This helps to\nkeep all the data in a single database for most operations and move stale data\nto cheaper storage in line with a mature data retention policy."),(0,o.kt)("p",null,"To illustrate, let\u2019s revisit the\n",(0,o.kt)("a",{parentName:"p",href:"/blog/2021/02/05/streaming-heart-rate-data-with-iot-core-and-questdb/"},"IoT application involving heart rate data"),".\nUnfortunately, Google decided to\n",(0,o.kt)("a",{parentName:"p",href:"https://techcrunch.com/2022/08/17/google-cloud-will-shutter-its-iot-core-service-next-year/"},"shut down its Cloud IoT Core service"),",\nso we\u2019ll use randomized data for this demo."),(0,o.kt)("h2",{id:"populating-heart-rate-data"},"Populating heart rate data"),(0,o.kt)("p",null,"Let\u2019s begin by running ",(0,o.kt)("a",{parentName:"p",href:"/docs/get-started/docker/"},"QuestDB via Docker"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'docker run -p 9000:9000 \\\n-p 9009:9009 \\\n-p 8812:8812 \\\n-p 9003:9003 \\\n-v "$(pwd):/var/lib/questdb" \\\nquestdb/questdb:6.5.4\n')),(0,o.kt)("p",null,"We\u2019ll create the a simple heart-rate data table with a timestamp, heart rate,\nand sensor ID partitioned by month via the console at localhost:9000:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE heart_rate AS(\n    SELECT\n      x ID,\n      timestamp_sequence(\n        to_timestamp('2022\u201310\u201310T00:00:00', 'yyyy-MM-ddTHH:mm:ss'),\n        rnd_long(1, 10, 0) * 100000L) ts,\n      rnd_double(0) * 100 + 60 heartrate,\n      rnd_long(0, 10000, 0) sensorId\n    FROM\n      long_sequence(10000000) x\n    ) TIMESTAMP(ts) PARTITION BY MONTH;\n")),(0,o.kt)("p",null,"We now have randomized data from 10,000 sensors over ~2 months time frame (10M\ndata points). Suppose we are continuously appending to this dataset from a data\nstream, then having such frequent updates will be useful to detect anomalies in\nheart rate. This could be useful to detect and alert on health issues that could\narise."),(0,o.kt)("h2",{id:"downsampling-the-data"},"Downsampling the data"),(0,o.kt)("p",null,"However, if no anomalies are detected, having a dataset with heart rate\ncollected every second is not useful if we simply want to note general trends\nover time. Instead we can record the average heart rate in one hour intervals to\ncompact data. For example, if we\u2019re interested in the min, max, and avg heart\nrate of a specific sensor, sampled every hour, we can invoke:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    min(heartrate),\n    max(heartrate),\n    avg(heartrate),\n    ts\nFROM\n    heart_rate\nWHERE\n    sensorId = 1000 SAMPLE BY 1h FILL(NULL, NULL, PREV);\n")),(0,o.kt)("p",null,"Once you are happy with the downsampled results, we can store those results into\na separate sampled_data table for other data science time to create forecasting\nmodels or do further analysis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE sampled_data (ts *timestamp*, min_heartrate *double*, max_heartrate *double*, avg_heartrate *double*, sensorId *long*) *timestamp*(ts);\n\nINSERT INTO sampled_data (ts, min_heartrate, max_heartrate, avg_heartrate, sensorId);\n\nSELECT ts, min(heartrate), max(heartrate), avg(heartrate), sensorId FROM heart_rate SAMPLE BY 1h FILL(NULL, NULL, PREV);\n")),(0,o.kt)("p",null,"This downsampling operation can be done periodically (e.g., daily, monthly) to\npopulate the new table. This way the data science team does not have to import\nthe massive raw dataset and can simply work with sampled data with appropriate\nresolution."),(0,o.kt)("h2",{id:"data-retention-strategy"},"Data retention strategy"),(0,o.kt)("p",null,"Downsampling alone, however, does not solve the growing data size. The raw\nsensor ",(0,o.kt)("inlineCode",{parentName:"p"},"heart_rate")," table will continue to grow in size. In this case, we have\nsome options in QuestDB to detach or even drop partitions."),(0,o.kt)("p",null,"Since we partitioned the original dataset by month, we have 3 partitions:\n",(0,o.kt)("inlineCode",{parentName:"p"},"2022\u201310"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"2022\u201311"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"2022\u201312"),". This can be seen under ",(0,o.kt)("inlineCode",{parentName:"p"},"/db/heart_rate/"),"\ndirectories, along with other files holding metadata."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/db/heart_rate\n  \u251c\u2500\u2500 2022\u201310\n  \u251c\u2500\u2500 2022\u201311\n  \u251c\u2500\u2500 2022\u201312\n")),(0,o.kt)("p",null,"After we have downsampled the data, we probably no longer need data from older\nmonths. In this case, we can\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/alter-table-detach-partition/"},"DETACH")," this partition to\nmake it unavailable for reads."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"ALTER TABLE \u2018heart_rate\u2019 DETACH PARTITION LIST \u20182022\u201310\u2019;\n")),(0,o.kt)("p",null,"Now the ",(0,o.kt)("inlineCode",{parentName:"p"},"2022\u201310")," partition is renamed to ",(0,o.kt)("inlineCode",{parentName:"p"},"2022\u201310.detached")," and running queries\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"heart_rate")," table returns data from ",(0,o.kt)("inlineCode",{parentName:"p"},"2022\u201311")," onwards:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM \u2018heart_rate\u2019 LIMIT 10;\n")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://cdn-images-1.medium.com/max/3200/0*XdjQoRUjy_6czOvG",alt:null})),(0,o.kt)("p",null,"We can then compress this data and move it to a cheaper block storage option\nlike S3 or GCS:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"tar cfz - \u2018/db/heart_rate/2022\u201310.detached\u2019 | aws s3 cp - s3://my-data-backups/2022\u201310.tar.gz\n")),(0,o.kt)("p",null,"If we need to restore this partition for further analysis, we can re-download\nthe tar file to a new directory named ",(0,o.kt)("inlineCode",{parentName:"p"},"PARTITION-NAME.attachable")," under ",(0,o.kt)("inlineCode",{parentName:"p"},"/db/"),"\n(or where the rest of the QuestDB data lives) and uncompress the tar file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir 2022\u201302.attachable | aws s3 cp s3:/my-data-backups/2022\u201310.tar.gz - | tar xvfz - -C 2022\u201310.attachable - strip-components 1\n")),(0,o.kt)("p",null,"With the data in place, simply use the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/alter-table-attach-partition/"},"ATTACH")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ALTER TABLE heart_rate ATTACH PARTITION LIST \u20182022\u201310\u2019;\n")),(0,o.kt)("p",null,"We can verify the partition has been attached back by running the count query\nand seeing 10M records:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"SELECT count() FROM heart_rate;\n")),(0,o.kt)("p",null,"Alternatively, if we want to simply delete partitions, we can use the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/alter-table-drop-partition/"},"DROP")," command to do so. Unlike\nthe DETACH command, this operation is irreversible:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ALTER TABLE heart_rate DROP PARTITION LIST \u20182022\u201310\u2019;\n")))}u.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);