"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[3060],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||i;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},47343:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},metadata:function(){return d},toc:function(){return u},default:function(){return h}});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),o=a(46092),l=a(72525),s=["components"],p={title:"Build a monitoring dashboard with QuestDB and Grafana",author:"Joan Augsburger",author_title:"QuestDB Team",author_url:"https://github.com/jaugsburger",author_image_url:"https://avatars.githubusercontent.com/jaugsburger",description:"Use Grafana with QuestDB to build a monitoring dashboard for visualization of time series data.",keywords:["timeseries","questdb","grafana"],tags:["tutorial","grafana"],image:"/img/blog/shared/og-grafana.png"},d={permalink:"/blog/2020/10/19/grafana-tutorial",source:"@site/blog/2020-10-19-grafana-tutorial.mdx",title:"Build a monitoring dashboard with QuestDB and Grafana",description:"Use Grafana with QuestDB to build a monitoring dashboard for visualization of time series data.",date:"2020-10-19T00:00:00.000Z",formattedDate:"October 19, 2020",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"grafana",permalink:"/blog/tags/grafana"}],readingTime:7.455,truncated:!0,prevItem:{title:"Authentication for InfluxDB line protocol",permalink:"/blog/2020/10/20/authentication-for-influx-line-protocol"},nextItem:{title:"NYC taxi meter and options pricing",permalink:"/blog/2020/10/16/taxi-drivers-are-options-traders"}},u=[{value:"What is Grafana?",id:"what-is-grafana",children:[]},{value:"Setup",id:"setup",children:[{value:"Start Grafana",id:"start-grafana",children:[]},{value:"Start QuestDB",id:"start-questdb",children:[]},{value:"Loading the dataset",id:"loading-the-dataset",children:[]}]},{value:"Creating your first visualization",id:"creating-your-first-visualization",children:[{value:"Create a data source",id:"create-a-data-source",children:[]},{value:"Create a dashboard and a panel",id:"create-a-dashboard-and-a-panel",children:[]},{value:"Adding multiple queries",id:"adding-multiple-queries",children:[]}]},{value:"ASOF JOIN",id:"asof-join",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],c={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{alt:"A dashboard showing several graphs with operationnal data",height:433,src:"/img/blog/2020-10-19/banner.jpg",width:650,mdxType:"Banner"},"Photo by ",(0,i.kt)("a",{href:"https://unsplash.com/photos/JKUTrJ4vK00"},"Luke Chesser")," ","via ",(0,i.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,i.kt)("p",null,"In this tutorial, we will cover how to load demo data from ",(0,i.kt)("inlineCode",{parentName:"p"},".CSV")," files into\nQuestDB and to use this as a data source for a Grafana dashboard. The dashboard\nwill have line charts as data visualizations that make use of aggregate SQL\nfunctions and Grafana global variables for sampling data based on dashboard\nsettings."),(0,i.kt)("h2",{id:"what-is-grafana"},"What is Grafana?"),(0,i.kt)("p",null,"Grafana is an open-source visualization tool consisting of a server that\nconnects to one or more data-sources to retrieve data, which is then visualized\nby the user in a browser."),(0,i.kt)("p",null,"The following three Grafana features will be used in this tutorial:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Data source")," - this is how you tell Grafana where your data is stored and\nhow you want to access it. For this tutorial, we will have a QuestDB server\nrunning which we will access via Postgres Wire using the PostgreSQL data\nsource plugin."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Dashboard")," - A group of widgets that are displayed together on the same\nscreen."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Panel")," - A single visualization which can be a graph or table.")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("h3",{id:"start-grafana"},"Start Grafana"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -p 3000:3000 grafana/grafana\n")),(0,i.kt)("p",null,"Once the Grafana server has started, you can access it via port 3000\n(",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000"),"). The default login credentials\nare as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"user:admin\npassword:admin\n")),(0,i.kt)("h3",{id:"start-questdb"},"Start QuestDB"),(0,i.kt)("p",null,"The Docker version for QuestDB can be run exposing the port ",(0,i.kt)("inlineCode",{parentName:"p"},"8812")," for the\nPostgreSQL connection and port ",(0,i.kt)("inlineCode",{parentName:"p"},"9000")," for the web and REST interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -p 8812:8812 -p 9000:9000 questdb/questdb\n")),(0,i.kt)("h3",{id:"loading-the-dataset"},"Loading the dataset"),(0,i.kt)("p",null,"On our ",(0,i.kt)("a",{parentName:"p",href:"https://"},"live demo"),", uses 10+ years of taxi data. For this tutorial,\nwe have a subset of that data, the data for the whole of February 2018. You can\ndownload the compressed dataset\n",(0,i.kt)("a",{parentName:"p",href:"https://s3-eu-west-1.amazonaws.com/questdb.io/datasets/grafana_tutorial_dataset.tar.gz"},"from Amazon S3"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"curl https://s3-eu-west-1.amazonaws.com/questdb.io/datasets/grafana_tutorial_dataset.tar.gz > grafana_data.tar.gz\ntar -xvf grafana_data.tar.gz\n")),(0,i.kt)("p",null,"There should be two datasets available as ",(0,i.kt)("inlineCode",{parentName:"p"},".CSV")," files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"weather.csv")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"taxi_trips_feb_2018.csv"))),(0,i.kt)("p",null,"These can be imported via curl using the ",(0,i.kt)("inlineCode",{parentName:"p"},"/imp")," REST entrypoint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"curl -F data=@taxi_trips_feb_2018.csv http://localhost:9000/imp\ncurl -F data=@weather.csv http://localhost:9000/imp\n")),(0,i.kt)("h2",{id:"creating-your-first-visualization"},"Creating your first visualization"),(0,i.kt)("h3",{id:"create-a-data-source"},"Create a data source"),(0,i.kt)("p",null,"In Grafana, select to the cog icon to expand the ",(0,i.kt)("strong",{parentName:"p"},"Configuration")," menu, select\n",(0,i.kt)("strong",{parentName:"p"},"Data Sources")," and click the ",(0,i.kt)("strong",{parentName:"p"},"Add data source")," button. Choose PostgreSQL\nplugin and configure it with the following settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"host:localhost:8812\ndatabase:qdb\nuser:admin\npassword:quest\nSSL mode:disable\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost")," cannot be resolved by the Grafana docker image, the local IP\naddress of your machine should be used for the ",(0,i.kt)("strong",{parentName:"p"},"host")," field, e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"192.168.0.3:8812"),"."),(0,i.kt)("p",null,"Note that Grafana does not validate that queries are read-only. This means it's\npossible to run queries such as ",(0,i.kt)("inlineCode",{parentName:"p"},"drop table x")," in Grafana which would be\ndestructive to a dataset."),(0,i.kt)("p",null,"To protect against this, set a dedicated QuestDB instance ",(0,i.kt)("strong",{parentName:"p"},"read-only mode")," by\nsetting the property ",(0,i.kt)("inlineCode",{parentName:"p"},"http.security.readonly=true")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"server.conf"),".\nDetails of setting this configuration can be found on QuestDB's\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/configuration"},"configuration page"),"."),(0,i.kt)("p",null,"To avoid unnecessary memory usage, it is also recommended to disable SELECT query\ncache by setting the property ",(0,i.kt)("inlineCode",{parentName:"p"},"pg.select.cache.enabled=false")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"server.conf"),".\nThat's because Grafana does not use prepared statements when sending the queries\nand the query cache becomes much less efficient."),(0,i.kt)("h3",{id:"create-a-dashboard-and-a-panel"},"Create a dashboard and a panel"),(0,i.kt)("p",null,"Now that we have a data source and a dashboard, we can add a panel. Navigate to\n",(0,i.kt)("strong",{parentName:"p"},"+ Create")," and select ",(0,i.kt)("strong",{parentName:"p"},"Dashboard"),":"),(0,i.kt)(l.Z,{alt:"Screenshot of a new dashboard with a 'Add new panel' button",src:"/img/blog/2020-10-19/add-new-panel.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"The new panel has a graphing area on the top half of the window and a query\nbuilder in the bottom half:"),(0,i.kt)(l.Z,{alt:"Screenshot of a blank panel after being created",src:"/img/blog/2020-10-19/blank-panel.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"Toggle the query editor to ",(0,i.kt)("strong",{parentName:"p"},"text edit mode")," by clicking the pencil icon or by\nclicking the ",(0,i.kt)("strong",{parentName:"p"},"Edit SQL")," button. The query editor will now accept SQL\nstatements that we can input directly:"),(0,i.kt)(l.Z,{alt:"Screenshot showing how to toggle text edit mode",src:"/img/blog/2020-10-19/toggle-text-edit.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"Paste the following query into the editor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SELECT pickup_datetime AS time,\n       avg(trip_distance) AS distance\nFROM ('taxi_trips_feb_2018.csv' timestamp(pickup_datetime))\nWHERE $__timeFilter(pickup_datetime)\nSAMPLE BY $__interval\n")),(0,i.kt)("p",null,"Click the time range selector above the chart and set the following date range:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set the ",(0,i.kt)("strong",{parentName:"li"},"From")," value to ",(0,i.kt)("inlineCode",{parentName:"li"},"2018-02-07 00:00:00")),(0,i.kt)("li",{parentName:"ul"},"Set the ",(0,i.kt)("strong",{parentName:"li"},"To")," value to ",(0,i.kt)("inlineCode",{parentName:"li"},"2018-02-14 23:59:59")," and click ",(0,i.kt)("strong",{parentName:"li"},"Apply time range"))),(0,i.kt)("p",null,"We have built our first panel with aggregations:"),(0,i.kt)(l.Z,{alt:"A panel showing the average distance traveled, filtered by taxi type and with dynamic sampling.",src:"/img/blog/2020-10-19/first-panel.png",mdxType:"Screenshot"}),(0,i.kt)("h4",{id:"query-details"},"Query details"),(0,i.kt)("p",null,"To graph the average trip distance above, we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"avg()")," function on the\n",(0,i.kt)("inlineCode",{parentName:"p"},"trip_distance")," column. This function aggregates data over the specified\nsampling interval. If the sampling interval is ",(0,i.kt)("strong",{parentName:"p"},"1-hour"),", we are calculating\nthe average distance traveled during each 1-hour interval. You can find more\ninformation on QuestDB\n",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/function/aggregation"},"aggregate functions on our documentation"),"."),(0,i.kt)("p",null,"There are also 2 key Grafana-specific expressions used which can be identified\nby the ",(0,i.kt)("inlineCode",{parentName:"p"},"$__")," prefix:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$__interval")," This is a dynamic interval based on the time range applied to the\ndashboard. By using this function, the sampling interval changes automatically\nas the user zooms in and out of the panel."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$__timeFilter(pickup_datetime)")," tells Grafana to send the start-time and\nend-time defined in the dashboard to the QuestDB server. Given the settings we\nhave configured so far with our date range, Grafana translates this to the\nfollowing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pickupDatetime BETWEEN '2018-02-01T00:00:00Z' AND '2018-02-28T23:59:59Z'\n")),(0,i.kt)("p",null,"These are ",(0,i.kt)("strong",{parentName:"p"},"global variables")," which can be used in queries and elsewhere in\npanels and dashboards. To learn more about the use of these variables, refer to\nthe\n",(0,i.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/variables/variable-types/global-variables/#global-variables"},"Grafana reference documentation on Global variables"),"."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For existing Grafana query known issue, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/third-party-tools/grafana/#known-issues"},"Known issues"),"."))),(0,i.kt)("h3",{id:"adding-multiple-queries"},"Adding multiple queries"),(0,i.kt)("p",null,"You can add multiple queries to the same panel which will display multiple lines\non a graph. To demonstrate this, separate the taxi data into two series, one for\ncash payments and one for card payments. The first query will have a default\nname of ",(0,i.kt)("inlineCode",{parentName:"p"},"A")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"--Cash\nSELECT pickup_datetime AS time,\n       avg(trip_distance) AS cash\nFROM ('taxi_trips_feb_2018.csv' timestamp(pickup_datetime))\nWHERE $__timeFilter(pickup_datetime)\nAND payment_type IN ('Cash')\nSAMPLE BY $__interval\n")),(0,i.kt)("p",null,"Click ",(0,i.kt)("strong",{parentName:"p"},"+ Query")," to add a second query (automatically labeled ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),") and paste\nthe following in text mode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"--Card\nSELECT pickup_datetime AS time,\n       avg(trip_distance) AS card\nFROM ('taxi_trips_feb_2018.csv' timestamp(pickup_datetime))\nWHERE $__timeFilter(pickup_datetime)\nAND payment_type IN ('Card')\nSAMPLE BY $__interval\n")),(0,i.kt)("p",null,"Both queries are now layered on the same panel with a green line for cash and a\nyellow line for card payments:"),(0,i.kt)(l.Z,{alt:"A panel showing the average distance travelled, filtered by taxi type and with dynamic sampling.",src:"/img/blog/2020-10-19/panel-filtering-by-taxi-type.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"We can see in this graph that the distance traveled by those paying with cards\nis longer than for those paying with cash. This could be due to the fact that\nusers usually carry less cash than the balance in their card."),(0,i.kt)("p",null,"Let\u2019s add another panel:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SELECT\npickup_datetime AS \"time\",\ncount()\nFROM ('taxi_trips_feb_2018.csv' timestamp(pickup_datetime))\nWHERE $__timeFilter(pickup_datetime)\nSAMPLE BY $__interval;\n")),(0,i.kt)("p",null,"This is what our query looks like when viewing a time range of 28 days:"),(0,i.kt)(l.Z,{alt:"A panel showing the number of trips over a month using dynamic sampling.",src:"/img/blog/2020-10-19/panel-count-of-taxi-trips-in-whole-month.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"Zooming in to a single day shows more detailed data points as we are sampling by\nGrafana's ",(0,i.kt)("inlineCode",{parentName:"p"},"$__interval")," property:"),(0,i.kt)(l.Z,{alt:"A panel showing the number of trips in a day using dynamic sampling.",src:"/img/blog/2020-10-19/panel-count-of-taxi-trips-in-a-day.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"The daily cycle of activity is visible, with rides peaking in the early evening\nand reaching a low in the middle of the night."),(0,i.kt)("h2",{id:"asof-join"},"ASOF JOIN"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ASOF JOIN")," allows us to join 2 tables based on timestamp where timestamps do\nnot exactly match. To join the taxi trips data with weather data, enter the\nfollowing query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"SELECT\n    pickup_datetime as \"time\",\n    avg(fare_amount) as fare_amount,\n    avg(rain1H) as rain1H\nFROM (('taxi_trips_feb_2018.csv' timestamp(pickup_datetime)) WHERE $__timeFilter(pickup_datetime))\nASOF JOIN (weather.csv timestamp(timestamp))\nSAMPLE BY $__interval;\n")),(0,i.kt)("p",null,"To view a selected week in February 2018, select the time range picker above the\nchart:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set the ",(0,i.kt)("strong",{parentName:"li"},"From")," value to ",(0,i.kt)("inlineCode",{parentName:"li"},"2018-02-07 00:00:00")),(0,i.kt)("li",{parentName:"ul"},"Set the ",(0,i.kt)("strong",{parentName:"li"},"To")," value to ",(0,i.kt)("inlineCode",{parentName:"li"},"2018-02-14 23:59:59")," and click ",(0,i.kt)("strong",{parentName:"li"},"Apply time range")),(0,i.kt)("li",{parentName:"ul"},"Enable dual Y-axis in the option panel by using ",(0,i.kt)("strong",{parentName:"li"},"Overrides"),", simply\nassgining different axis placements and units for fields ",(0,i.kt)("inlineCode",{parentName:"li"},"fare_amount")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"rain1H"),".")),(0,i.kt)(l.Z,{alt:"Assign different placement and units respectively for average fare amount and hourly precipitation.",src:"/img/blog/2020-10-19/enable-2nd-y-axis.png",mdxType:"Screenshot"}),(0,i.kt)("p",null,"In this graph, we have 2 series, in green we have the fare amount sampled\ndynamically, and in yellow we have the average precipitation per hour in\nmillimeters. From the graph, it\u2019s hard to say whether there is a correlation\nbetween rain and the amount spent on taxi rides."),(0,i.kt)(l.Z,{alt:"A panel showing taxi fares plotted against rain fall",src:"/img/blog/2020-10-19/panel-taxi-fares-and-rain.png",mdxType:"Screenshot"}),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"We have learned how to import time series data into QuestDB and build a\ndashboard with multiple queries in Grafana. If you like this content and want to\nsee more tutorials about third-party integrations, let us know\n",(0,i.kt)("a",{parentName:"p",href:"https://"},"in our Slack Community")," or drop us a\n",(0,i.kt)("a",{parentName:"p",href:"https://"},"star on GitHub"),"."))}h.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);