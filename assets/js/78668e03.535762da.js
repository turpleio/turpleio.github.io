"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[8222],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return k}});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),s=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(o.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),d=s(n),k=r,c=d["".concat(o,".").concat(k)]||d[k]||m[k]||l;return n?a.createElement(c,i(i({ref:e},u),{},{components:n})):a.createElement(c,i({ref:e},u))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=d;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},68801:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},metadata:function(){return o},toc:function(){return s},default:function(){return m}});var a=n(83117),r=n(80102),l=(n(67294),n(3905)),i=["components"],p={title:"Text functions",sidebar_label:"Text",description:"Text function reference documentation."},o={unversionedId:"reference/function/text",id:"reference/function/text",isDocsHomePage:!1,title:"Text functions",description:"Text function reference documentation.",source:"@site/docs/reference/function/text.md",sourceDirName:"reference/function",slug:"/reference/function/text",permalink:"/docs/reference/function/text",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/function/text.md",version:"current",sidebar_label:"Text",frontMatter:{title:"Text functions",sidebar_label:"Text",description:"Text function reference documentation."},sidebar:"docs",previous:{title:"Geospatial functions",permalink:"/docs/reference/function/spatial"},next:{title:"Timestamp generator",permalink:"/docs/reference/function/timestamp-generator"}},s=[{value:"concat",id:"concat",children:[]},{value:"length",id:"length",children:[]},{value:"left",id:"left",children:[]},{value:"right",id:"right",children:[]},{value:"strpos / position",id:"strpos--position",children:[]},{value:"substring",id:"substring",children:[]},{value:"to_lowercase / lower",id:"to_lowercase--lower",children:[{value:"Arguments",id:"arguments",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Examples",id:"examples",children:[]}]},{value:"to_uppercase / upper",id:"to_uppercase--upper",children:[{value:"Arguments",id:"arguments-1",children:[]},{value:"Return value",id:"return-value-1",children:[]},{value:"Examples",id:"examples-1",children:[]}]}],u={toc:s};function m(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This page describes the available functions to assist with performing text\nmanipulation such as concatenation, case conversion, and string length\ncalculation."),(0,l.kt)("h2",{id:"concat"},"concat"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"concat(str, ...)")," - concatenates a string from one or more input values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT firstName, lastName, concat(firstName, ' ', lastName) FROM names;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"lastName"),(0,l.kt)("th",{parentName:"tr",align:null},"concat"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tim"),(0,l.kt)("td",{parentName:"tr",align:null},"Thompson"),(0,l.kt)("td",{parentName:"tr",align:null},"Tim Thompson")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Anna"),(0,l.kt)("td",{parentName:"tr",align:null},"Thompson"),(0,l.kt)("td",{parentName:"tr",align:null},"Anna Thompson")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Anna"),(0,l.kt)("td",{parentName:"tr",align:null},"Mason"),(0,l.kt)("td",{parentName:"tr",align:null},"Anna Mason")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tom"),(0,l.kt)("td",{parentName:"tr",align:null},"Johnson"),(0,l.kt)("td",{parentName:"tr",align:null},"Tom Johnson")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tim"),(0,l.kt)("td",{parentName:"tr",align:null},"Smith"),(0,l.kt)("td",{parentName:"tr",align:null},"Tim Smith")))),(0,l.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"concat()")," can be used to generate ",(0,l.kt)("inlineCode",{parentName:"p"},"line protocol"),". See an example below."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Generating line protocol"',title:'"Generating',line:!0,'protocol"':!0},"SELECT\nconcat(\n    'trades,instrument=', rnd_str(2,2,0),\n    ',side=', rnd_str('B', 'S'),\n    ' price=', abs(cast(rnd_double(0)*100000 AS INT)),\n    ',quantity=', abs(cast(rnd_double(0)*10000 AS INT)),\n    ' ',\n    1571270400000 + (x-1) * 100\n)\nFROM long_sequence(5) x;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:'language-title="Result"'},"trades,instrument=CR,side=B price=70867,quantity=9192 1571270400000\ntrades,instrument=LN,side=S price=37950,quantity=1439 1571270400100\ntrades,instrument=ZJ,side=S price=82829,quantity=8871 1571270400200\ntrades,instrument=EW,side=S price=10427,quantity=1945 1571270400300\ntrades,instrument=MI,side=B price=99348,quantity=8450 1571270400400\n")),(0,l.kt)("h2",{id:"length"},"length"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"length(string)")," - reads length of ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," value type (result is ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),")"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"length(symbol)")," - reads length of ",(0,l.kt)("inlineCode",{parentName:"p"},"symbol")," value type (result is ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),")"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"length(blob)")," - reads length of ",(0,l.kt)("inlineCode",{parentName:"p"},"binary")," value type (result is ",(0,l.kt)("inlineCode",{parentName:"p"},"long"),")"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("inlineCode",{parentName:"li"},"string")),(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("inlineCode",{parentName:"li"},"symbol")),(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("inlineCode",{parentName:"li"},"binary")," blob")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT name a, length(name) b FROM names limit 4\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"a"),(0,l.kt)("th",{parentName:"tr",align:null},"b"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"AARON"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"AMELIE"),(0,l.kt)("td",{parentName:"tr",align:null},"6")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TOM"),(0,l.kt)("td",{parentName:"tr",align:null},"3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"-1")))),(0,l.kt)("h2",{id:"left"},"left"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"left(string, count)")," - extracts a substring of the given length from a string\n(starting from left)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," is a string to extract from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"count")," is an integer specifying the count of characters to be extracted into\na substring.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value:")),(0,l.kt)("p",null,"Returns a string with the extracted characters."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT name, left('Thompson', 3) l FROM names LIMIT 3\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"l"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"AARON"),(0,l.kt)("td",{parentName:"tr",align:null},"AAR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"AMELIE"),(0,l.kt)("td",{parentName:"tr",align:null},"AME")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TOM"),(0,l.kt)("td",{parentName:"tr",align:null},"TOM")))),(0,l.kt)("h2",{id:"right"},"right"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"right(string, count)")," - extracts a substring of the given length from a string\n(starting from right)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," is a string to extract from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"count")," is an integer specifying the count of characters to be extracted into\na substring.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value:")),(0,l.kt)("p",null,"Returns a string with the extracted characters."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT name, right('Thompson', 2) r FROM names LIMIT 3\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"l"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"AARON"),(0,l.kt)("td",{parentName:"tr",align:null},"ON")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"AMELIE"),(0,l.kt)("td",{parentName:"tr",align:null},"IE")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TOM"),(0,l.kt)("td",{parentName:"tr",align:null},"OM")))),(0,l.kt)("h2",{id:"strpos--position"},"strpos / position"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"strpos(string, substring)")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"position(string, substring)")," - searches for the first substring occurrence in a string, and returns\nthe index position of the starting character. If the substring is not found, this function returns ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),". The\nperformed search is case-sensitive."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," is a string to search in."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"substring")," is a string to search for.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value:")),(0,l.kt)("p",null,"Returns an integer for the substring position. Positions start from ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT name, strpos(name, 'Thompson') idx \nFROM full_names \nLIMIT 4;\n\n-- This is equal to:\nSELECT name, position(name, 'Thompson') idx \nFROM full_names \nLIMIT 4;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"idx"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tim Thompson"),(0,l.kt)("td",{parentName:"tr",align:null},"5")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Anna Thompson"),(0,l.kt)("td",{parentName:"tr",align:null},"6")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Anna Mason"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Tom Johnson"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("p",null,"Assuming we have a table ",(0,l.kt)("inlineCode",{parentName:"p"},"example_table")," with a single string type column ",(0,l.kt)("inlineCode",{parentName:"p"},"col"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"col"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"apple,pear")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cat,dog")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"...")))),(0,l.kt)("p",null,"As a more advanced example, we can use ",(0,l.kt)("inlineCode",{parentName:"p"},"strpos()")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"position()")," to split the string values of\n",(0,l.kt)("inlineCode",{parentName:"p"},"col"),", in this case splitting at the comma character, ",(0,l.kt)("inlineCode",{parentName:"p"},",")," . By using\n",(0,l.kt)("inlineCode",{parentName:"p"},"left()"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"right()")," functions, we can choose the string values at the left and\nright of the comma:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Splitting string into two separate columns"',title:'"Splitting',string:!0,into:!0,two:!0,separate:!0,'columns"':!0},"SELECT col,\n       left(col, strpos(col, ',') - 1) as col1,\n       right(col, length(col) - strpos(col, ',')) as col2\nFROM example_table;\n\n-- This is equal to:\n\nSELECT col,\n       left(col, position(col, ',') - 1) as col1,\n       right(col, length(col) - position(col, ',')) as col2\nFROM example_table;\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"col"),(0,l.kt)("th",{parentName:"tr",align:null},"col1"),(0,l.kt)("th",{parentName:"tr",align:null},"col2"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"apple,pear"),(0,l.kt)("td",{parentName:"tr",align:null},"apple"),(0,l.kt)("td",{parentName:"tr",align:null},"pear")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cat,dog"),(0,l.kt)("td",{parentName:"tr",align:null},"cat"),(0,l.kt)("td",{parentName:"tr",align:null},"dog")))),(0,l.kt)("h2",{id:"substring"},"substring"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"substring(string, start, length)")," - extracts a substring from the given string."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"string")," is a string to extract from."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"start")," is an integer specifying the position of the first character to be\nextracted. Positions start from ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"length")," is an integer specifying the count of characters to be extracted.\nShould be non-negative.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Return value:")),(0,l.kt)("p",null,"Returns a string with the extracted characters. If any part the arguments is\n",(0,l.kt)("inlineCode",{parentName:"p"},"null"),", the function returns ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Examples:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT id, substring(id, 1, 2) country FROM orders LIMIT 3\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"country"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UK2022072619373"),(0,l.kt)("td",{parentName:"tr",align:null},"UK")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"UK2022072703162"),(0,l.kt)("td",{parentName:"tr",align:null},"UK")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"US2022072676246"),(0,l.kt)("td",{parentName:"tr",align:null},"US")))),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," argument is negative, the output depends on the value of\n",(0,l.kt)("inlineCode",{parentName:"p"},"start+length"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"start+length")," is greater than 1, the substring stops at position\n",(0,l.kt)("inlineCode",{parentName:"li"},"start+length - 1"),"."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"start+length")," is zero, the output is empty string."),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"start+length")," is less than zero, the output is ",(0,l.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'},"SELECT substring('Lorem ipsum dolor sit amet', -5, 9)\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"substring"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Lor")))),(0,l.kt)("h2",{id:"to_lowercase--lower"},"to_lowercase / lower"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to_lowercase(string)")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"lower(string)")," - converts all upper case string\ncharacters to lowercase")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")," is the input strong to be converted."),(0,l.kt)("h3",{id:"return-value"},"Return value"),(0,l.kt)("p",null,"Return value type is ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)("h3",{id:"examples"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT lower('questDB');\n-- This is equal to:\nSELECT to_lowercase('questDB');\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"to_lowercase"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"questdb")))),(0,l.kt)("h2",{id:"to_uppercase--upper"},"to_uppercase / upper"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"to_uppercase(string)")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"upper(string)")," - converts all lower case string\ncharacters to uppercase")),(0,l.kt)("h3",{id:"arguments-1"},"Arguments"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")," is the input strong to be converted."),(0,l.kt)("h3",{id:"return-value-1"},"Return value"),(0,l.kt)("p",null,"Return value type is ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)("h3",{id:"examples-1"},"Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT upper('questDB');\n-- This is equal to:\nSELECT to_uppercase('questDB');\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"to_uppercase"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"QUESTDB")))))}m.isMDXComponent=!0}}]);