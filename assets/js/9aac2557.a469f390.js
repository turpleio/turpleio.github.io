"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[6402],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(r),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var p=2;p<o;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},45105:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var n=r(83117),i=r(80102),o=(r(67294),r(3905)),a=["components"],c={title:"ILP UDP Receiver",sidebar_label:"UDP Receiver",description:"InfluxDB line protocol UDP receiver reference documentation."},l={unversionedId:"reference/api/ilp/udp-receiver",id:"reference/api/ilp/udp-receiver",isDocsHomePage:!1,title:"ILP UDP Receiver",description:"InfluxDB line protocol UDP receiver reference documentation.",source:"@site/docs/reference/api/ilp/udp-receiver.md",sourceDirName:"reference/api/ilp",slug:"/reference/api/ilp/udp-receiver",permalink:"/docs/reference/api/ilp/udp-receiver",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/api/ilp/udp-receiver.md",version:"current",sidebar_label:"UDP Receiver",frontMatter:{title:"ILP UDP Receiver",sidebar_label:"UDP Receiver",description:"InfluxDB line protocol UDP receiver reference documentation."},sidebar:"docs",previous:{title:"ILP TCP Receiver",permalink:"/docs/reference/api/ilp/tcp-receiver"},next:{title:"Authenticate",permalink:"/docs/reference/api/ilp/authenticate"}},p=[{value:"Overview",id:"overview",children:[]},{value:"Commit strategy",id:"commit-strategy",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Examples",id:"examples",children:[]}],s={toc:p};function u(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The UDP receiver is deprecated since QuestDB version 6.5.2.\nWe recommend the ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/tcp-receiver/"},"TCP receiver")," instead."))),(0,o.kt)("p",null,"The UDP receiver can handle both single and multi row write requests. It is\ncurrently single-threaded, and performs both network I/O and write jobs out of\none thread. The UDP worker thread can work either on its own thread or use the\ncommon thread pool. It supports both multicast and unicast."),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"By default, QuestDB listens for ",(0,o.kt)("inlineCode",{parentName:"p"},"multicast")," line protocol packets over UDP on\n",(0,o.kt)("inlineCode",{parentName:"p"},"232.1.2.3:9009"),". If you are running QuestDB with Docker, you will need to\npublish the port ",(0,o.kt)("inlineCode",{parentName:"p"},"9009")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"-p 9009:9009")," and publish multicast packets with\nTTL of at least 2. This port can be customized, and you can also configure\nQuestDB to listen for ",(0,o.kt)("inlineCode",{parentName:"p"},"unicast"),"."),(0,o.kt)("h2",{id:"commit-strategy"},"Commit strategy"),(0,o.kt)("p",null,"Uncommitted rows are committed either:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"after receiving a number of continuous messages equal to\n",(0,o.kt)("inlineCode",{parentName:"li"},"line.udp.commit.rate")," or"),(0,o.kt)("li",{parentName:"ul"},"when UDP receiver has idle time, i.e. ingestion slows down or completely\nstops.")),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"The UDP receiver configuration can be completely customized using\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/configuration#udp-specific-settings"},"configuration keys"),". You\ncan use this to configure the IP address and port the receiver binds to, commit\nrates, buffer size, whether it should run on a separate thread etc."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Find an example of how to use this in the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/api/java-embedded#influxdb-sender-library"},"InfluxDB sender library section"),"."))}u.isMDXComponent=!0}}]);