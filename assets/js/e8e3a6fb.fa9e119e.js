"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[3135],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(a),h=i,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||r;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},95575:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var n=a(83117),i=a(80102),r=(a(67294),a(3905)),o=a(46092),s=a(72525),l=["components"],u={title:"Time Series Data Analytics with QuestDB and Cube.js",author:"Andrey Pechkurov",author_title:"QuestDB Engineering",author_url:"https://github.com/puzpuzpuz",author_image_url:"https://avatars.githubusercontent.com/puzpuzpuz",description:"Time Series Data Analytics with QuestDB and Cube",keywords:["cube","cube.js","questdb","analytics","time series"],tags:["tutorial","engineering","integration","ethereum","cube.js","analytics","time series"],image:"/img/blog/2022-04-26/cover.png"},c={permalink:"/blog/2022/04/26/time-series-data-analytics-with-questdb-and-cube",source:"@site/blog/2022-04-26-time-series-data-analytics-with-questdb-and-cube.mdx",title:"Time Series Data Analytics with QuestDB and Cube.js",description:"Time Series Data Analytics with QuestDB and Cube",date:"2022-04-26T00:00:00.000Z",formattedDate:"April 26, 2022",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"engineering",permalink:"/blog/tags/engineering"},{label:"integration",permalink:"/blog/tags/integration"},{label:"ethereum",permalink:"/blog/tags/ethereum"},{label:"cube.js",permalink:"/blog/tags/cube-js"},{label:"analytics",permalink:"/blog/tags/analytics"},{label:"time series",permalink:"/blog/tags/time-series"}],readingTime:7.07,truncated:!0,prevItem:{title:"QuestDB 6.3 Release Highlights",permalink:"/blog/2022/05/09/questdb-release-6-3"},nextItem:{title:"Enabling Machine Learning in QuestDB with MindsDB",permalink:"/blog/2022/04/18/enabling-machine-learning-in-questdb-with-mindsdb"}},p=[{value:"What is QuestDB?",id:"what-is-questdb",children:[]},{value:"What is Cube?",id:"what-is-cube",children:[]},{value:"How QuestDB and Cube Work Together",id:"how-questdb-and-cube-work-together",children:[]},{value:"Exploring Crypto Prices with QuestDB and Cube",id:"exploring-crypto-prices-with-questdb-and-cube",children:[]},{value:"Setting Up QuestDB and Importing Time Series Data",id:"setting-up-questdb-and-importing-time-series-data",children:[]},{value:"Building a Cube Data Model",id:"building-a-cube-data-model",children:[]},{value:"Consuming Time Series Data via APIs",id:"consuming-time-series-data-via-apis",children:[]}],d={toc:p};function h(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{alt:"Time Series Data Analytics with QuestDB and Cube",height:360,src:"/img/blog/2022-04-26/cover.png",width:650,mdxType:"Banner"}),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This blog post is the outcome of collaboration between\n",(0,r.kt)("a",{parentName:"em",href:"https://github.com/ishaterdal"},"Isha Terdal")," from Cube,\n",(0,r.kt)("a",{parentName:"em",href:"https://github.com/puzpuzpuz"},"Andrey Pechkurov")," from QuestDB and\n",(0,r.kt)("a",{parentName:"em",href:"https://github.com/yitaek"},"Yitaek Hwang"),", a QuestDB contributor.")),(0,r.kt)("p",null,"Time series data has now become a critical part of the data applications\nlandscape. In this blog, we'll take a look at how QuestDB and Cube work together\nto provide a time series data pipeline that is fast, consistent, and reliable."),(0,r.kt)("h2",{id:"what-is-questdb"},"What is QuestDB?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://questdb.io"},"QuestDB")," is a performant open-source database for time\nseries data. Its codebase is optimized for storing and processing large amounts\nof time-stamped data efficiently through lightning-fast SQL queries."),(0,r.kt)("p",null,"QuestDB also allows for integration with a variety of popular open source tools\nthrough the PostgreSQL wire protocol, and its use cases range from real-time\nanalytics and monitoring to market/tick data and industrial telemetry."),(0,r.kt)("h2",{id:"what-is-cube"},"What is Cube?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cube.dev"},"Cube")," is a headless business intelligence platform that can\norganize all your data into a structured data model. Defining metrics upstream\nof your applications\u2014so, for instance, defining the granularity of data\nobserved\u2014enables you to access the same data metrics across various\napplications, use cases, and teams."),(0,r.kt)("p",null,"With Cube's data modeling capabilities, you can shorten your project timeline\nfrom weeks to hours. And, with its API-first approach, you can connect to your\nstreamlined data via an API that best suits your application and infrastructure\n(whether it be a REST, GraphQL, or SQL API)."),(0,r.kt)("h2",{id:"how-questdb-and-cube-work-together"},"How QuestDB and Cube Work Together"),(0,r.kt)("p",null,"So there you have it\u2014a structured data model built on top of a fast repository\nof time series data. QuestDB is optimized for slicing and dicing time-stamped\ndata through its\n",(0,r.kt)("a",{parentName:"p",href:"https://questdb.io/docs/concept/sql-extensions/"},"SQL extensions"),". Cube also\noffers multiple ways of\n",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/caching/using-pre-aggregations"},"pre-aggregating")," data\neffectively by building a caching layer on top of your data to speed up\nperformance of slow queries. Together, QuestDB and Cube have your time series\ndata all set up for use downstream."),(0,r.kt)("h2",{id:"exploring-crypto-prices-with-questdb-and-cube"},"Exploring Crypto Prices with QuestDB and Cube"),(0,r.kt)("p",null,"Let's illustrate how the two app stacks work together. In this example, we'll\nshow how you can efficiently build an end-to-end crypto price analysis platform\nwith QuestDB and Cube. We will use Cube to expose time series data in QuestDB\nvia multiple APIs."),(0,r.kt)(s.Z,{alt:"A diagram of QuestDB's and Cube",height:281,src:"/img/blog/2022-04-26/questdb-cube-railchart.png",width:650,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"setting-up-questdb-and-importing-time-series-data"},"Setting Up QuestDB and Importing Time Series Data"),(0,r.kt)("p",null,"First, you should set up a new project directory in your local system e.g.\n",(0,r.kt)("inlineCode",{parentName:"p"},"questdb_cube"),"."),(0,r.kt)("p",null,"We'll begin our demo by using the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/sudalairajkumar/cryptocurrencypricehistory"},"Crypto dataset"),"\nto show how we can create a time series database in QuestDB, and then organize\nthe data downstream with Cube. Since both applications can be initiated using\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker"),", let's start up both engines by\nstringing them together using Docker Compose."),(0,r.kt)("p",null,"Then, create a docker-compose.yml file in the project directory with the\nfollowing contents:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "2.2"\n\nservices:\n  cube:\n    environment:\n      - CUBEJS_DEV_MODE=true\n    image: "cubejs/cube:latest"\n    ports:\n      - "4000:4000"\n    volumes:\n      - ".:/cube/conf"\n  questdb:\n    container_name: questdb\n    hostname: questdb\n    image: "questdb/questdb:latest"\n    ports:\n      - "9000:9000"\n      - "8812:8812"\n')),(0,r.kt)("p",null,"Add an .env file that gives Cube the details for connecting to QuestDB:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"CUBEJS_DB_HOST=questdb\nCUBEJS_DB_PORT=8812\nCUBEJS_DB_NAME=qdb\nCUBEJS_DB_USER=admin\nCUBEJS_DB_PASS=quest\nCUBEJS_DB_TYPE=questdb\n")),(0,r.kt)("p",null,"Run the containers using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,r.kt)(s.Z,{alt:"QuestDB docker image",height:215,src:"/img/blog/2022-04-26/questdb-docker-image.png",width:748,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Navigate to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:9000"},"localhost:9000")," to open QuestDB's Web\nConsole, click on the \u201cUpload\u201d icon on the left-hand panel, and import the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.kaggle.com/sudalairajkumar/cryptocurrencypricehistory"},"csv files of interest"),".\nWhile this example uses the Ethereum dataset, any of the coin datasets will work\nperfectly."),(0,r.kt)(s.Z,{alt:"QuestDB import view",height:224,src:"/img/blog/2022-04-26/questdb-import-view.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Note: Cube works best with table names that do not contain any special\ncharacters. So, we're going to rename our table using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"RENAME TABLE 'coin_Ethereum.csv' TO 'ethereum';\n")),(0,r.kt)(s.Z,{alt:"QuestDB web console",height:224,src:"/img/blog/2022-04-26/questdb-web-console.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Now, we're able to query the data:"),(0,r.kt)(s.Z,{alt:"QuestDB web console querying ethereum table",height:224,src:"/img/blog/2022-04-26/ethereum-query.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("h2",{id:"building-a-cube-data-model"},"Building a Cube Data Model"),(0,r.kt)("p",null,"The next step is to organize the time series data from QuestDB in a uniform and\naccessible manner; we do this by defining a data model."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/schema/fundamentals/concepts"},"Cube data model"),"\nconsists of entities we call 'cubes' that define metrics by dimensions\n(qualitative categories) and measures (numerical values). So, with that in mind,\nlet's continue by creating a cube for our Ethereum data."),(0,r.kt)("p",null,"Navigate to ",(0,r.kt)("a",{parentName:"p",href:"localhost:4000/#/schema"},"localhost:4000/#/schema")," and click on the\nEthereum table we imported into QuestDB:"),(0,r.kt)(s.Z,{alt:"Generate Schema on Cube",height:224,src:"/img/blog/2022-04-26/cube-generate-schema.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Clicking on the 'Generate Schema' button automatically bootstraps a cube for the\ndata in our local project directory\u2014a folder named 'schema'. This folder\ncontains a file called 'Ethereum.js' that you can open with any text editor."),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," field falls under ",(0,r.kt)("strong",{parentName:"p"},"measures"),"; name, symbol, and date\nfields are auto-populated as ",(0,r.kt)("strong",{parentName:"p"},"dimensions"),". Since we're interested in price\ncolumns, let's add them in (defined as 'high' and 'low' in the data model as\nshown below):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'cube(`Ethereum`, {\n  sql: `SELECT * FROM ethereum`,\n\n  measures: {\n    count: {\n      type: `count`,\n      drillMembers: [name, date],\n    },\n  },\n\n  dimensions: {\n    name: {\n      sql: `${CUBE}."Name"`,\n      type: `string`,\n    },\n\n    symbol: {\n      sql: `${CUBE}."Symbol"`,\n      type: `string`,\n    },\n\n    date: {\n      sql: `${CUBE}."Date"`,\n      type: `time`,\n    },\n\n    high: {\n      type: "number",\n      sql: `${CUBE}."High"`,\n    },\n\n    low: {\n      type: "number",\n      sql: `${CUBE}."Low"`,\n    },\n  },\n})\n')),(0,r.kt)("p",null,"Then, by clicking on the 'Build' tab in Cube, we can see the data:"),(0,r.kt)(s.Z,{alt:"Cube build tab",height:224,src:"/img/blog/2022-04-26/cube-build-tab.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("p",null,"We can also use Cube's built-in measure type, ",(0,r.kt)("inlineCode",{parentName:"p"},"avg"),", to create ",(0,r.kt)("strong",{parentName:"p"},"measures")," to\ncalculate average high or low prices:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'measures: {\n  avgHigh: {\n    type: "avg",\n    sql: `${CUBE}."High"`,\n  },\n  avgLow: {\n    type: "avg",\n    sql: `${CUBE}."Low"`,\n  },\n},\n')),(0,r.kt)("p",null,"Next, we can recreate the classic price-over-time graph:"),(0,r.kt)(s.Z,{alt:"Price over time graph",height:224,src:"/img/blog/2022-04-26/price-over-time-graph.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Additionally with Cube, you can pre-aggregate data to speed up the queries. Cube\nwill create materialized rollups of specified dimensions and measures\ninternally, and use aggregate awareness logic to route the queries. This logic\nwill use the most optimal pre-aggregation available to serve the query instead\nof processing the raw dataset. You can define pre-aggregations within your data\nmodel as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'preAggregations: {\n  main: {\n    measures: [avgHigh, avgLow],\n    timeDimemsion: date,\n    granularity: "day"\n  }\n}\n')),(0,r.kt)("p",null,"You can learn more about Cube\n",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/caching/pre-aggregations/getting-started"},"pre-aggregations in the documentation"),"."),(0,r.kt)("h2",{id:"consuming-time-series-data-via-apis"},"Consuming Time Series Data via APIs"),(0,r.kt)("p",null,"If you've followed along so far, your data is now processed and organized neatly\ninto a data model, aka a cube. So, what's next? Good question. The answer is\nsimply to connect the data to your application."),(0,r.kt)("p",null,"The versatility of Cube\u2014given its 'headlessness'\u2014enables you to seamlessly\nconnect to any data application you need, whether it's a dashboard, notebook, or\nthe backend of your application."),(0,r.kt)("p",null,"By taking an API-first approach, Cube as a headless BI tool brings about endless\nways of using your data downstream of your time series data sources. And, API\nendpoints ensure that the metrics are available and consistent across different\napplications, tools, and teams."),(0,r.kt)("p",null,"Let's take a look at the various ways you can connect to the data model you\nbuilt via its APIs."),(0,r.kt)(s.Z,{alt:"Various ways to connect with Cube",height:224,src:"/img/blog/2022-04-26/cube-various-ways-to-connect.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("p",null,"There are three API endpoints that you can use to access your data model:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"REST API: If you're using Cube as the backend for your application, you can\nconnect to it with the ",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/rest-api"},"REST API"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"GraphQL API: If you're looking to use standard GraphQL queries for embedded\nanalytics or other data apps, you can connect to Cube with the\n",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/backend/graphql"},"GraphQL API"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"SQL API: If you're querying data using standard ANSI SQL format, you can\nconnect to Cube with the ",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/backend/sql"},"SQL API"),". No\nneed to learn additional syntax\u2014just use SQL to interact with your data.\nThis is especially useful if you are working with BI tools, dashboards, or\ndata science models."))),(0,r.kt)(s.Z,{alt:"GraphQL API",height:224,src:"/img/blog/2022-04-26/graphql-api.png",width:700,mdxType:"Screenshot"}),(0,r.kt)("h1",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"With QuestDB's speedy processing of time series data, and Cube's data modeling\ncapabilities for consistent definitions, we can now efficiently power many use\ncases with real-time, reliable data. So, think embedded analytics, business\nintelligence, machine learning\u2014you name it."),(0,r.kt)("p",null,"Curious to see QuestDB's incredibly performant time series database in action?\nCheck out the ",(0,r.kt)("a",{parentName:"p",href:"https://demo.questdb.io"},"QuestDB demo"),". Eager to join the QuestDB\ndiscussion? Join the QuestDB community on\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/questdb/questdb"},"GitHub")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://slack.questdb.io/"},"Slack"),"."),(0,r.kt)("p",null,"Want to see how QuestDB and Cube can power your project together?\n",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/docs/"},"See the docs")," and\n",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/cloud"},"create a free Cube Cloud account today"),". Have questions\nor feedback? ",(0,r.kt)("a",{parentName:"p",href:"https://cube.dev/contact"},"Drop us a line"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://slack.cube.dev/"},"join our Slack"),", or\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cube-js/"},"check us out on GitHub"),"."))}h.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(i&&(i+=" "),i+=a);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function i(){for(var e,t,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(i&&(i+=" "),i+=t);return i}a.d(t,{Z:function(){return i}})}}]);