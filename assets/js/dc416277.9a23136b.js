"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[5293],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},572:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={title:"Health monitoring",description:"How to configure health monitoring for querying the status of a QuestDB instance using an embedded server, Prometheus metrics and Alertmanager."},l={unversionedId:"operations/health-monitoring",id:"operations/health-monitoring",isDocsHomePage:!1,title:"Health monitoring",description:"How to configure health monitoring for querying the status of a QuestDB instance using an embedded server, Prometheus metrics and Alertmanager.",source:"@site/docs/operations/health-monitoring.md",sourceDirName:"operations",slug:"/operations/health-monitoring",permalink:"/docs/operations/health-monitoring",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/operations/health-monitoring.md",version:"current",frontMatter:{title:"Health monitoring",description:"How to configure health monitoring for querying the status of a QuestDB instance using an embedded server, Prometheus metrics and Alertmanager."},sidebar:"docs",previous:{title:"Data retention",permalink:"/docs/operations/data-retention"},next:{title:"Backup and restore",permalink:"/docs/operations/backup"}},c=[{value:"Prometheus metrics endpoint",id:"prometheus-metrics-endpoint",children:[]},{value:"Min health server",id:"min-health-server",children:[]},{value:"Unhandled error detection",id:"unhandled-error-detection",children:[]},{value:"Avoiding CPU starvation",id:"avoiding-cpu-starvation",children:[]}],d={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes the options available for monitoring the health of a\nQuestDB instance. There are options for minimal health checks via a ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," server\nwhich provides a basic 'up/down' check, or detailed metrics in Prometheus format\nexposed via an HTTP endpoint."),(0,o.kt)("h2",{id:"prometheus-metrics-endpoint"},"Prometheus metrics endpoint"),(0,o.kt)("p",null,"Prometheus is an open-source systems monitoring and alerting toolkit. Prometheus\ncollects and stores metrics as time series data, i.e. metrics information is\nstored with the timestamp at which it was recorded, alongside optional key-value\npairs called labels."),(0,o.kt)("p",null,"QuestDB exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"/metrics")," endpoint which provides internal system metrics in\nPrometheus format. To use this functionality and get started with example\nconfiguration, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/third-party-tools/prometheus"},"Prometheus documentation"),"."),(0,o.kt)("h2",{id:"min-health-server"},"Min health server"),(0,o.kt)("p",null,"REST APIs will often be situated behind a load balancer that uses a monitor URL\nfor its configuration. Having a load balancer query the QuestDB REST endpoints\n(on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9000")," by default) will cause internal logs to become excessively\nnoisy. Additionally, configuring per-URL logging would increase server latency."),(0,o.kt)("p",null,"To provide a dedicated health check feature that would have no performance knock\non other system components, we opted to decouple health checks from the REST\nendpoints used for querying and ingesting data. For this purpose, a ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," HTTP\nserver runs embedded in a QuestDB instance and has a separate log and thread\npool configuration."),(0,o.kt)("p",null,"The configuration section for the ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," HTTP server is available in the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/configuration#minimal-http-server"},"minimal HTTP server reference"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"min")," server is enabled by default and will reply to any ",(0,o.kt)("inlineCode",{parentName:"p"},"HTTP GET")," request\nto port ",(0,o.kt)("inlineCode",{parentName:"p"},"9003"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="GET health status of local instance"',title:'"GET',health:!0,status:!0,of:!0,local:!0,'instance"':!0},"curl -v http://127.0.0.1:9003\n")),(0,o.kt)("p",null,"The server will respond with an HTTP status code of ",(0,o.kt)("inlineCode",{parentName:"p"},"200"),", indicating that the\nsystem is operational:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title=\"200 'OK' response\"",title:'"200',"'OK'":!0,'response"':!0},"*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to 127.0.0.1 (127.0.0.1) port 9003 (#0)\n> GET / HTTP/1.1\n> Host: 127.0.0.1:9003\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Server: questDB/1.0\n< Date: Tue, 26 Jan 2021 12:31:03 GMT\n< Transfer-Encoding: chunked\n< Content-Type: text/plain\n<\n* Connection #0 to host 127.0.0.1 left intact\n")),(0,o.kt)("p",null,"Path segments are ignored which means that optional paths may be used in the URL\nand the server will respond with identical results, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="GET health status with arbitrary path"',title:'"GET',health:!0,status:!0,with:!0,arbitrary:!0,'path"':!0},"curl -v http://127.0.0.1:9003/status\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"/metrics")," path segment is reserved for metrics exposed in Prometheus\nformat. For more details, see the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/third-party-tools/prometheus"},"Prometheus documentation"),"."))),(0,o.kt)("h2",{id:"unhandled-error-detection"},"Unhandled error detection"),(0,o.kt)("p",null,"When metrics subsystem is\n",(0,o.kt)("a",{parentName:"p",href:"/docs/third-party-tools/prometheus#scraping-prometheus-metrics-from-questdb"},"enabled"),"\non the database, the health endpoint checks the occurrences of unhandled,\ncritical errors since the database start and, if any of them were detected, it\nreturns HTTP 500 status code. The check is based on the\n",(0,o.kt)("inlineCode",{parentName:"p"},"questdb_unhandled_errors_total")," metric."),(0,o.kt)("p",null,"When metrics subsystem is disabled, the health check endpoint always returns\nHTTP 200 status code."),(0,o.kt)("h2",{id:"avoiding-cpu-starvation"},"Avoiding CPU starvation"),(0,o.kt)("p",null,"On systems with\n",(0,o.kt)("a",{parentName:"p",href:"/docs/operations/capacity-planning#cpu-cores"},"8 Cores and less"),",\ncontention for threads might increase the latency of health check service\nresponses. If you are in a situation where a load balancer thinks QuestDB\nservice is dead with nothing apparent in QuestDB logs, you may need to configure\na dedicated thread pool for the health check service. For more reference, see\nthe\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/configuration#minimal-http-server"},"minimal HTTP server configuration"),"."))}p.isMDXComponent=!0}}]);