"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[7012],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4076:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],s={title:"Design for performance",description:"How to plan and configure database to optimize performance."},l={unversionedId:"operations/design-for-performance",id:"operations/design-for-performance",isDocsHomePage:!1,title:"Design for performance",description:"How to plan and configure database to optimize performance.",source:"@site/docs/operations/design-for-performance.md",sourceDirName:"operations",slug:"/operations/design-for-performance",permalink:"/docs/operations/design-for-performance",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/operations/design-for-performance.md",version:"current",frontMatter:{title:"Design for performance",description:"How to plan and configure database to optimize performance."},sidebar:"docs",previous:{title:"Launch QuestDB on DigitalOcean",permalink:"/docs/deployment/digitalocean"},next:{title:"Capacity planning",permalink:"/docs/operations/capacity-planning"}},p=[{value:"Optimizing queries",id:"optimizing-queries",children:[{value:"Row serialization",id:"row-serialization",children:[]}]},{value:"Choosing a schema",id:"choosing-a-schema",children:[{value:"Partitioning",id:"partitioning",children:[]},{value:"Symbols",id:"symbols",children:[]},{value:"Numbers",id:"numbers",children:[]}]}],c={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To optimize the performance of a QuestDB instance, it is important to adjust\nsystem and table configuration according to the nature of the data. This page\nlists out common configurations that users should take into account when testing\ndata using QuestDB."),(0,o.kt)("p",null,"To monitor various metrics of the QuestDB instances, refer to the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/third-party-tools/prometheus/"},"Prometheus monitoring page")," or the\n",(0,o.kt)("a",{parentName:"p",href:"/docs/operations/health-monitoring/"},"Health monitoring page"),"."),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("a",{parentName:"p",href:"/docs/operations/capacity-planning/"},"Capacity planning")," for deployment\nconsiderations."),(0,o.kt)("h2",{id:"optimizing-queries"},"Optimizing queries"),(0,o.kt)("p",null,"The following section describes the underlying aspects to consider when\nformulating queries."),(0,o.kt)("h3",{id:"row-serialization"},"Row serialization"),(0,o.kt)("p",null,"Row serialization and deserialization has a cost on both client and server. The\nQuestDB Web Console limits fetching to 10,000 dataset. When fetching a large\n(10K+) dataset via a single query using other methods, consider using\npagination, hence multiple queries instead."),(0,o.kt)("h2",{id:"choosing-a-schema"},"Choosing a schema"),(0,o.kt)("p",null,"This section provides some hints for choosing the right schema for a dataset\nbased on the storage space that types occupy in QuestDB."),(0,o.kt)("h3",{id:"partitioning"},"Partitioning"),(0,o.kt)("p",null,"When creating tables, a partitioning strategy is recommended in order to be able\nto enforce a data retention policy to save disk space, and for optimizations on\nthe number of concurrent file reads performed by the system. For more\ninformation on this topic, see the following resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/concept/partitions/"},"partitions")," page which provides a general overview\nof this concept"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/operations/data-retention/"},"data retention")," guide provides further\ndetails on partitioning tables with examples on how to drop partitions by time\nrange")),(0,o.kt)("h4",{id:"records-per-partition"},"Records per partition"),(0,o.kt)("p",null,"The number of records per partition should factor into the partitioning strategy\n(",(0,o.kt)("inlineCode",{parentName:"p"},"YEAR"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"MONTH"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"DAY"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"HOUR"),"). Having too many records per partition or\nhaving too few records per partition and having query operations across too many\npartitions has the result of slower query times. A general guideline is that\nroughly between 1 million and 100 million records is optimal per partition."),(0,o.kt)("h3",{id:"symbols"},"Symbols"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/concept/symbol/"},"Symbols")," are a data type that is recommended to be used\nfor strings that are repeated often in a dataset. The benefit of using this data\ntype is lower storage requirements than regular strings and faster performance\non queries as symbols are internally stored as ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," values."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Only symbols can be ",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/indexes/"},"indexed")," in QuestDB. Although\nmultiple indexes can be specified for a table, there would be a performance\nimpact on the rate of ingestion."))),(0,o.kt)("p",null,"The following example shows the creation of a table with a ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," type that\nhas multiple options passed for performance optimization."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE my_table(\n    symb SYMBOL CAPACITY 1048576 NOCACHE INDEX CAPACITY 512,\n    s STRING,\n    ts TIMESTAMP\n) timestamp(ts) PARTITION BY DAY;\n")),(0,o.kt)("p",null,"This example adds a ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," type with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"capacity")," specified to estimate how many unique symbol values to expect"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"caching")," disabled which allows dealing with larger value counts"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"index")," for the symbol column with a storage block value")),(0,o.kt)("p",null,"A full description of the options used above for ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," types can be found in\nthe ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/create-table#symbol"},"CREATE TABLE")," page."),(0,o.kt)("h4",{id:"symbol-caching"},"Symbol caching"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/concept/symbol#usage-of-symbols"},"Symbol cache")," enables the use of on-heap\ncache for reads and can enhance performance. However, the cache size grows as\nthe number of distinct value increases, and the size of the cached symbol may\nhinder query performance."),(0,o.kt)("p",null,"We recommend that users check the JVM and GC metrics via\n",(0,o.kt)("a",{parentName:"p",href:"/docs/third-party-tools/prometheus/"},"Prometheus monitoring")," before taking one\nof the following steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Disabling the symbol cache. See\n",(0,o.kt)("a",{parentName:"li",href:"/docs/concept/symbol#usage-of-symbols"},"Usage of ",(0,o.kt)("inlineCode",{parentName:"a"},"symbols"))," for server-wide\nand table-wide configuration options."),(0,o.kt)("li",{parentName:"ul"},"Increasing the JVM heap size using the ",(0,o.kt)("inlineCode",{parentName:"li"},"-Xmx")," argument.")),(0,o.kt)("h4",{id:"symbol-capacity"},"Symbol capacity"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/concept/symbol#usage-of-symbols"},"Symbol capacity")," should be the same or\nslightly larger than the count of distinct symbol values."),(0,o.kt)("p",null,"Undersized symbol columns slow down query performance. Similarly, there is a\nperformance impact when symbol is not used for its designed way, most commonly\nassigning ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," to columns with a unique value per row. It is crucial to\nchoose a suitable ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/datatypes/"},"data type")," based on the\nnature of the dataset."),(0,o.kt)("h4",{id:"index"},"Index"),(0,o.kt)("p",null,"Appropriate us of ",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/indexes/"},"indexes")," provides faster read access\nto a table. However, indexes have a noticeable cost in terms of disk space and\ningestion rate - we recommend starting with no indexes and adding them later,\nonly if they appear to improve query performance. Refer to\n",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/indexes#trade-offs"},"Index trade-offs")," for more information."),(0,o.kt)("h3",{id:"numbers"},"Numbers"),(0,o.kt)("p",null,"The storage space that numbers occupy can be optimized by choosing ",(0,o.kt)("inlineCode",{parentName:"p"},"byte"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"short"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," data types appropriately. When values are not expected to\nexceed the limit for that particular type, savings on disk space can be made.\nSee also ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/datatypes/"},"Data types")," for more details."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"storage per value"),(0,o.kt)("th",{parentName:"tr",align:"left"},"numeric range"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"byte"),(0,o.kt)("td",{parentName:"tr",align:"left"},"8 bits"),(0,o.kt)("td",{parentName:"tr",align:"left"},"-128 to 127")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"short"),(0,o.kt)("td",{parentName:"tr",align:"left"},"16 bits"),(0,o.kt)("td",{parentName:"tr",align:"left"},"-32768 to 32767")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"int"),(0,o.kt)("td",{parentName:"tr",align:"left"},"32 bits"),(0,o.kt)("td",{parentName:"tr",align:"left"},"-2147483648 to 2147483647")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"float"),(0,o.kt)("td",{parentName:"tr",align:"left"},"32 bits"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Single precision IEEE 754 floating point")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"double"),(0,o.kt)("td",{parentName:"tr",align:"left"},"64 bits"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Double precision IEEE 754 floating point")))))}m.isMDXComponent=!0}}]);