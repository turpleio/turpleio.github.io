"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[4733],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,f=c["".concat(d,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(f,o(o({ref:t},l),{},{components:n})):a.createElement(f,o({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},52385:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var a=n(83117),i=n(80102),r=(n(67294),n(3905)),o=["components"],s={title:"CSV import via REST API",sidebar_label:"Small CSV import (REST API)",description:"This document describes how to load CSV data and specify text loader configuration for timestamp and date parsing"},d={unversionedId:"guides/importing-data-rest",id:"guides/importing-data-rest",isDocsHomePage:!1,title:"CSV import via REST API",description:"This document describes how to load CSV data and specify text loader configuration for timestamp and date parsing",source:"@site/docs/guides/importing-data-rest.md",sourceDirName:"guides",slug:"/guides/importing-data-rest",permalink:"/docs/guides/importing-data-rest",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/guides/importing-data-rest.md",version:"current",sidebar_label:"Small CSV import (REST API)",frontMatter:{title:"CSV import via REST API",sidebar_label:"Small CSV import (REST API)",description:"This document describes how to load CSV data and specify text loader configuration for timestamp and date parsing"},sidebar:"docs",previous:{title:"CSV import via COPY SQL",permalink:"/docs/guides/importing-data"},next:{title:"Modify data",permalink:"/docs/guides/modifying-data"}},p=[{value:"Importing compressed files",id:"importing-compressed-files",children:[]},{value:"Specifying a schema during CSV import",id:"specifying-a-schema-during-csv-import",children:[]},{value:"Text loader configuration",id:"text-loader-configuration",children:[]}],l={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The REST API provides an ",(0,r.kt)("inlineCode",{parentName:"p"},"/imp")," endpoint exposed on port ",(0,r.kt)("inlineCode",{parentName:"p"},"9000")," by default. This\nendpoint allows streaming tabular text data directly into a table, supporting\nCSV, TAB and pipe (",(0,r.kt)("inlineCode",{parentName:"p"},"|"),") delimited inputs with optional headers. Data types and\nstructures are detected automatically, but additional configurations can be\nprovided to improve automatic detection."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The REST API is better suited when the following conditions are true:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Regular uploads of small batches of data into the same table."),(0,r.kt)("li",{parentName:"ul"},"The file batches do not contain overlapping periods (they contain distinct\ndays/weeks/months). Otherwise, the import performance will be impacted.")),(0,r.kt)("p",{parentName:"div"},"For database migrations, or uploading one large CSV file into QuestDB, users may\nconsider using the ",(0,r.kt)("inlineCode",{parentName:"p"},"COPY")," SQL command. See\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/sql/copy/"},"COPY command documentation")," and\n",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/importing-data"},"Guide on CSV import")," for more details."))),(0,r.kt)("h3",{id:"importing-compressed-files"},"Importing compressed files"),(0,r.kt)("p",null,"It is possible to upload compressed files directly without decompression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gzip -cd compressed_data.tsv.gz | curl -v -F data=@- 'http://localhost:9000/imp'\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"data=@-")," value instructs ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," to read the file contents from ",(0,r.kt)("inlineCode",{parentName:"p"},"stdin"),"."),(0,r.kt)("h3",{id:"specifying-a-schema-during-csv-import"},"Specifying a schema during CSV import"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," JSON object can be provided with POST requests to ",(0,r.kt)("inlineCode",{parentName:"p"},"/imp")," while\ncreating tables via CSV import. This allows for more control over user-defined\npatterns for timestamps, or for explicitly setting types during column-creation.\nThe following example demonstrates basic usage, in this case, that the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ticker_name")," column should be parsed as ",(0,r.kt)("inlineCode",{parentName:"p"},"SYMBOL")," type instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  -F schema=\'[{"name":"ticker_name", "type": "SYMBOL"}]\' \\\n  -F data=@trades.csv \'http://localhost:9000/imp\'\n')),(0,r.kt)("p",null,"If a timestamp column (",(0,r.kt)("inlineCode",{parentName:"p"},"ts"),") in this CSV file has a custom or non-standard\ntimestamp format, this may be included with the call as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  -F schema=\'[ \\\n    {"name":"ts", "type": "TIMESTAMP", "pattern": "yyyy-MM-dd - HH:mm:ss"}, \\\n    {"name":"ticker_name", "type": "SYMBOL"} \\\n  ]\' \\\n  -F data=@trades.csv \'http://localhost:9000/imp\'\n')),(0,r.kt)("p",null,"For ",(0,r.kt)("strong",{parentName:"p"},"nanosecond-precision")," timestamps such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"2021-06-22T12:08:41.077338934Z"),", a pattern can be provided in the following\nway:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  -F schema=\'[ \\\n    {"name":"ts", "type": "TIMESTAMP", "pattern": "yyyy-MM-ddTHH:mm:ss.SSSUUUNNNZ"} \\\n  ]\' \\\n  -F data=@my_file.csv \\\n  http://localhost:9000/imp\n')),(0,r.kt)("p",null,"More information on the patterns for timestamps can be found on the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/function/date-time#date-and-timestamp-format"},"date and time functions"),"\npage."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"schema")," object must precede the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object in calls to this REST\nendpoint. For example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# correct order\ncurl -F schema='{my_schema_obj}' -F data=@my_file.csv http://localhost:9000/imp\n# incorrect order\ncurl -F data=@my_file.csv -F schema='{my_schema_obj}' http://localhost:9000/imp\n")))),(0,r.kt)("h3",{id:"text-loader-configuration"},"Text loader configuration"),(0,r.kt)("p",null,"QuestDB uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"text_loader.json")," configuration file which can be placed in the\nserver's ",(0,r.kt)("inlineCode",{parentName:"p"},"conf")," directory. This file does not exist by default, but has the\nfollowing implicit settings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="conf/text_loader.json"',title:'"conf/text_loader.json"'},'{\n  "date": [\n    {\n      "format": "dd/MM/y"\n    },\n    {\n      "format": "yyyy-MM-dd HH:mm:ss"\n    },\n    {\n      "format": "yyyy-MM-ddTHH:mm:ss.SSSz",\n      "locale": "en-US",\n      "utf8": false\n    },\n    {\n      "format": "MM/dd/y"\n    }\n  ],\n  "timestamp": [\n    {\n      "format": "yyyy-MM-ddTHH:mm:ss.SSSUUUz",\n      "utf8": false\n    }\n  ]\n}\n')),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,"Given a CSV file which contains timestamps in the format\n",(0,r.kt)("inlineCode",{parentName:"p"},"yyyy-MM-dd - HH:mm:ss.SSSUUU"),", the following text loader configuration will\nprovide the correct timestamp parsing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="conf/text_loader.json"',title:'"conf/text_loader.json"'},'{\n  "date": [\n    {\n      "format": "dd/MM/y"\n    },\n    {\n      "format": "yyyy-MM-dd HH:mm:ss"\n    },\n    {\n      "format": "yyyy-MM-ddTHH:mm:ss.SSSz",\n      "locale": "en-US",\n      "utf8": false\n    },\n    {\n      "format": "MM/dd/y"\n    }\n  ],\n  "timestamp": [\n    {\n      "format": "yyyy-MM-ddTHH:mm:ss.SSSUUUz",\n      "utf8": false\n    },\n    {\n      "format": "yyyy-MM-dd - HH:mm:ss.SSSUUU",\n      "utf8": false\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"The CSV data can then be loaded via POST request, for example, using cURL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-curl"},"curl -F data=@weather.csv 'http://localhost:9000/imp'\n")),(0,r.kt)("p",null,"For more information on the ",(0,r.kt)("inlineCode",{parentName:"p"},"/imp")," entry point, refer to the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/api/rest#imp---import-data"},"REST API documentation"),"."))}m.isMDXComponent=!0}}]);