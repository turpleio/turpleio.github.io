"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[3690],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},22476:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(83117),o=n(80102),r=(n(67294),n(3905)),i=n(46092),l=n(72525),s=["components"],p={title:"Exploring Crypto Prices with QuestDB and Pandas",author:"Yitaek Hwang",author_title:"Guest",author_url:"https://github.com/Yitaek",author_image_url:"https://avatars.githubusercontent.com/Yitaek",description:"Visualizing historical prices of cryptocurrencies by ingesting data into QuestDB and analyzing trends with pandas, matplotlib, and seaborn. records on the fly.",keywords:["timeseries","crypto","pandas","matplotlib","seaborn","marketdata"],tags:["tutorial","crypto","python","pandas","market data","matplotlib"],image:"/img/blog/shared/og-pandas.png"},c={permalink:"/blog/2022/03/08/questdb-crypto-pandas",source:"@site/blog/2022-03-08-questdb-crypto-pandas.md",title:"Exploring Crypto Prices with QuestDB and Pandas",description:"Visualizing historical prices of cryptocurrencies by ingesting data into QuestDB and analyzing trends with pandas, matplotlib, and seaborn. records on the fly.",date:"2022-03-08T00:00:00.000Z",formattedDate:"March 8, 2022",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"crypto",permalink:"/blog/tags/crypto"},{label:"python",permalink:"/blog/tags/python"},{label:"pandas",permalink:"/blog/tags/pandas"},{label:"market data",permalink:"/blog/tags/market-data"},{label:"matplotlib",permalink:"/blog/tags/matplotlib"}],readingTime:5.965,truncated:!1,prevItem:{title:"How to generate time-series data in QuestDB",permalink:"/blog/2022/03/14/mock-sql-timeseries-data-questdb"},nextItem:{title:"Calling on our community members to help us support Ukraine",permalink:"/blog/2022/03/07/calling-on-our-community-members"}},u=[],m={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{alt:"A photograph of a laptop displaying candle charts of stock market data",height:500,src:"/img/blog/2022-03-08/banner.jpeg",width:692,mdxType:"Banner"},"Photo by ",(0,r.kt)("a",{href:"https://unsplash.com/@peiobty"},"Pierre Borthiry")," via"," ",(0,r.kt)("a",{href:"https://unsplash.com"},"Unsplash")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"This submission comes from one of our community contributors\n",(0,r.kt)("a",{parentName:"em",href:"https://yitaek.medium.com/"},"Yitaek Hwang")),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"/blog/2022/02/10/questdb-google-data-studio"},"Part I of this series"),", we\nused Google Data Studio to quickly import multiple data sources and compare the\nprice action of various cryptocurrencies over time. Even though Google Data\nStudio provides an easy user-interface and some nice graphing features, it was\nlimited in what it could do in terms of analyzing the dataset. In this post, we\nwill use the popular Python libraries (pandas, matplotlib, and seaborn) to\nexplore the dataset further."),(0,r.kt)("h1",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.kaggle.com/sudalairajkumar/cryptocurrencypricehistory"},"Crypto dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jupyter.org/"},"Jupyter Notebook")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://questdb.io/"},"QuestDB"))),(0,r.kt)("h1",{id:"importing-data"},"Importing Data"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"NOTE: If you still have QuestDB running from Part I on Google Cloud, you can\nskip to the next step.")),(0,r.kt)("p",null,"For simplicity, we will run QuestDB locally via Docker and import the datasets\nvia the console UI. Download and run the latest version of QuestDB:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ docker run -p 9000:9000 \\\n   -p 9009:9009 \\\n   -p 8812:8812 \\\n   -p 9003:9003 \\\n   questdb/questdb\n")),(0,r.kt)("p",null,"Navigate to localhost:9000, click on the \u201cUpload\u201d icon on the left-hand panel\nand import the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.kaggle.com/sudalairajkumar/cryptocurrencypricehistory"},"csv files of interest"),".\nThis example will use the Solana dataset, but any of the coins from the dataset\nwill also work."),(0,r.kt)(l.Z,{alt:"Import CSV section of QuestDB Web Console",height:281,src:"/img/blog/2022-03-08/import.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("h1",{id:"setting-up-jupyter-notebook"},"Setting up Jupyter Notebook"),(0,r.kt)("p",null,"Install Jupyter Notebook via ",(0,r.kt)("a",{parentName:"p",href:"https://jupyter.org/install"},"pip")," or with your\nfavorite Python environment management tool such as\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.conda.io/"},"conda"),", ",(0,r.kt)("a",{parentName:"p",href:"https://mamba.readthedocs.io/"},"mamba"),", and\n",(0,r.kt)("a",{parentName:"p",href:"https://pipenv.pypa.io/"},"pipenv"),". Alternatively, you can also download\n",(0,r.kt)("a",{parentName:"p",href:"https://www.anaconda.com/products/individual"},"Anaconda Navigator")," for your OS."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ pip install notebook\n")),(0,r.kt)("p",null,"Now install the packages we will use to explore the dataset:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ pip install numpy pandas matplotlib seaborn psycogp2\n")),(0,r.kt)("p",null,"If you used Anaconda Navigator, go under Environments > Search Packages to\ninstall:"),(0,r.kt)(l.Z,{alt:"A screenshot of Anaconda Navigator",height:446,src:"/img/blog/2022-03-08/anaconda_navigator.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Now we\u2019re ready to launch the notebook and start exploring the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ jupyter notebook\n")),(0,r.kt)("h1",{id:"connecting-to-questdb"},"Connecting to QuestDB"),(0,r.kt)("p",null,"First, we need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"psycopg2")," library to connect to QuestDB and import\nthe data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\nimport numpy as np\nimport psycopg2 as pg\n\nengine = pg.connect(\"dbname='qdb' user='admin' host='127.0.0.1' port='8812' password='quest'\")\ndf = pd.read_sql('select * from coin_Solana.csv', con=engine)\n")),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"NOTE: if you are re-using QuestDB from Part I, change the host to the IP\naddress of the load balancer."),")"),(0,r.kt)("p",null,"Now we can run some quick queries to make sure our import was successful. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"head")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tail")," functions are useful in this case for a quick sanity check:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.head()\n\ndf.tails()\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing head and tail functions in Jupyter Notebook",height:305,src:"/img/blog/2022-03-08/head_and_tail.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Alternatively, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"info")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"describe")," commands to get a sense of\nthe data types and distribution:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.info()\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing an info function in Jupyter Notebook",height:231,src:"/img/blog/2022-03-08/info.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.describe()\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing head a describe function in Jupyter Notebook",height:206,src:"/img/blog/2022-03-08/describe.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"For good measure, we can also check for ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"na")," values to make sure we\u2019re\nworking with a clean dataset."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.isnull().any()\n\ndf.isna().any()\n")),(0,r.kt)("p",null,"These queries should return with ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," for all the columns. If you have\nmissing values in your dataset, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"dropna")," function to remove that\nrow or column."),(0,r.kt)("h1",{id:"exploring-the-data"},"Exploring the Data"),(0,r.kt)("p",null,"Now that we have our dataset in Jupyter, we can run answer some simple\nquestions. For example, we can find the five lowest price of Solana by running\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"nsmallest")," function on the column we\u2019re interested in (e.g. High, Low,\nOpen, Close). Similarly, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"nlargest")," function for the opposite:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.nsmallest(5, 'High')\n# df.nlargest(10, 'Low')\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing nlargest function in Jupyter Notebook",height:165,src:"/img/blog/2022-03-08/nlargest.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"We can also find days when the open price was lower than the closing price by\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df.query('Open < Close').head()\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing query function in Jupyter Notebook",height:151,src:"/img/blog/2022-03-08/query.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"To get a better sense of the trends, we can resample the dataset. For example,\nwe can get the mean prices by week by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"resample")," function on the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'df_weekly = df.resample("W", on="Date").mean()\n\ndf_weekly.head()\n')),(0,r.kt)(l.Z,{alt:"A screenshot showing resample function on date in Jupyter Notebook",height:196,src:"/img/blog/2022-03-08/resample_on_date.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Now our data is aggregated by weeks. Similarly, we can get a rolling average\nover a set window via the ",(0,r.kt)("inlineCode",{parentName:"p"},"rolling")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"df_rolling_mean = df.rolling(?).mean()\n\ndf_rolling_mean.tail()\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing rolling function in Jupyter Notebook",height:177,src:"/img/blog/2022-03-08/rolling.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("h1",{id:"visualizing-the-data"},"Visualizing the Data"),(0,r.kt)("p",null,"To visualize our crypto dataset, we\u2019ll use the\n",(0,r.kt)("a",{parentName:"p",href:"https://seaborn.pydata.org/"},"seaborn")," library built on top of\n",(0,r.kt)("a",{parentName:"p",href:"https://matplotlib.org/"},"matplotlib"),". First import both libraries, and let\u2019s\nplot a simple graph of Solana\u2019s opening price over time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nimport seaborn as sns\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"sns.set(rc={'figure.figsize':(11, 4)})\n\ndf = df.set_index('Date')\ndf['Open'].plot(linewidth=0.5);\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing price over time plot",height:281,src:"/img/blog/2022-03-08/price_over_time.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"Note that seaborn chose some sane defaults for the x-axis. We can also specify\nour own labels as well as legends like the plot below comparing the High, Low,\nand Opening prices of Solana over time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"cols_plot = ['High', 'Low', 'Open']\naxes = df[cols_plot].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 9), subplots=True)\nfor ax in axes:\n    ax.set_ylabel('Price ($)')\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing high, low and open price plots",height:423,src:"/img/blog/2022-03-08/high_low_open.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"From a quick glance, it is hard to tell the trends of any of these price\nactions. Let\u2019s dive into a time period when the Solana price starts to become\nmore volatile (i.e. after Jan 2021). We can specify a subset of the dataset\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"loc")," function and apply it to our full dataset, weekly mean resample,\nand seven day rolling mean."),(0,r.kt)("p",null,"After giving each of the dataset a different marker, we can plot all of them on\nthe same graph to see when the opening price was above or below the weekly or\nmoving window average:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"fig, ax = plt.subplots()\nax.plot(df.loc['2021-01-01 23:59:59': 'Open'], marker='.', linestyle='-', linewidth=0.5, label='Daily')\nax.plot(df_weekly.loc['2021-01-01': 'Open'], marker='o', markersize=8, linestyle='-', label='Weekly Mean Resample')\nax.plot(df_rolling_mean.loc['2021-01-01 23:59:59': 'Open'], marker='.', linestyle='-', label='7-d Rolling Mean')\nax.set_ylabel('Price ($)')\nax.legend();\n")),(0,r.kt)(l.Z,{alt:"A screenshot showing moving window average plot",height:259,src:"/img/blog/2022-03-08/moving_window_average.png",width:692,mdxType:"Screenshot"}),(0,r.kt)("p",null,"We can zoom in further in the May to July timeframe to capture the volatility.\nAlternatively, we can also apply the popular 200-day moving average metric to\nanalyze price trends. Finally, we can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ewm")," function in pandas to\ncalculate an exponentially weighed moving average to gather different momentum\nindicators. While past performance is not indicative of future performance,\nthese momentum indicators can be used to backtest and formulate new trading or\nprice analysis strategies."),(0,r.kt)("h1",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"With QuestDB and pandas, it\u2019s easy to visualize and calculate various price and\nmomentum indicators. By polling data from\n",(0,r.kt)("a",{parentName:"p",href:"https://www.coingecko.com/"},"CoinGecko")," or\n",(0,r.kt)("a",{parentName:"p",href:"https://coinmarketcap.com/"},"CoinMarketCap"),", anyone can start analyzing crypto\ntrends. If you are interested in more crypto analysis, make sure to check out:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/swlh/realtime-crypto-tracker-with-kafka-and-questdb-b33b19048fc2"},"Realtime Crypto Tracker with Kafka and QuestDB")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/geekculture/streaming-ethereum-on-chain-data-to-questdb-ea6b51d990ab"},"Streaming Ethereum On-Chain Data to QuestDB"))))}d.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);