"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[8340],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(a),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},62767:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var n=a(83117),r=a(80102),o=(a(67294),a(3905)),i=a(46092),s=["components"],l={title:"QuestDB 6.4 Release Highlights",author:"Jaromir Hamala",author_title:"QuestDB Engineering",author_url:"https://github.com/jerrinot",author_image_url:"https://avatars.githubusercontent.com/jerrinot",description:"QuestDB 6.4 Release Highlights",keywords:["questdb","release","performance","database","sql"],tags:["release","team","product"],image:"/img/blog/2022-05-31/cover.png"},u={permalink:"/blog/2022/05/31/questdb-release-6-4",source:"@site/blog/2022-05-31-questdb-release-6-4.mdx",title:"QuestDB 6.4 Release Highlights",description:"QuestDB 6.4 Release Highlights",date:"2022-05-31T00:00:00.000Z",formattedDate:"May 31, 2022",tags:[{label:"release",permalink:"/blog/tags/release"},{label:"team",permalink:"/blog/tags/team"},{label:"product",permalink:"/blog/tags/product"}],readingTime:5.38,truncated:!0,prevItem:{title:"Building a Data Pipeline using QuestDB and Confluent Kafka",permalink:"/blog/2022/06/07/data-pipeline-with-kafka-and-questdb"},nextItem:{title:"4Bn rows/sec query benchmark: Clickhouse vs QuestDB vs Timescale",permalink:"/blog/2022/05/26/query-benchmark-questdb-versus-clickhouse-timescale"}},c=[{value:"Why does UPDATE matter?",id:"why-does-update-matter",children:[]},{value:"Does it mean QuestDB can be used for OLTP use-cases?",id:"does-it-mean-questdb-can-be-used-for-oltp-use-cases",children:[]},{value:"Extra noteworthy feature: Write amplification metrics",id:"extra-noteworthy-feature-write-amplification-metrics",children:[]},{value:"What\u2019s next?",id:"whats-next",children:[]},{value:"Words of appreciation",id:"words-of-appreciation",children:[]}],d={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Z,{alt:"QuestDB 6.4 Release Highlights",height:800,src:"/img/blog/2022-05-31/cover.png",width:900,mdxType:"Banner"}),(0,o.kt)("p",null,"We just released ",(0,o.kt)("strong",{parentName:"p"},"QuestDB 6.4"),". A new release is always exciting! However,\nQuestDB 6.4 is a special release. Why? It is introducing one of the most awaited\nfeatures: SQL UPDATE! You read it right, QuestDB now allows updating already\nwritten data."),(0,o.kt)("h2",{id:"why-does-update-matter"},"Why does UPDATE matter?"),(0,o.kt)("p",null,"One could argue: Time-series data should be immutable. After all, these are\nrecords of historical facts, and history is immutable. While I can agree with\nthis sentiment, there are valid use-cases for updating time-series data. Imagine\nan IoT application that records sensor data in QuestDB and uses it for various\nanalytics. It sounds like a typical append-only-never-mutate use case."),(0,o.kt)("p",null,"What happens when a sensor breaks down and feeds bad data into QuestDB? It may\nbadly skew the resulting analytics! How do you correct bad data? Even without\nUPDATE you have some options. For example, you could maintain another table with\nrecords of broken sensors and use it to exclude data from analytics. While this\nsounds nice in theory - and there is a certain elegance in how it fits into the\nappend-only world - it complicates our data model. It forces us to consult\n(join) the other table whenever querying sensor data. It results in more\ncomplicated queries and the join also negatively impacts performance. There are\nother options to solve this without UPDATE, but they all feel like a workaround."),(0,o.kt)("p",null,"How do you solve the broken-sensor problem with updates? You have 2 options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Repairing bad data"),(0,o.kt)("li",{parentName:"ul"},"Excluding bad data")),(0,o.kt)("p",null,"The first option is best when you know what the right values should be. Imagine\nour hypothetical sensor measures temperature and someone has accidentally\nswitched it to generate data in Fahrenheit while it should have been in Celsius.\nFixing such data is trivial. The SQL could look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"UPDATE sensor_data\nSET temperature = (temperature - 32) * 5.0 / 9\nWHERE (measurement_timestamp between X and Y) and (sensor_id = Z)\n")),(0,o.kt)("p",null,"Data exclusion is applicable in cases where you have no means of correcting the\ndata and you want to simply exclude them from analytics. Imagine a temperature\nsensor which starts to generate completely random values. There is no way to\nrepair such data and the best you can do is to exclude the bad data from all\nanalytics. This could be done e.g. by having a column \u201cisValid\u201d which would be\ntrue by default and when you detect a broken sensor then you run a query like\nthis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"UPDATE temperature_table\nSET isValid = false\nWHERE (measurement_timestamp between X and Y) and (sensor_id = Z)\n")),(0,o.kt)("p",null,"This allows analytical queries to exclude such data, without introducing\nadditional complexity due to extra joins."),(0,o.kt)("h2",{id:"does-it-mean-questdb-can-be-used-for-oltp-use-cases"},"Does it mean QuestDB can be used for OLTP use-cases?"),(0,o.kt)("p",null,"As I\u2019ve shown above the UPDATE greatly simplifies some use-cases. The internal\ndesign was driven by this principle: ",(0,o.kt)("strong",{parentName:"p"},"Updates cannot slow down other paths."),"\nQuestDB is known for awesome ingestion and query performance and we cannot\ncompromise on that for the sake of UPDATEs. We are also assuming UPDATEs in time\nseries are rare. Hence we decided that whoever is executing the update should\npay the performance price. All this means UPDATEs are relatively costly and this\nfeature won\u2019t magically turn QuestDB into an\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Online_transaction_processing"},"OLTP")," database. We\ndon\u2019t want to become yet another Postgres or MySQL. Our mission is to build the\nbest time-series database for real-time analytics and the design of this feature\nreflects it. If you are interested in more in-depth design then check out our\n",(0,o.kt)("a",{parentName:"p",href:"https://questdb.io/docs/guides/modifying-data"},"documentation"),"."),(0,o.kt)("h2",{id:"extra-noteworthy-feature-write-amplification-metrics"},"Extra noteworthy feature: Write amplification metrics"),(0,o.kt)("p",null,"Out of order inserts can cause write amplification. When you insert a row with a\ntimestamp earlier than what was already committed, QuestDB merges existing data\nwith the new row. In the worst case, a single row insertion will copy the entire\ntable partition. QuestDB has\n",(0,o.kt)("a",{parentName:"p",href:"https://questdb.io/docs/guides/out-of-order-commit-lag/"},"various parameters")," to\ntune this behaviour; Commit Lag is the most important parameter. To do any\nmeaningful tuning you need to understand your data. At the very least you need\nto know how frequently Out of order events occur and how much data was written\nas a result of the merge process. QuestDB 6.4 is adding Out of order related\nmetrics to the already\n",(0,o.kt)("a",{parentName:"p",href:"https://questdb.io/docs/third-party-tools/prometheus"},"existing metrics")," you can\nconsume via Prometheus."),(0,o.kt)("h2",{id:"whats-next"},"What\u2019s next?"),(0,o.kt)("p",null,"There are 2 major items ahead of us: Data replication and QuestDB Cloud.\nReplication is part of our story to accommodate more data, execute queries\nfaster and provide fault tolerance. QuestDB is already used for\n",(0,o.kt)("a",{parentName:"p",href:"https://questdb.io/customers"},"critical applications"),", but as of QuestDB 6.4, it\noffers little support for fault tolerance. Our users design their own solutions.\nFor example, some of them rely on container orchestration, but we know we can do\nbetter. We would like to simplify this process and offer fault tolerance as a\nfirst-class feature. Data replication is a prerequisite for that. Data\nreplication will also serve as a foundation for horizontal scaling which will\nallow us to escape the capacity limitation of a single box."),(0,o.kt)("p",null,"Data replication will simplify the operational aspect of QuestDB. It will allow\neveryone to run a highly available QuestDB both in Cloud and on-prem. However,\nwe would like to do more. What if you like QuestDB capabilities, but you don\u2019t\nwant to run it? If you are like that then you will love to hear we are building\na managed version of QuestDB. It\u2019ll allow you to consume QuestDB as a service\nand we will cover the operational aspect of it. The service is currently being\nrolled out. ",(0,o.kt)("a",{parentName:"p",href:"https://questdb.io/cloud"},"Give us a shout")," if it sounds interesting\nto you."),(0,o.kt)("h2",{id:"words-of-appreciation"},"Words of appreciation"),(0,o.kt)("p",null,"QuestDB is an open-source project. For us, it means more than just the Apache\nLicense. We see it as a way to connect with our community. It gives all QuestDB\nusers a chance to dig into source code and improve it. We love all contributors,\nbut in this blog I\u2019d like to cherry-pick 2 people who made their first\ncontributors:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"MatthewLENG2002\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/questdb/questdb/pull/2145"},"made our REST API more robust and predictable"),"."),(0,o.kt)("li",{parentName:"ul"},"Ngnic added a GitHub action to\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/questdb/questdb/pull/2150"},"check Pull Requests have the right format"),".")),(0,o.kt)("p",null,"Thank you."),(0,o.kt)("p",null,"If you would like to start contributing to QuestDB then join\n",(0,o.kt)("a",{parentName:"p",href:"https://slack.questdb.io/"},"QuestDB Slack"),", Say Hi and I\u2019m sure we can find a\nway for you to improve QuestDB. Did I mention we \u2764\ufe0f getting\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/questdb/questdb"},"GitHub stars?")," ;-)"),(0,o.kt)("p",null,"And last but not least: ",(0,o.kt)("a",{parentName:"p",href:"https://questdb.io/careers"},"We are hiring!")))}p.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);