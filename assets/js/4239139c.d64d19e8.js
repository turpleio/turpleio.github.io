"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[6150],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=s(a),c=l,u=k["".concat(o,".").concat(c)]||k[c]||d[c]||r;return a?n.createElement(u,i(i({ref:t},m),{},{components:a})):n.createElement(u,i({ref:t},m))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},11892:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},metadata:function(){return o},toc:function(){return s},default:function(){return d}});var n=a(83117),l=a(80102),r=(a(67294),a(3905)),i=["components"],p={title:"ILP Columnset Value Types",sidebar_label:"Columnset Value Types",description:"Describes all support value types in ILP columnset."},o={unversionedId:"reference/api/ilp/columnset-types",id:"reference/api/ilp/columnset-types",isDocsHomePage:!1,title:"ILP Columnset Value Types",description:"Describes all support value types in ILP columnset.",source:"@site/docs/reference/api/ilp/columnset-types.md",sourceDirName:"reference/api/ilp",slug:"/reference/api/ilp/columnset-types",permalink:"/docs/reference/api/ilp/columnset-types",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/api/ilp/columnset-types.md",version:"current",sidebar_label:"Columnset Value Types",frontMatter:{title:"ILP Columnset Value Types",sidebar_label:"Columnset Value Types",description:"Describes all support value types in ILP columnset."},sidebar:"docs",previous:{title:"ILP Overview",permalink:"/docs/reference/api/ilp/overview"},next:{title:"ILP TCP Receiver",permalink:"/docs/reference/api/ilp/tcp-receiver"}},s=[{value:"Integer",id:"integer",children:[{value:"Cast table",id:"cast-table",children:[]}]},{value:"Long256",id:"long256",children:[]},{value:"Float",id:"float",children:[{value:"Cast table",id:"cast-table-1",children:[]}]},{value:"Boolean",id:"boolean",children:[{value:"Cast table",id:"cast-table-2",children:[]}]},{value:"String",id:"string",children:[{value:"Cast table",id:"cast-table-3",children:[]},{value:"Cast to CHAR",id:"cast-to-char",children:[]},{value:"Cast to GEOHASH",id:"cast-to-geohash",children:[]}]},{value:"Timestamp",id:"timestamp",children:[]}],m={toc:s};function d(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"integer"},"Integer"),(0,r.kt)("p",null,"64-bit signed integer values, which correspond to QuestDB type ",(0,r.kt)("inlineCode",{parentName:"p"},"long"),". The\nvalues are required to have ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," suffix. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"temps,device=cpu,location=south value=96i 1638202821000000000\\n\n")),(0,r.kt)("p",null,"Sometimes integer values are small and do not warrant 64 bits to store them. To\nreduce storage for such values it is possible to create a table upfront with\nsmaller type, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE temps (device SYMBOL, location SYMBOL, value SHORT);\n")),(0,r.kt)("p",null,"The line above will be accepted and ",(0,r.kt)("inlineCode",{parentName:"p"},"96i")," will be cast to ",(0,r.kt)("inlineCode",{parentName:"p"},"short"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Type casts that cause data loss will cause entire line to be rejected."))),(0,r.kt)("h3",{id:"cast-table"},"Cast table"),(0,r.kt)("p",null,"The following ",(0,r.kt)("inlineCode",{parentName:"p"},"cast")," operations are supported when existing table column type is\nnot ",(0,r.kt)("inlineCode",{parentName:"p"},"long"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"byte")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"short")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"int")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"long")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"float")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"double")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"date")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"timestamp")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"integer")),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"native")),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast")))),(0,r.kt)("h2",{id:"long256"},"Long256"),(0,r.kt)("p",null,"Custom type, which correspond to QuestDB type ",(0,r.kt)("inlineCode",{parentName:"p"},"long256"),". The values are hex\nencoded 256-bit unsigned integer values with ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," suffix. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"temps,device=cpu,location=south value=0x123a4i 1638202821000000000\\n\n")),(0,r.kt)("p",null,"When column does not exist, it will be created with type ",(0,r.kt)("inlineCode",{parentName:"p"},"long256"),". Values\noverflowing 256-bit integer will cause the entire line to be rejected."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"long256")," cannot be cast to anything else."),(0,r.kt)("h2",{id:"float"},"Float"),(0,r.kt)("p",null,"These values correspond to QuestDB type ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),". They actually do not have any\nsuffix, which might lead to a confusion. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"trade,ticker=BTCUSD price=30 1638202821000000000\\n\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"price")," value will be stored as ",(0,r.kt)("inlineCode",{parentName:"p"},"double")," even though it does not look like a\nconventional double value would."),(0,r.kt)("h3",{id:"cast-table-1"},"Cast table"),(0,r.kt)("p",null,"The following ",(0,r.kt)("inlineCode",{parentName:"p"},"cast")," operations are supported when existing table column type is\nnot ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"float")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"double")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"native"))))),(0,r.kt)("h2",{id:"boolean"},"Boolean"),(0,r.kt)("p",null,"These value correspond to QuestDB type ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),". In InfluxDB Line Protocol\n",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," values can be represented in any of the following ways:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Actual value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Single char lowercase"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Single char uppercase"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Full lowercase"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Full camelcase"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Full uppercase"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"t")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"True")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TRUE"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"f")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"F")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"False")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"FALSE"))))),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"sensors,location=south warning=false\\n\n")),(0,r.kt)("h3",{id:"cast-table-2"},"Cast table"),(0,r.kt)("p",null,"The following ",(0,r.kt)("inlineCode",{parentName:"p"},"cast")," operations are supported when existing table column type is\nnot ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"boolean")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"byte")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"short")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"int")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"float")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"long")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"double")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"native")),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast")))),(0,r.kt)("p",null,"When cast to numeric type, boolean ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"0")),(0,r.kt)("h2",{id:"string"},"String"),(0,r.kt)("p",null,"These value correspond to QuestDB type ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". They must be enclosed in\nquotes. The following characters in values must be escaped with a ",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),": ",(0,r.kt)("inlineCode",{parentName:"p"},'"'),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"\\n"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"\\r")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'trade,ticker=BTCUSD description="this is a \\"rare\\" value",user="John" 1638202821000000000\\n\n')),(0,r.kt)("p",null,"The result:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"timestamp"),(0,r.kt)("th",{parentName:"tr",align:"left"},"ticker"),(0,r.kt)("th",{parentName:"tr",align:"left"},"description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"user"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1638202821000000000"),(0,r.kt)("td",{parentName:"tr",align:"left"},"BTCUSD"),(0,r.kt)("td",{parentName:"tr",align:"left"},'this is a "rare" value'),(0,r.kt)("td",{parentName:"tr",align:"left"},"John")))),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"String values must be UTF-8 encoded before sending."))),(0,r.kt)("h3",{id:"cast-table-3"},"Cast table"),(0,r.kt)("p",null,"The following ",(0,r.kt)("inlineCode",{parentName:"p"},"cast")," operations are supported when existing table column type is\nnot ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"char")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"string")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"geohash")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"th"},"symbol")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"native")),(0,r.kt)("td",{parentName:"tr",align:"left"},"cast"),(0,r.kt)("td",{parentName:"tr",align:"left"},"no")))),(0,r.kt)("h3",{id:"cast-to-char"},"Cast to CHAR"),(0,r.kt)("p",null,"String value can be cast to ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," type if its length is less than 2 characters.\nThe following example are valid lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'trade,ticker=BTCUSD status="A" 1638202821000000000\\n\ntrade,ticker=BTCUSD status="" 1638202821000000001\\n\n')),(0,r.kt)("p",null,"The result:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"timestamp"),(0,r.kt)("th",{parentName:"tr",align:"left"},"ticker"),(0,r.kt)("th",{parentName:"tr",align:"left"},"status"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1638202821000000000"),(0,r.kt)("td",{parentName:"tr",align:"left"},"BTCUSD"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1638202821000000001"),(0,r.kt)("td",{parentName:"tr",align:"left"},"BTCUSD"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"null"))))),(0,r.kt)("p",null,"Casting strings with 2 or more characters to ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," will cause entire line to be\nrejected."),(0,r.kt)("h3",{id:"cast-to-geohash"},"Cast to GEOHASH"),(0,r.kt)("p",null,"String value can be cast to ",(0,r.kt)("inlineCode",{parentName:"p"},"geohash")," type when the destination column exists\nand is of a ",(0,r.kt)("inlineCode",{parentName:"p"},"GEOHASH")," type already. Do make sure that column is created upfront.\nOtherwise, ILP will create ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," column regardless of the value."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("p",null,"Upcasting is an attempt to store higher resolution ",(0,r.kt)("inlineCode",{parentName:"p"},"geohash")," in a lower\nresolution column. Let's create table before sending ILP message. Our ",(0,r.kt)("inlineCode",{parentName:"p"},"geohash"),"\ncolumn has resolution of 4 bits."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE tracking (\n    geohash GEOHASH(4b),\n    ts TIMESTAMP\n) TIMESTAMP(ts) PARTITION BY HOUR;\n")),(0,r.kt)("p",null,"Send message including ",(0,r.kt)("inlineCode",{parentName:"p"},"16c")," ",(0,r.kt)("inlineCode",{parentName:"p"},"geohash")," value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'tracking,obj=VLCC\\ STEPHANIE gh="9v1s8hm7wpkssv1h" 1000000000\\n\n')),(0,r.kt)("p",null,"The result. ",(0,r.kt)("inlineCode",{parentName:"p"},"geohash")," value has been truncated to size of the column."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,r.kt)("th",{parentName:"tr",align:"left"},"gh"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1970-01-01T00:00:01.000000Z"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0100")))),(0,r.kt)("p",null,"Sending empty string value will insert ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"geohash")," column of any size:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'tracking,obj=VLCC\\ STEPHANIE gh="" 2000000000\\n\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,r.kt)("th",{parentName:"tr",align:"left"},"gh"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1970-01-01T00:00:01.000000Z"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"null"))))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Downcast of ",(0,r.kt)("inlineCode",{parentName:"h5"},"geohash")," value, which is inserting of lower resolution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"values into higher resolution column, will cause the entire line to be rejected."))),(0,r.kt)("h2",{id:"timestamp"},"Timestamp"),(0,r.kt)("p",null,"These value correspond to QuestDB type ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp"),". Timestamp values are epoch\n",(0,r.kt)("inlineCode",{parentName:"p"},"microseconds")," suffixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"t"),". In this example we're populating\n",(0,r.kt)("em",{parentName:"p"},"non-designated")," timestamp field ",(0,r.kt)("inlineCode",{parentName:"p"},"ts1"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'tracking,obj=VLCC\\ STEPHANIE gh="9v1s8hm7wpkssv1h",ts1=10000t 1000000000\\n\n')),(0,r.kt)("p",null,"It is possible to populate ",(0,r.kt)("em",{parentName:"p"},"designated")," timestamp using ",(0,r.kt)("inlineCode",{parentName:"p"},"columnset"),", although\nthis is not recommended. Let's see how this works in practice. Assuming table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE (loc SYMBOL, ts TIMESTAMP) TIMESTAMP(ts) PARTITION BY DAY;\n")),(0,r.kt)("p",null,"When we send:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Sending mixed desginated timestamp values"',title:'"Sending',mixed:!0,desginated:!0,timestamp:!0,'values"':!0},"tracking,loc=north ts=2000000000t 1000000000\\n\ntracking,loc=south ts=3000000000t\\n\n")),(0,r.kt)("p",null,"The result in ",(0,r.kt)("inlineCode",{parentName:"p"},"columnset")," value always wins:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"loc"),(0,r.kt)("th",{parentName:"tr",align:"left"},"ts"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"north"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2000000000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"south"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3000000000")))))}d.isMDXComponent=!0}}]);