"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[1450],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return b}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),b=a,d=m["".concat(l,".").concat(b)]||m[b]||p[b]||i;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},63122:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var n=r(83117),a=r(80102),i=(r(67294),r(3905)),o=["components"],s={title:"How we achieved write speeds of 1.4 million rows per second",author:"Vlad Ilyushchenko",author_title:"QuestDB Team",author_url:"https://github.com/bluestreak01",author_image_url:"https://avatars.githubusercontent.com/bluestreak01",description:"Our new ingestion framework can sort time series data before writing to disk. Here's how we built it and how it compares to InfluxDB, ClickHouse, and TimescaleDB.",keywords:["clickhouse","influxdb","timescaledb","tsbs","benchmark","timeseries","database"],image:"/img/blog/2021-05-10/banner.png",tags:["engineering","benchmark","hackernews","clickhouse","timescaledb","influxdb","algorithms"]},l={permalink:"/blog/2021/05/10/questdb-release-6-0-tsbs-benchmark",source:"@site/blog/2021-05-10-questdb-release-6-0-tsbs-benchmark.md",title:"How we achieved write speeds of 1.4 million rows per second",description:"Our new ingestion framework can sort time series data before writing to disk. Here's how we built it and how it compares to InfluxDB, ClickHouse, and TimescaleDB.",date:"2021-05-10T00:00:00.000Z",formattedDate:"May 10, 2021",tags:[{label:"engineering",permalink:"/blog/tags/engineering"},{label:"benchmark",permalink:"/blog/tags/benchmark"},{label:"hackernews",permalink:"/blog/tags/hackernews"},{label:"clickhouse",permalink:"/blog/tags/clickhouse"},{label:"timescaledb",permalink:"/blog/tags/timescaledb"},{label:"influxdb",permalink:"/blog/tags/influxdb"},{label:"algorithms",permalink:"/blog/tags/algorithms"}],readingTime:10.93,truncated:!0,prevItem:{title:"How databases handle 10 million devices in high-cardinality benchmarks",permalink:"/blog/2021/06/16/high-cardinality-time-series-data-performance"},nextItem:{title:"QuestDB version 6.0 alpha",permalink:"/blog/2021/04/20/questdb-release-6-0-alpha"}},c=[],u={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The journey to today's version of QuestDB began with the original prototype in\n2013, and we've described what happened since in a post published during\n",(0,i.kt)("a",{parentName:"p",href:"https://news.ycombinator.com/item?id=23975807"},"our HN launch")," last year. In the\nearly stages of the project, we were inspired by vector-based append-only\nsystems like kdb+ because of the advantages of speed and the simple code path\nthis model brings. We also required that row timestamps were stored in ascending\norder, resulting in fast time series queries without an expensive index."))}p.isMDXComponent=!0}}]);