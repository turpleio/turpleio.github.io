"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[9845],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},50385:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var r=n(83117),a=n(80102),o=(n(67294),n(3905)),i=["components"],l={title:"Bitwise operators",sidebar_label:"Bitwise",description:"Bitwise operators reference documentation."},p={unversionedId:"reference/operators/bitwise",id:"reference/operators/bitwise",isDocsHomePage:!1,title:"Bitwise operators",description:"Bitwise operators reference documentation.",source:"@site/docs/reference/operators/bitwise.md",sourceDirName:"reference/operators",slug:"/reference/operators/bitwise",permalink:"/docs/reference/operators/bitwise",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/reference/operators/bitwise.md",version:"current",sidebar_label:"Bitwise",frontMatter:{title:"Bitwise operators",sidebar_label:"Bitwise",description:"Bitwise operators reference documentation."},sidebar:"docs",previous:{title:"Timestamp function",permalink:"/docs/reference/function/timestamp"},next:{title:"Pattern matching operators",permalink:"/docs/reference/operators/pattern-matching"}},s=[{value:"~ NOT",id:"-not",children:[]},{value:"&amp; AND",id:"-and",children:[]},{value:"^ XOR",id:"-xor",children:[]},{value:"| OR",id:"-or",children:[]}],c={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page describes the available operators to assist with performing bitwise\noperations on numeric values."),(0,o.kt)("p",null,"Precedence of these operators is as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"~")," NOT"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"&")," AND"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"^")," XOR"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"|")," OR")),(0,o.kt)("h2",{id:"-not"},"~ NOT"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"~")," is a unary operation that performs logical negation on each bit. Bits that\nare 0 become 1, and those that are 1 become 0. Expects a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," type."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT ~1024\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"column"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"-1025")))),(0,o.kt)("h2",{id:"-and"},"& AND"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"&")," is a binary operation that takes two equal-length binary representations and\nperforms the logical AND operation on each pair of the corresponding bits.\nExpects values of ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," type."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT 5 & 3\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"column"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"1")))),(0,o.kt)("h2",{id:"-xor"},"^ XOR"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"^")," is a binary operation that takes two bit patterns of equal length and\nperforms the logical exclusive OR (XOR) operation on each pair of corresponding bits.\nExpects a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," type."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT 5 ^ 3\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"column"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"6")))),(0,o.kt)("h2",{id:"-or"},"| OR"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"|")," is a binary operation that takes two bit patterns of equal length and\nperforms the logical inclusive OR operation on each pair of corresponding bits.\nExpects a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," type."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT 5 | 3\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"column"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"7")))))}u.isMDXComponent=!0}}]);