"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[8348],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return g}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(a),g=r,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||i;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},62870:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),o=a(72525),l=["components"],s={title:"Using Telegraf and QuestDB to store metrics in a time series database",author:"G\xe1bor Boros",author_title:"Guest",author_url:"https://github.com/gabor-boros",author_image_url:"https://avatars.githubusercontent.com/gabor-boros",description:"How to use the Telegraf agent to collect system metrics from DigitalOcean droplets, store the metrics in QuestDB, and perform basic data visualization and SQL queries using a time series database.",keywords:["timeseries","questdb","telegraf"],tags:["tutorial","telegraf","digitalocean"],image:"/img/blog/2021-07-09/banner.png"},u={permalink:"/blog/2021/07/09/telegraf-and-questdb-for-storing-metrics-in-a-timeseries-database",source:"@site/blog/2021-07-09-telegraf-and-questdb-for-storing-metrics-in-a-timeseries-database.mdx",title:"Using Telegraf and QuestDB to store metrics in a time series database",description:"How to use the Telegraf agent to collect system metrics from DigitalOcean droplets, store the metrics in QuestDB, and perform basic data visualization and SQL queries using a time series database.",date:"2021-07-09T00:00:00.000Z",formattedDate:"July 9, 2021",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"telegraf",permalink:"/blog/tags/telegraf"},{label:"digitalocean",permalink:"/blog/tags/digitalocean"}],readingTime:8.85,truncated:!1,prevItem:{title:"QuestDB 6.0.4 July release, Prometheus metrics support",permalink:"/blog/2021/07/16/release-6-0-4-prometheus-metrics"},nextItem:{title:"Comparing InfluxDB, TimescaleDB, and QuestDB timeseries databases",permalink:"/blog/2021/07/05/comparing-questdb-timescaledb-influxdb"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Multiple telegraf clients and out-of-order data",id:"multiple-telegraf-clients-and-out-of-order-data",children:[]},{value:"Setting up DigitalOcean droplets",id:"setting-up-digitalocean-droplets",children:[{value:"Create a QuestDB Droplet",id:"create-a-questdb-droplet",children:[]},{value:"Create DigitalOcean Droplets with Telegraf agent",id:"create-digitalocean-droplets-with-telegraf-agent",children:[]}]},{value:"Configuring Telegraf agents to send metrics to QuestDB",id:"configuring-telegraf-agents-to-send-metrics-to-questdb",children:[{value:"Installing Telegraf on the QuestDB Droplet",id:"installing-telegraf-on-the-questdb-droplet",children:[]},{value:"Installing Telegraf on demo Droplets",id:"installing-telegraf-on-demo-droplets",children:[]}]},{value:"Run SQL queries on Telegraf metrics",id:"run-sql-queries-on-telegraf-metrics",children:[]},{value:"Summary",id:"summary",children:[]}],c={toc:p};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{alt:"A diagram showing system metrics collected by multiple Telegraf agents sent to QuestDB as a time series database for storage",height:591,src:"/img/blog/2021-07-09/banner.png",width:770,mdxType:"Screenshot"}),(0,i.kt)("p",null,"This tutorial is written by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/gabor-boros"},"G\xe1bor Boros"),", who\nhas put together some great examples of using Telegraf as a means of collecting\nand sending system metrics as time series data to QuestDB for analysis and\nvisualization."),(0,i.kt)("p",null,"Thanks G\xe1bor for the awesome contribution!"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Telegraf is a plugin-driven server agent for collecting, processing,\naggregating, and writing metrics. With\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.influxdata.com/telegraf/v1.19/plugins/"},"more than 200 plugins"),", it\ncan collect almost any kind of data about the server it is running on,\napplication data or even filesystem changes."),(0,i.kt)("p",null,"Although Telegraf can collect an exceptional amount and variety of data, we need\nto store and visualize this information at some point. Considering that we\ncollect the metrics over time, a convenient way to store time series data is\nusing a time series database. We'll use QuestDB for ingestion and perform some\nbasic visualization for this tutorial."),(0,i.kt)("h2",{id:"multiple-telegraf-clients-and-out-of-order-data"},"Multiple telegraf clients and out-of-order data"),(0,i.kt)("p",null,"When you use multiple clients, it can happen that data coming from various\nsources simultaneously can arrive out-of-order by time. QuestDB used to have the\ndownside of dropping this kind of out-of-order data. The QuestDB team solved\nthis as of ",(0,i.kt)("a",{parentName:"p",href:"/blog/2021/04/20/questdb-release-6-0-alpha"},"the 6.0 release"),",\nmeaning there is no need to apply any workarounds like sorting data ourselves\nbefore inserting."),(0,i.kt)("p",null,"This tutorial will set up multiple virtual machines, install Telegraf, QuestDB\nand experiment with how we can visualize the incoming data about server status\n(load, CPU, swap, and memory usage) over time."),(0,i.kt)("p",null,"Celebrating the recent public market debut of DigitalOcean and QuestDB's\nmarketplace offering, we are going to join the celebration. Therefore, we will\nneed the following resources for the tutorial:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A DigitalOcean account (get 100 USD credit for free by signing up using\n",(0,i.kt)("a",{parentName:"li",href:"https://m.do.co/c/50d6b551562b"},"the QuestDB referral link"),")"),(0,i.kt)("li",{parentName:"ul"},"Basic ",(0,i.kt)("inlineCode",{parentName:"li"},"shell")," knowledge"),(0,i.kt)("li",{parentName:"ul"},"Basic knowledge of ",(0,i.kt)("inlineCode",{parentName:"li"},"vim")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"nano"))),(0,i.kt)("p",null,"Enough talking, let's jump right in and create our Droplets!"),(0,i.kt)("h2",{id:"setting-up-digitalocean-droplets"},"Setting up DigitalOcean droplets"),(0,i.kt)("p",null,"In total for this tutorial, we will create three droplets on DigitalOcean.\nAfterwards, we will have the following resources:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1 x QuestDB Droplet for storing and visualizing metrics."),(0,i.kt)("li",{parentName:"ul"},"2 x Droplets running the Telegraf agent collecting system metrics.")),(0,i.kt)("h3",{id:"create-a-questdb-droplet"},"Create a QuestDB Droplet"),(0,i.kt)("p",null,"Let's get started with the database Droplet. DigitalOcean has an excellent\nmarketplace with 1-Click Apps reviewed by its staff. QuestDB is available on the\nmarketplace recently, so the setup takes about 30 seconds:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Navigate to the\n",(0,i.kt)("a",{parentName:"li",href:"https://marketplace.digitalocean.com/apps/questdb?refcode=50d6b551562b"},"marketplace listing")),(0,i.kt)("li",{parentName:"ol"},"Click on ",(0,i.kt)("strong",{parentName:"li"},"Create QuestDB Droplet")),(0,i.kt)("li",{parentName:"ol"},"Select the basic plan for your Droplet (4GB RAM is recommended)")),(0,i.kt)(o.Z,{alt:"Choosing the RAM and CPU capacity for a QuestDB DigitalOcean Droplet",height:591,src:"/img/blog/2021-07-09/choosing-droplet.png",width:770,mdxType:"Screenshot"}),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Choose a region closest to you"),(0,i.kt)("li",{parentName:"ol"},"At the ",(0,i.kt)("strong",{parentName:"li"},"Authentication")," section, enter your SSH public key, or set a\npassword"),(0,i.kt)("li",{parentName:"ol"},"Set the hostname to ",(0,i.kt)("inlineCode",{parentName:"li"},"telegraf-questdb-tutorial")),(0,i.kt)("li",{parentName:"ol"},"Leave all other settings with their defaults, and click ",(0,i.kt)("strong",{parentName:"li"},"Create Droplet")," at\nthe bottom of the page")),(0,i.kt)(o.Z,{alt:"Finalizing the creation step of a DigitalOcean Droplet running QuestDB",height:591,src:"/img/blog/2021-07-09/questdb-droplet.png",width:770,mdxType:"Screenshot"}),(0,i.kt)("p",null,"In about 30 seconds, QuestDB is ready to use. To validate that we set everything\nup successfully, copy the Droplet's IP address by clicking on it and navigate to\n",(0,i.kt)("inlineCode",{parentName:"p"},"http://<IP ADDRESS>:9000/")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"<IP ADDRESS>")," is the IP address you just\ncopied. The interactive console should load and we can start querying the\ndatabase and inserting data!"),(0,i.kt)("h3",{id:"create-digitalocean-droplets-with-telegraf-agent"},"Create DigitalOcean Droplets with Telegraf agent"),(0,i.kt)("p",null,"We don't have any data in the database to query yet, so the next steps are to\nsend some metrics to QuestDB for inspection. Scripts that create dummy data are\nalways good to get started, but in this case, let's use some actual data\ncollected on demo machines, so we have proper metrics to play with instead of\nsynthetic data. From the QuestDB docs:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"QuestDB exposes a reader for InfluxDB line protocol which allows using QuestDB\nas a drop-in replacement for InfluxDB and other systems which implement this\nprotocol. \u2013 ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/api/ilp/overview"},"questdb.io"))),(0,i.kt)("p",null,"We will utilize InfluxDB line protocol to send data via Telegraf to QuestDB\ndirectly. The next step is to create some Droplets, start Telegraf agents, and\npoint them to QuestDB. Create the Droplets following these steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Navigate to the ",(0,i.kt)("a",{parentName:"li",href:"https://cloud.digitalocean.com/droplets"},"Droplets dashboard")),(0,i.kt)("li",{parentName:"ol"},"In the top-right section of the page, click ",(0,i.kt)("strong",{parentName:"li"},"Create")," and select\n",(0,i.kt)("strong",{parentName:"li"},"Droplets")),(0,i.kt)("li",{parentName:"ol"},'At the "Choose an image" section, select ',(0,i.kt)("inlineCode",{parentName:"li"},"Ubuntu")," (",(0,i.kt)("inlineCode",{parentName:"li"},"20.04 LTS x64")," at the\ntime of writing)"),(0,i.kt)("li",{parentName:"ol"},"Select the ",(0,i.kt)("strong",{parentName:"li"},"Basic")," plan for your Droplet and the minimum resource type"),(0,i.kt)("li",{parentName:"ol"},"Choose a region of your choice that is the closest to you"),(0,i.kt)("li",{parentName:"ol"},'At the "Authentication" section, select your SSH key or set a password for\nthe Droplet\'s root account'),(0,i.kt)("li",{parentName:"ol"},"Set the ",(0,i.kt)("strong",{parentName:"li"},"number of Droplets to 2")),(0,i.kt)("li",{parentName:"ol"},"Set the hostname to ",(0,i.kt)("inlineCode",{parentName:"li"},"telegraf-agent-1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"telegraf-agent-2")),(0,i.kt)("li",{parentName:"ol"},'Leave all other settings with their defaults, and click "Create Droplet" at\nthe bottom of the page')),(0,i.kt)("p",null,"Compared to the previous Droplet creation, DigitalOcean will create two Droplets\ninstead of one. In a few seconds, the Droplets are ready to start up the\nTelegraf agent."),(0,i.kt)(o.Z,{alt:"A list of running DigitalOcean Droplets with the QuestDB application running and two demo instances",height:591,src:"/img/blog/2021-07-09/available-droplets.png",width:770,mdxType:"Screenshot"}),(0,i.kt)("h2",{id:"configuring-telegraf-agents-to-send-metrics-to-questdb"},"Configuring Telegraf agents to send metrics to QuestDB"),(0,i.kt)("p",null,"In this section, we will install the Telegraf agent on all three Droplets. We\ncan collect the system metrics from two DigitalOcean droplets that are remote,\nand we will send the local metrics of the QuestDB droplet's host into the\ndatabase itself. To install Telegraf, we will follow the official installation\nmethod."),(0,i.kt)("h3",{id:"installing-telegraf-on-the-questdb-droplet"},"Installing Telegraf on the QuestDB Droplet"),(0,i.kt)("p",null,"First of all, log in to ",(0,i.kt)("inlineCode",{parentName:"p"},"telegraf-questdb-tutorial")," Droplet by executing\n",(0,i.kt)("inlineCode",{parentName:"p"},"ssh root@<IP ADDRESS>")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"<IP ADDRESS>")," is the Droplet's IP address. Then,\non the server, run the following to make the Telegraf client available for\ninstallation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Download the signing keys from influxdata.com\ncurl -s https://repos.influxdata.com/influxdb.key | apt-key add -\n\n# Source release information\nsource /etc/lsb-release\n\n# Add influxdata.com APT repository to the APT repository list\necho "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | tee /etc/apt/sources.list.d/influxdb.list\n\n# Fetch available repositories and read package lists\napt-get update\n')),(0,i.kt)("p",null,"We are running the above commands to add the APT repository to our list of\navailable repositories. Now, we can install the agent as we would do with any\npackages by executing ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get install -y telegraf"),". The agent is installed but\nnot configured yet. To configure it, let's create a new configuration file at\n",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/telegraf/telegraf.d/questdb.conf")," with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Configuration for Telegraf agent\n[agent]\n  ## Default data collection interval for all inputs\n  interval = "5s"\n\n# Write results to QuestDB\n[[outputs.socket_writer]]\n  # Write metrics to a local QuestDB instance over TCP\n  address = "tcp://127.0.0.1:9009"\n\n# Read metrics about CPU usage\n[[inputs.cpu]]\n# Read metrics about memory usage\n[[inputs.mem]]\n# Read system statistics, like load on the server\n[[inputs.system]]\n')),(0,i.kt)("p",null,"After saving the configuration file, we have one thing left to do: restart\nTelegraf by running ",(0,i.kt)("inlineCode",{parentName:"p"},"systemctl restart telegraf"),". In 5 seconds, the agent will\nstart reporting to QuestDB."),(0,i.kt)("h3",{id:"installing-telegraf-on-demo-droplets"},"Installing Telegraf on demo Droplets"),(0,i.kt)("p",null,"Lastly, install Telegraf on the remaining Droplets. As you may expect, we have\nto perform the same process as the QuestDB droplet. SSH into both Droplets,\n",(0,i.kt)("inlineCode",{parentName:"p"},"telegraf-agent-1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"telegraf-agent-2"),"."),(0,i.kt)("p",null,"Add the necessary signing keys and prepare the local APT repository list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'# Download the signing keys from influxdata.com\ncurl -s https://repos.influxdata.com/influxdb.key | apt-key add -\n\n# Source release information\nsource /etc/lsb-release\n\n# Add influxdata.com APT repository to the APT repository list\necho "deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable" | tee /etc/apt/sources.list.d/influxdb.list\n\n# Fetch available repositories and read package lists\napt-get update\n')),(0,i.kt)("p",null,"Install Telegraf by executing ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get install -y telegraf")," and edit the\nconfiguration file ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/telegraf/telegraf.d/reporter.conf")," as the following:"),(0,i.kt)("p",null,"Note that below, we set the ",(0,i.kt)("inlineCode",{parentName:"p"},"socket_writer")," address in the configuration to\n",(0,i.kt)("inlineCode",{parentName:"p"},"<QUESTDB IP ADDRESS>"),", which is the IP address of the QuestDB Droplet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Configuration for Telegraf agent\n[agent]\n  ## Default data collection interval for all inputs\n  interval = "5s"\n\n# Write results to QuestDB\n[[outputs.socket_writer]]\n  # Write metrics to a local QuestDB instance over TCP\n  address = "tcp://<QUESTDB IP ADDRESS>:9009"\n\n# Read metrics about CPU usage\n[[inputs.cpu]]\n# Read metrics about memory usage\n[[inputs.mem]]\n# Read system statistics, like load on the server\n[[inputs.system]]\n')),(0,i.kt)("p",null,"Restart the Telegraf agents with ",(0,i.kt)("inlineCode",{parentName:"p"},"systemctl restart telegraf")," just like the\nQuestDB Droplet; in a few seconds, the agents will start reporting to our\ndatabase."),(0,i.kt)("h2",{id:"run-sql-queries-on-telegraf-metrics"},"Run SQL queries on Telegraf metrics"),(0,i.kt)("p",null,"At this point, we have every component set up and running to visualize some\nincoming data. Navigate to ",(0,i.kt)("inlineCode",{parentName:"p"},"http://<QUESTDB IP ADDRESS>:9000")," where the\n",(0,i.kt)("inlineCode",{parentName:"p"},"<QUESTDB IP ADDRESS>")," is the IP address of your QuestDB droplet, and write the\nfollowing SQL statement in the SQL editor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM cpu\n")),(0,i.kt)("p",null,"This will return all data in the table for CPU metrics sent by Telegraf. We can\neasily create some aggregates like the average CPU usage per machine:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    host,\n    avg(usage_system) cpu_average,\n    timestamp\nFROM cpu\n")),(0,i.kt)("p",null,"If we want to perform some more complex queries, we can perform JOINs across the\nthree tables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    cpu.host,\n    avg(mem.used_percent) mem_usage_average,\n    avg(cpu.usage_system) cpu_average,\n    avg(system.load1) load1_average,\n    cpu.timestamp as timestamp\nFROM cpu\nINNER JOIN mem ON mem.host = cpu.host\nINNER JOIN system ON system.host = cpu.host\nSAMPLE BY 5m\nORDER BY timestamp DESC\n")),(0,i.kt)("p",null,"And to visualize this data, query memory usage using the following SQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT\n    host,\n    avg(mem.used_percent) usage_average,\n    timestamp\nFROM mem\nWHERE host = 'telegraf-agent-1'\nSAMPLE BY 30s\nORDER BY timestamp DESC\n")),(0,i.kt)("p",null,"The basic in-built charting functionality that QuestDB has can be used like so:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Click the ",(0,i.kt)("strong",{parentName:"li"},"Chart")," tab"),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("strong",{parentName:"li"},"Chart type")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"line")),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("strong",{parentName:"li"},"Labels")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")),(0,i.kt)("li",{parentName:"ol"},"Plot ",(0,i.kt)("inlineCode",{parentName:"li"},"usage_average")," as a ",(0,i.kt)("strong",{parentName:"li"},"Series")," and click ",(0,i.kt)("strong",{parentName:"li"},"Draw"))),(0,i.kt)(o.Z,{alt:"Visualizing the results of a SQL query over system and CPU metrics in QuestDB as a line chart",height:591,src:"/img/blog/2021-07-09/visualizing-sql-questdb.png",width:770,mdxType:"Screenshot"}),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"We've installed QuestDB on DigitalOcean using the new Marketplace offering for\nQuestDB, set up multiple Droplets to report actual metrics to QuestDB via\nTelegraf, and visualized these metrics on the interactive console. This tutorial\nshows how easy it is to send real system metrics as time series data to a\ndatabase like QuestDB for reports and visualization."),(0,i.kt)("p",null,"For next steps, we can experiment with some of the additional integrations that\nTelegraf supports to grab insights from other applications and\n",(0,i.kt)("a",{parentName:"p",href:"/blog/2020/10/19/grafana-tutorial"},"use the Grafana integration that QuestDB offers"),"\nto set up more detailed dashboards for visualization or even alerting and\nnotifications."),(0,i.kt)("p",null,"If you like this content, we'd love to know your thoughts! Feel free to share\nyour feedback or come and say hello in the\n",(0,i.kt)("a",{parentName:"p",href:"https://"},"QuestDB Community Slack"),"."))}d.isMDXComponent=!0},86010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);