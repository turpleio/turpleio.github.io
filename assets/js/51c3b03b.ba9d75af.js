"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[2835],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),c=r,k=d["".concat(s,".").concat(c)]||d[c]||u[c]||l;return a?n.createElement(k,i(i({ref:t},m),{},{components:a})):n.createElement(k,i({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8215:function(e,t,a){var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},1395:function(e,t,a){a.d(t,{Z:function(){return m}});var n=a(7294),r=a(944),l=a(6010),i="tabItem_vU9c",o="tabItemActive_cw6a";var s=37,p=39;var m=function(e){var t=e.lazy,a=e.block,m=e.defaultValue,u=e.values,d=e.groupId,c=e.className,k=(0,r.Z)(),h=k.tabGroupChoices,g=k.setTabGroupChoices,N=(0,n.useState)(m),f=N[0],b=N[1],v=n.Children.toArray(e.children),y=[];if(null!=d){var C=h[d];null!=C&&C!==f&&u.some((function(e){return e.value===C}))&&b(C)}var w=function(e){var t=e.currentTarget,a=y.indexOf(t),n=u[a].value;b(n),null!=d&&(g(d,n),setTimeout((function(){var e,a,n,r,l,i,s,p;(e=t.getBoundingClientRect(),a=e.top,n=e.left,r=e.bottom,l=e.right,i=window,s=i.innerHeight,p=i.innerWidth,a>=0&&l<=p&&r<=s&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(o),setTimeout((function(){return t.classList.remove(o)}),2e3))}),150))},T=function(e){var t,a;switch(e.keyCode){case p:var n=y.indexOf(e.target)+1;a=y[n]||y[0];break;case s:var r=y.indexOf(e.target)-1;a=y[r]||y[y.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},c)},u.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,className:(0,l.Z)("tabs__item",i,{"tabs__item--active":f===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:T,onFocus:w,onClick:w},a)}))),t?(0,n.cloneElement)(v.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},9443:function(e,t,a){var n=(0,a(7294).createContext)(void 0);t.Z=n},944:function(e,t,a){var n=a(7294),r=a(9443);t.Z=function(){var e=(0,n.useContext)(r.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},9825:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},metadata:function(){return m},toc:function(){return u},default:function(){return c}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=a(1395),o=a(8215),s=["components"],p={title:"CSV import via COPY SQL",sidebar_label:"Large CSV import (COPY SQL)",description:"This document describes how to load large CSV data using COPY SQL keyword."},m={unversionedId:"guides/importing-data",id:"guides/importing-data",isDocsHomePage:!1,title:"CSV import via COPY SQL",description:"This document describes how to load large CSV data using COPY SQL keyword.",source:"@site/docs/guides/importing-data.md",sourceDirName:"guides",slug:"/guides/importing-data",permalink:"/docs/guides/importing-data",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/guides/importing-data.md",version:"current",sidebar_label:"Large CSV import (COPY SQL)",frontMatter:{title:"CSV import via COPY SQL",sidebar_label:"Large CSV import (COPY SQL)",description:"This document describes how to load large CSV data using COPY SQL keyword."},sidebar:"docs",previous:{title:"Web Console",permalink:"/docs/develop/web-console"},next:{title:"CSV import via REST API",permalink:"/docs/guides/importing-data-rest"}},u=[{value:"Prepare the import",id:"prepare-the-import",children:[{value:"Export the existing database",id:"export-the-existing-database",children:[]},{value:"Things to know about <code>COPY</code>",id:"things-to-know-about-copy",children:[]},{value:"Configure <code>COPY</code>",id:"configure-copy",children:[]}]},{value:"Create the target table schema",id:"create-the-target-table-schema",children:[]},{value:"Import CSV",id:"import-csv",children:[]},{value:"Track import progress",id:"track-import-progress",children:[]},{value:"FAQ",id:"faq",children:[]}],d={toc:u};function c(e){var t=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For partitioned tables, the best ",(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," performance can be achieved only on a\nmachine with a local, physically attached SSD. It is possible to use a network\nblock storage, such as an AWS EBS volume to perform the operation, with the\nfollowing impacts:"),(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},"Users need to configure the maximum IOPS and throughput setting values for the\nvolume."),(0,l.kt)("li",{parentName:"ul"},"The required import time is likely to be 5-10x longer.")))),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/copy/"},"COPY")," SQL command is the preferred way to import\nlarge CSV files into partitioned tables. It should be used to migrate data from\nanother database into QuestDB. This guide describes the method of migrating data\nto QuestDB via CSV files. For the time being this is the only way to migrate\ndata from other databases into QuestDB."),(0,l.kt)("p",null,"This guide is applicable for QuestDB version 6.5 and higher."),(0,l.kt)("h2",{id:"prepare-the-import"},"Prepare the import"),(0,l.kt)("p",null,"Preparation is key. Import is a multi-step process, which consists of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Export the existing database as CSV files"),(0,l.kt)("li",{parentName:"ul"},"Enable and configure ",(0,l.kt)("inlineCode",{parentName:"li"},"COPY")," command to be optimal for the system"),(0,l.kt)("li",{parentName:"ul"},"Prepare target schema in QuestDB")),(0,l.kt)("h3",{id:"export-the-existing-database"},"Export the existing database"),(0,l.kt)("p",null,"Export data using one CSV file per table. Make sure to export a column, which\ncan be used as timestamp. Data in CSV is not expected to be in any particular\norder. If it is not possible to export the table as one CSV, export multiple\nfiles and concatenate these files before importing into QuestDB."),(0,l.kt)("h4",{id:"concatenate-multiple-csv-files"},"Concatenate multiple CSV files"),(0,l.kt)("p",null,"The way to concatenate files depends on whether the CSV files have headers."),(0,l.kt)("p",null,"For CSV files without headers, concatenation is straightforward:"),(0,l.kt)(i.Z,{defaultValue:"linux",values:[{label:"Linux",value:"linux"},{label:"macOS",value:"macos"},{label:"Windows PowerShell",value:"windows"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"linux",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"ls *.csv | xargs cat > singleFile.csv\n"))),(0,l.kt)(o.Z,{value:"macos",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"ls *.csv | xargs cat > singleFile.csv\n"))),(0,l.kt)(o.Z,{value:"windows",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$TextFiles = Get-Item C:\\Users\\path\\to\\csv\\*.csv\n# The files are moved to the same folder.\n$TextFiles foreach { Add-Content -Value $(Get-Content $_) -Path C:\\Users\\path\\to\\csv\\singleFile.csv}\n")))),(0,l.kt)("p",null,"For CSV files with headers, concatenation can be tricky. You could manually\nremove the first line of the files before concatenating, or use some smart\ncommand line to concatenate and remove the headers. A good alternative is using\nthe open source tool\n",(0,l.kt)("a",{parentName:"p",href:"https://csvkit.readthedocs.io/en/latest/scripts/csvstack.html"},"csvstack"),"."),(0,l.kt)("p",null,"This is how you can concatenate multiple CSV files using ",(0,l.kt)("em",{parentName:"p"},"csvstack"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"csvstack *.csv > singleFile.csv\n")),(0,l.kt)("h3",{id:"things-to-know-about-copy"},"Things to know about ",(0,l.kt)("inlineCode",{parentName:"h3"},"COPY")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," is disabled by default, as a security precaution. Configuration is\nrequired.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," is more efficient when source and target disks are different.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," is parallel when target table is partitioned.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," is ",(0,l.kt)("em",{parentName:"p"},"serial")," when target table is non-partitioned, out-of-order\ntimestamps will be rejected.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," cannot import data into non-empty table.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," indexes CSV file; reading indexed CSV file benefits hugely from disk\nIOPS. We recommend using NVME.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," imports one file at a time; there is no internal queuing system yet.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/copy/"},"COPY reference")))),(0,l.kt)("h3",{id:"configure-copy"},"Configure ",(0,l.kt)("inlineCode",{parentName:"h3"},"COPY")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Enable ",(0,l.kt)("inlineCode",{parentName:"li"},"COPY")," and ",(0,l.kt)("a",{parentName:"li",href:"/docs/reference/configuration#csv-import"},"configure")," ",(0,l.kt)("inlineCode",{parentName:"li"},"COPY"),"\ndirectories to suit your server."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cairo.sql.copy.root")," must be set for ",(0,l.kt)("inlineCode",{parentName:"li"},"COPY")," to work.")),(0,l.kt)("h2",{id:"create-the-target-table-schema"},"Create the target table schema"),(0,l.kt)("p",null,"If you know the target table schema already, you can\n",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/importing-data#import-csv"},"skip this section"),"."),(0,l.kt)("p",null,'QuestDB could analyze the input file and "guess" the schema. This logic is\nactivated when target table does not exist.'),(0,l.kt)("p",null,"To have QuestDB help with determining file schema, it is best to work with a\nsub-set of CSV. A smaller file allows us to iterate faster if iteration is\nrequired."),(0,l.kt)("p",null,"Let's assume we have the following CSV:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv",metastring:'"weather.csv"','"weather.csv"':!0},'"locationId","timestamp","windDir","windSpeed","windGust","cloudCeiling","skyCover","visMiles","tempF","dewpF","rain1H","rain6H","rain24H","snowDepth"\n1,"2010-07-05T00:23:58.981263Z",3050,442,512,,"OBS",11.774906006761,-5,-31,58.228032196984,70.471606345673,77.938252342637,58\n2,"2017-10-10T10:13:55.246046Z",900,63,428,5487,"BKN",4.958601701089,-19,-7,4.328016420894,36.020659549374,97.821114441800,41\n3,"2010-03-12T11:17:13.727137Z",2880,299,889,371,"BKN",10.342717709226,46,81,9.149518425127,20.229637391479,20.074738007931,80\n4,"2018-08-21T15:42:23.107543Z",930,457,695,4540,"OBS",13.359184086767,90,-47,33.346163208862,37.501996055160,58.316836760009,13\n...\n')),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Extract the first 1000 line to ",(0,l.kt)("inlineCode",{parentName:"li"},"test_file.csv")," (assuming both files are in\nthe ",(0,l.kt)("inlineCode",{parentName:"li"},"cairo.sql.copy.root")," directory):")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"head -1000 weather.csv > test_file.csv\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use a simple ",(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," command to import ",(0,l.kt)("inlineCode",{parentName:"p"},"test_file.csv")," and define the table\nname:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"COPY weather from 'test_file.csv' WITH HEADER true;\n")))),(0,l.kt)("p",null,"Table ",(0,l.kt)("inlineCode",{parentName:"p"},"weather")," is created and it quickly returns an id of asynchronous import\nprocess running in the background:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5179978a6d7a1772")))),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"In the Web Console right click table and select ",(0,l.kt)("inlineCode",{parentName:"p"},"Copy Schema to Clipboard")," -\nthis copies the schema generated by the input file analysis.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Paste the table schema to the code editor:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE 'weather' (\n  timestamp TIMESTAMP,\n  windDir INT,\n  windSpeed INT,\n  windGust INT,\n  cloudCeiling INT,\n  skyCover STRING,\n  visMiles DOUBLE,\n  tempF INT,\n  dewpF INT,\n  rain1H DOUBLE,\n  rain6H DOUBLE,\n  rain24H DOUBLE,\n  snowDepth INT\n);\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Identify the correct schema:"),(0,l.kt)("p",{parentName:"li"},"5.1. The generated schema may not be completely correct. Check the log table\nand log file to resolve common errors using the id (see also\n",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/importing-data#track-import-progress"},"Track import progress"),"\nand ",(0,l.kt)("a",{parentName:"p",href:"/docs/guides/importing-data#faq"},"FAQ"),"):"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM sys.text_import_log WHERE id = '5179978a6d7a1772' ORDER BY ts DESC;\n")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"ts"),(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"table"),(0,l.kt)("th",{parentName:"tr",align:null},"file"),(0,l.kt)("th",{parentName:"tr",align:null},"phase"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"message"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_handled"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_imported"),(0,l.kt)("th",{parentName:"tr",align:null},"errors"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-08T16:38:06.262706Z"),(0,l.kt)("td",{parentName:"tr",align:null},"5179978a6d7a1772"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"test_file.csvtest_file.csv"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"finished"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"999"),(0,l.kt)("td",{parentName:"tr",align:null},"999"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2022-08-08T16:38:06.226162Z"),(0,l.kt)("td",{parentName:"tr",align:null},"5179978a6d7a1772"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"test_file.csvtest_file.csv"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"started"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("p",null,"Check ",(0,l.kt)("inlineCode",{parentName:"p"},"rows_handled"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"rows_imported"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"message")," for any errors and amend\nthe schema as required."),(0,l.kt)("p",null,"5.2. Drop the table and re-import ",(0,l.kt)("inlineCode",{parentName:"p"},"test_file.csv")," using the updated schema."),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Repeat the steps to narrow down to a correct schema."),(0,l.kt)("p",{parentName:"li"},"The process may require either truncating:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"TRUNCATE TABLE table_name;\n")),(0,l.kt)("p",{parentName:"li"},"or dropping the target table:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"DROP TABLE table_name;\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Clean up: Once all the errors are resolved, copy the final schema, drop the\nsmall table.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Make sure table is correctly partitioned. The final schema in our example\nshould look like this:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"CREATE TABLE 'weather' (\n  timestamp TIMESTAMP,\n  windDir INT,\n  windSpeed INT,\n  windGust INT,\n  cloudCeiling INT,\n  skyCover STRING,\n  visMiles DOUBLE,\n  tempF INT,\n  dewpF INT,\n  rain1H DOUBLE,\n  rain6H DOUBLE,\n  rain24H DOUBLE,\n  snowDepth INT\n) TIMESTAMP (timestamp) partitioned by DAY;\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Ready for import: Create an empty table using the final schema."))),(0,l.kt)("h2",{id:"import-csv"},"Import CSV"),(0,l.kt)("p",null,"Once an empty table is created in QuestDB using the correct schema, import can\nbe initiated with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"COPY weather FROM 'weather.csv' WITH HEADER true TIMESTAMP 'timestamp' FORMAT 'yyyy-MM-ddTHH:mm:ss.SSSUUUZ';\n")),(0,l.kt)("p",null,"It quickly returns id of asynchronous import process running in the background:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"id"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"55020329020b446a")))),(0,l.kt)("h2",{id:"track-import-progress"},"Track import progress"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," returns an id for querying the log table (",(0,l.kt)("inlineCode",{parentName:"p"},"sys.text_import_log"),"), to\nmonitor the progress of ongoing import:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM sys.text_import_log WHERE id = '55020329020b446a';\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"table"),(0,l.kt)("th",{parentName:"tr",align:null},"file"),(0,l.kt)("th",{parentName:"tr",align:null},"phase"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"message"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_handled"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_imported"),(0,l.kt)("th",{parentName:"tr",align:null},"errors"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T14:00:40.907224Z"),(0,l.kt)("td",{parentName:"tr",align:null},"55020329020b446a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"started"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T14:00:40.910709Z"),(0,l.kt)("td",{parentName:"tr",align:null},"55020329020b446a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"analyze_file_structure"),(0,l.kt)("td",{parentName:"tr",align:null},"started"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T14:00:42.370563Z"),(0,l.kt)("td",{parentName:"tr",align:null},"55020329020b446a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"analyze_file_structure"),(0,l.kt)("td",{parentName:"tr",align:null},"finished"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T14:00:42.370793Z"),(0,l.kt)("td",{parentName:"tr",align:null},"55020329020b446a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"boundary_check"),(0,l.kt)("td",{parentName:"tr",align:null},"started"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("p",null,"Looking at the log from the newest to the oldest might be more convenient:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM sys.text_import_log WHERE id = '55020329020b446a' ORDER BY ts DESC;\n")),(0,l.kt)("p",null,"Once import successfully ends the log table should contain a row with a 'null'\nphase and 'finished' status :"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"table"),(0,l.kt)("th",{parentName:"tr",align:null},"file"),(0,l.kt)("th",{parentName:"tr",align:null},"phase"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"message"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_handled"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_imported"),(0,l.kt)("th",{parentName:"tr",align:null},"errors"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T14:10:59.198672Z"),(0,l.kt)("td",{parentName:"tr",align:null},"55020329020b446a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"finished"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"300000000"),(0,l.kt)("td",{parentName:"tr",align:null},"300000000"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("p",null,"Import into non-partitioned tables uses single-threaded implementation (serial\nimport) that reports only start and finish records in the status table. Given an\nordered CSV file ",(0,l.kt)("inlineCode",{parentName:"p"},"weather1mil.csv"),", when importing, the log table shows:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"ts"),(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"table"),(0,l.kt)("th",{parentName:"tr",align:null},"file"),(0,l.kt)("th",{parentName:"tr",align:null},"phase"),(0,l.kt)("th",{parentName:"tr",align:null},"status"),(0,l.kt)("th",{parentName:"tr",align:null},"message"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_handled"),(0,l.kt)("th",{parentName:"tr",align:null},"rows_imported"),(0,l.kt)("th",{parentName:"tr",align:null},"errors"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T15:00:40.907224Z"),(0,l.kt)("td",{parentName:"tr",align:null},"42d31603842f771a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather1mil.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"started"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"2022-08-03T15:01:20.000709Z"),(0,l.kt)("td",{parentName:"tr",align:null},"42d31603842f771a"),(0,l.kt)("td",{parentName:"tr",align:null},"weather"),(0,l.kt)("td",{parentName:"tr",align:null},"weather1mil.csv"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"finished"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"999999"),(0,l.kt)("td",{parentName:"tr",align:null},"999999"),(0,l.kt)("td",{parentName:"tr",align:null},"0")))),(0,l.kt)("p",null,"The log table contains only coarse-grained, top-level data. Import phase run\ntimes vary a lot (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"partition_import")," often takes 80% of the whole import\nexecution time), and therefore\n",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/configuration#logging"},"the server log")," provides an alternative\nto follow more details of import:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log",metastring:'title="import log"',title:'"import','log"':!0},"2022-08-03T14:00:40.907224Z I i.q.c.t.ParallelCsvFileImporter started [importId=5502031634e923b2, phase=analyze_file_structure, file=`C:\\dev\\tmp\\weather.csv`, workerCount=10]\n2022-08-03T14:00:40.917224Z I i.q.c.p.WriterPool >> [table=`weather`, thread=43]\n2022-08-03T14:00:41.440049Z I i.q.c.t.ParallelCsvFileImporter finished [importId=5502031634e923b2, phase=analyze_file_structure, file=`C:\\dev\\tmp\\weather.csv`, duration=0s, errors=0]\n2022-08-03T14:00:41.440196Z I i.q.c.t.ParallelCsvFileImporter started [importId=5502031634e923b2, phase=boundary_check, file=`C:\\dev\\tmp\\weather.csv`, workerCount=10]\n2022-08-03T14:01:18.853212Z I i.q.c.t.ParallelCsvFileImporter finished [importId=5502031634e923b2, phase=boundary_check, file=`C:\\dev\\tmp\\weather.csv`, duration=6s, errors=0]\n2022-08-03T14:01:18.853303Z I i.q.c.t.ParallelCsvFileImporter started [importId=5502031634e923b2, phase=indexing, file=`C:\\dev\\tmp\\weather.csv`, workerCount=10]\n2022-08-03T14:01:18.853516Z I i.q.c.t.ParallelCsvFileImporter temporary import directory [path='E:\\dev\\tmp\\weather\\]\n2022-08-03T14:01:42.612302Z I i.q.c.t.CsvFileIndexer finished chunk [chunkLo=23099021813, chunkHi=26948858785, lines=29999792, errors=0]\n2022-08-03T14:01:42.791789Z I i.q.c.t.CsvFileIndexer finished chunk [chunkLo=11549510915, chunkHi=15399347885, lines=30000011, errors=0]\n")),(0,l.kt)("p",null,"If the ",(0,l.kt)("a",{parentName:"p",href:"/docs/reference/sql/copy#options"},(0,l.kt)("inlineCode",{parentName:"a"},"ON ERROR")," option")," is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"ABORT"),",\nimport stops on the first error and the error is logged. Otherwise, all errors\nare listed in the log."),(0,l.kt)("p",null,"The reference to the error varies depending on the phase of an import:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In the indexing phase, if an error occurs, the absolute input file line is\nreferenced:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},"2022-08-08T11:50:24.319675Z E i.q.c.t.CsvFileIndexer could not parse timestamp [line=999986, column=1]\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In the data import phase, if an error occurs, the log references the offset as\nrelated to the start of the file.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},"2022-08-08T12:19:56.828792Z E i.q.c.t.TextImportTask type syntax [type=INT, offset=5823, column=0, value='CMP2']\n")),(0,l.kt)("p",null,"The errored rows can then be extracted for further investigation."),(0,l.kt)("h2",{id:"faq"},"FAQ"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"What happens in a database crash or OS reboot?"),(0,l.kt)("p",null,(0,l.kt)("p",null,"If reboot/power loss happens while partitions are being attached, then table\nmight be left with incomplete data. Please truncate table before re-importing\nwith:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"TRUNCATE TABLE table_name;\n")),(0,l.kt)("p",null,"If reboot/power loss happens before any partitions being attached, the import\nshould not be affected."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"I'm getting \"COPY is disabled ['cairo.sql.copy.root' is not set?]\" error message"),(0,l.kt)("p",null,(0,l.kt)("p",null,"Please set ",(0,l.kt)("inlineCode",{parentName:"p"},"cairo.sql.copy.root")," setting, restart the instance and try again."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"I'm getting \"could not create temporary import work directory [path='somepath', errno=-1]\" error message"),(0,l.kt)("p",null,(0,l.kt)("p",null,"Please make sure that the ",(0,l.kt)("inlineCode",{parentName:"p"},"cairo.sql.copy.root")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"cairo.sql.copy.work.root"),"\nare valid paths pointing to existing directories."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,'I\'m getting "[2] could not open read-only [file=somepath]" error message'),(0,l.kt)("p",null,(0,l.kt)("p",null,"Please check that import file path is valid and accessible to QuestDB instance\nusers."),(0,l.kt)("p",null,"If you are running QuestDB using Docker, please check if the directory mounted\nfor storing source CSV files is identical to the one ",(0,l.kt)("inlineCode",{parentName:"p"},"cairo.sql.copy.root"),"\nproperty or ",(0,l.kt)("inlineCode",{parentName:"p"},"QDB_CAIRO_SQL_COPY_ROOT")," environment variable points to."),(0,l.kt)("p",null,"For example, the following command can start a QuestDB instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker run -p 9000:9000 \\\n-v "/tmp/questdb:/var/lib/questdb" \\\n-v "/tmp/questdb/my_input_root:/tmp/questdb_import" \\\n-e QDB_CAIRO_SQL_COPY_ROOT=/tmp/questdb_wrong \\\nquestdb/questdb\n')),(0,l.kt)("p",null,"However, running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"COPY weather from 'weather_example.csv' WITH HEADER true;\n")),(0,l.kt)("p",null,'Results in the "',"[2]"," could not open read-only\n","[file=/tmp/questdb_wrong/weather_example.csv]",'" error message.'))),(0,l.kt)("details",null,(0,l.kt)("summary",null,'I\'m getting "column count mismatch [textColumnCount=4, tableColumnCount=3, table=someTable]" error message'),(0,l.kt)("p",null,(0,l.kt)("p",null,"There are more columns in input file than in the existing target table. Please\nremove column(s) from input file or add them to the target table schema."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"I'm getting \"timestamp column 'ts2' not found in file header\" error message"),(0,l.kt)("p",null,(0,l.kt)("p",null,"Either input file is missing header or timestamp column name given in ",(0,l.kt)("inlineCode",{parentName:"p"},"COPY"),"\ncommand is invalid. Please add file header or fix timestamp option."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"I'm getting \"column is not a timestamp [no=0, name='ts']\" error message"),(0,l.kt)("p",null,(0,l.kt)("p",null,"Timestamp column given by the user or (if header is missing) assumed based on\ntarget table schema is of a different type.",(0,l.kt)("br",{parentName:"p"}),"\n","Please check timestamp column name in input file header or make sure input file\ncolumn order matches that of target table."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,'I\'m getting "target table must be empty [table=t]" error message'),(0,l.kt)("p",null,(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," doesn't yet support importing into partitioned table with existing data."),(0,l.kt)("p",null,"Please truncate table before re-importing with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"TRUNCATE TABLE table_name;\n")),(0,l.kt)("p",null,"or import into another empty table and then use ",(0,l.kt)("inlineCode",{parentName:"p"},"INSERT INTO SELECT"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"INSERT INTO table_name batch 100000\nSELECT * FROM other_table;\n")),(0,l.kt)("p",null,"to copy data into original target table."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,'I\'m getting "io_uring error" error message'),(0,l.kt)("p",null,(0,l.kt)("p",null,"It's possible that you've hit a IO_URING-related kernel error.",(0,l.kt)("br",{parentName:"p"}),"\n","Please set ",(0,l.kt)("inlineCode",{parentName:"p"},"cairo.iouring.enabled")," setting to false, restart QuestDB instance,\nand try again."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,'I\'m getting "name is reserved" error message'),(0,l.kt)("p",null,(0,l.kt)("p",null,"The table you're trying import into is in bad state (metadata is incomplete)."),(0,l.kt)("p",null,"Please either drop the table with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"DROP TABLE table_name;\n")),(0,l.kt)("p",null,"and recreate the table or change the table name in the ",(0,l.kt)("inlineCode",{parentName:"p"},"COPY")," command."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,'I\'m getting "Unable to process the import request. Another import request may be in progress." error message'),(0,l.kt)("p",null,(0,l.kt)("p",null,"Only one import can be running at a time."),(0,l.kt)("p",null,"Either cancel running import with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"COPY 'paste_import_id_here' CANCEL;\n")),(0,l.kt)("p",null,"or wait until the current import is finished."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Import finished but table is (almost) empty"),(0,l.kt)("p",null,(0,l.kt)("p",null,"Please check the latest entries in log table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"SELECT * FROM sys.text_import_log LIMIT -10;\n")),(0,l.kt)("p",null,'If "errors" column is close to number of records in the input file then it may\nmean:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"FORMAT")," option of ",(0,l.kt)("inlineCode",{parentName:"li"},"COPY")," command or auto-detected format doesn't match\ntimestamp column data in file"),(0,l.kt)("li",{parentName:"ul"},"Other column(s) can't be parsed and ",(0,l.kt)("inlineCode",{parentName:"li"},"ON ERROR SKIP_ROW")," option was used"),(0,l.kt)("li",{parentName:"ul"},"Input file is unordered and target table has designated timestamp but is not\npartitioned")),(0,l.kt)("p",null,"If none of the above causes the error, please check the log file for messages\nlike:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},"2022-08-08T11:50:24.319675Z E i.q.c.t.CsvFileIndexer could not parse timestamp [line=999986, column=1]\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-log"},"2022-08-08T12:19:56.828792Z E i.q.c.t.TextImportTask type syntax [type=INT, offset=5823, column=0, value='CMP2']\n")),(0,l.kt)("p",null,"that should explain why rows were rejected. Note that in these examples, the\nformer log message mentions the absolute input file line while the latter is\nreferencing the offset as related to the start of the file."))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Import finished but table column names are `f0`, `f1`, ..."),(0,l.kt)("p",null,(0,l.kt)("p",null,"Input file misses header and target table does not exist, so columns received\nsynthetic names . You can rename them with the ",(0,l.kt)("inlineCode",{parentName:"p"},"ALTER TABLE")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-questdb-sql"},"ALTER TABLE table_name RENAME COLUMN f0 TO ts;\n")))))}c.isMDXComponent=!0},6010:function(e,t,a){function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);