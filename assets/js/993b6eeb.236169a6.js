"use strict";(self.webpackChunkquestdb_io=self.webpackChunkquestdb_io||[]).push([[2968],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,y=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},28096:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=["components"],l={title:"Symbol",sidebar_label:"Symbol",description:"Documentation for usage of the symbol data type in QuestDB. This type is used to store repetitive strings in order to enable optimizations on storage and search."},s={unversionedId:"concept/symbol",id:"concept/symbol",isDocsHomePage:!1,title:"Symbol",description:"Documentation for usage of the symbol data type in QuestDB. This type is used to store repetitive strings in order to enable optimizations on storage and search.",source:"@site/docs/concept/symbol.md",sourceDirName:"concept",slug:"/concept/symbol",permalink:"/docs/concept/symbol",editUrl:"https://github.com/turpleio/homepage/edit/main/docs/concept/symbol.md",version:"current",sidebar_label:"Symbol",frontMatter:{title:"Symbol",sidebar_label:"Symbol",description:"Documentation for usage of the symbol data type in QuestDB. This type is used to store repetitive strings in order to enable optimizations on storage and search."},sidebar:"docs",previous:{title:"Partitions",permalink:"/docs/concept/partitions"},next:{title:"Indexes",permalink:"/docs/concept/indexes"}},c=[{value:"Advantages of <code>symbol</code> types",id:"advantages-of-symbol-types",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Usage of <code>symbols</code>",id:"usage-of-symbols",children:[{value:"<code>Symbol</code> columns",id:"symbol-columns",children:[]},{value:"Symbols for column indexing",id:"symbols-for-column-indexing",children:[]}]}],p={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"QuestDB introduces a data type called ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol"),"; a data structure used to store\nrepetitive strings. Internally, ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," types are stored as a table of integers\nand their corresponding string values."),(0,o.kt)("p",null,"This page presents the concept, optional setting, and their indication for\n",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," types."),(0,o.kt)("h2",{id:"advantages-of-symbol-types"},"Advantages of ",(0,o.kt)("inlineCode",{parentName:"h2"},"symbol")," types"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Greatly improved query performance as string operations compare and write\n",(0,o.kt)("inlineCode",{parentName:"li"},"int")," types instead of ",(0,o.kt)("inlineCode",{parentName:"li"},"string"),"."),(0,o.kt)("li",{parentName:"ul"},"Greatly improved storage efficiency as ",(0,o.kt)("inlineCode",{parentName:"li"},"int")," maps to ",(0,o.kt)("inlineCode",{parentName:"li"},"string")," types."),(0,o.kt)("li",{parentName:"ul"},"Unobtrusive to the user because SQL execution has the same result as handling\nstring values."),(0,o.kt)("li",{parentName:"ul"},"Reduced complexity of database schemas by removing the need for explicit\nadditional tables or joins.")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Symbol tables are stored separately from column data."),(0,o.kt)("li",{parentName:"ul"},"Fast conversion from ",(0,o.kt)("inlineCode",{parentName:"li"},"string")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"int")," and vice-versa when reading or writing\ndata."),(0,o.kt)("li",{parentName:"ul"},"Columns defined as ",(0,o.kt)("inlineCode",{parentName:"li"},"symbol")," types support indexing."),(0,o.kt)("li",{parentName:"ul"},"By default, QuestDB caches ",(0,o.kt)("inlineCode",{parentName:"li"},"symbol")," types in memory for improved query speed\nand ILP ingestion speed. The setting is configurable.")),(0,o.kt)("h2",{id:"usage-of-symbols"},"Usage of ",(0,o.kt)("inlineCode",{parentName:"h2"},"symbols")),(0,o.kt)("h3",{id:"symbol-columns"},(0,o.kt)("inlineCode",{parentName:"h3"},"Symbol")," columns"),(0,o.kt)("p",null,"Columns can be specified as ",(0,o.kt)("inlineCode",{parentName:"p"},"SYMBOL")," using\n",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/sql/create-table"},"CREATE TABLE"),", similar to other types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-questdb-sql",metastring:'title="Create table with a SYMBOL type"',title:'"Create',table:!0,with:!0,a:!0,SYMBOL:!0,'type"':!0},"CREATE TABLE my_table\n  (symb SYMBOL CAPACITY 128 NOCACHE, price DOUBLE, ts TIMESTAMP)\ntimestamp(ts);\n")),(0,o.kt)("p",null,"The following additional symbol settings are defined, either globally as part of\nthe ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/configuration"},"server configuration")," or locally when a\ntable is created:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Symbol capacity"),": Optional setting used to indicate how many distinct\nvalues this column is expected to have. Based on the value used, the data\nstructures will resize themselves when necessary, to allow QuestDB to function\ncorrectly. Underestimating the symbol value count may result in drop of\nperformance whereas over-estimating may result in higher disk space and memory\nconsumption. Symbol capacity is also used to set the initial symbol cache size\nwhen the cache is enabled."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Server-wide setting: ",(0,o.kt)("inlineCode",{parentName:"li"},"cairo.default.symbol.capacity")," with a default of ",(0,o.kt)("inlineCode",{parentName:"li"},"256")),(0,o.kt)("li",{parentName:"ul"},"Column-wide setting: The\n",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/sql/create-table/#symbol-capacity"},(0,o.kt)("inlineCode",{parentName:"a"},"CAPACITY")," option")," for\n",(0,o.kt)("inlineCode",{parentName:"li"},"CREATE TABLE")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Cache"),": Optional setting specifying whether a symbol should be cached. When\na ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol")," column is cached, QuestDB will use a Java heap-based hash table to\nresolve symbol values and keys. When a column has a large number of distinct\nsymbol values (over 100,000, for example), the heap impact might be\nsignificant and may cause OutOfMemory errors, depending on the heap size. Not\ncaching leverages a memory-mapped structure which can deal with larger value\ncounts but is slower."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Server-wide setting: ",(0,o.kt)("inlineCode",{parentName:"li"},"cairo.default.symbol.cache.flag")," with a default of\n",(0,o.kt)("inlineCode",{parentName:"li"},"true")),(0,o.kt)("li",{parentName:"ul"},"Column-wide setting when a table is created: The\n",(0,o.kt)("a",{parentName:"li",href:"/docs/reference/sql/create-table/#symbol-caching"},(0,o.kt)("inlineCode",{parentName:"a"},"CACHE | NOCACHE")," keyword"),"\nfor ",(0,o.kt)("inlineCode",{parentName:"li"},"CREATE TABLE"))))),(0,o.kt)("h3",{id:"symbols-for-column-indexing"},"Symbols for column indexing"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Symbols")," may also be indexed for faster query execution. See\n",(0,o.kt)("a",{parentName:"p",href:"/docs/concept/indexes"},"Index")," for more information."))}m.isMDXComponent=!0}}]);